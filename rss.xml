<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ROSEdu Techblog</title>
        <link>http://techblog.rosedu.org</link>
        <description><![CDATA[ROSEdu Techblog]]></description>
        <atom:link href="http://techblog.rosedu.org/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 02 Mar 2014 00:00:00 UT</lastBuildDate>
        <item>
    <title>A superficial exploration of Haskell, part 2: Lazy by default</title>
    <link>http://techblog.rosedu.org/haskell-part2.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/haskell-part2.html" title="A superficial exploration of Haskell, part 2: Lazy by default">A superficial exploration of Haskell, part 2: Lazy by default</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March  2, 2014</span>
      by
      <span class="author">Dan Șerban</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/haskell.html">haskell</a></span>
      </span>

      <p>Haskell uses lazy evaluation by default, but what does that mean exactly?</p>
<p>We’re going to state the abstract definition of laziness, behold its nonsensical beauty for a few seconds, and then conclude that a concrete example is necessary in order to understand the concept:</p>
<blockquote>
<p>Laziness is the separation of equation from execution.</p>
</blockquote>
<!--more-->

<p>Before we look at an example, let me remind you of a bit of syntactic sugar that Haskell provides in order to quickly define a list of successive integers:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: [<span class="dv">20</span><span class="fu">..</span><span class="dv">70</span>]
[<span class="dv">20</span>,<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>,<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">30</span>,<span class="dv">31</span>,<span class="dv">32</span>,<span class="dv">33</span>,<span class="dv">34</span>,<span class="dv">35</span>,<span class="dv">36</span>,<span class="dv">37</span>,<span class="dv">38</span>,<span class="dv">39</span>,<span class="dv">40</span>,<span class="dv">41</span>,<span class="dv">42</span>,<span class="dv">43</span>,<span class="dv">44</span>,<span class="dv">45</span>,<span class="dv">46</span>,<span class="dv">47</span>,<span class="dv">48</span>,<span class="dv">49</span>,<span class="dv">50</span>,<span class="dv">51</span>,<span class="dv">52</span>,<span class="dv">53</span>,<span class="dv">54</span>,<span class="dv">55</span>,<span class="dv">56</span>,<span class="dv">57</span>,<span class="dv">58</span>,<span class="dv">59</span>,<span class="dv">60</span>,<span class="dv">61</span>,<span class="dv">62</span>,<span class="dv">63</span>,<span class="dv">64</span>,<span class="dv">65</span>,<span class="dv">66</span>,<span class="dv">67</span>,<span class="dv">68</span>,<span class="dv">69</span>,<span class="dv">70</span>]</code></pre>
<p>As you might remember from <a href="http://techblog.rosedu.org/haskell-part1.html">part 1</a>, <code>λ:</code> is my custom GHCi prompt, so we’re effectively looking at the result of how GHCi interprets the notation <code>[20..70]</code>.</p>
<p>OK then. To start, let’s define two lists:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> list1 <span class="fu">=</span> [<span class="dv">20</span><span class="fu">..</span><span class="dv">70</span>]
λ: <span class="kw">let</span> list2 <span class="fu">=</span> map (<span class="fu">+</span><span class="dv">1</span>) list1</code></pre>
<p>At this point you might be thinking “Oh look, <code>list1</code> is the enumeration of all integers between 20 and 70, and <code>list2</code> is the enumeration of all integers between 21 and 71”.</p>
<p><strong>Well, no.</strong> Not yet, at least.</p>
<p>GHCi provides a command called <code>:sprint</code> that allows us to take a peek at how far along the evaluation of a given expression has progressed.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="fu">:</span>sprint list1
list1 <span class="fu">=</span> _
λ: <span class="fu">:</span>sprint list2
list2 <span class="fu">=</span> _</code></pre>
<p>So what <code>:sprint</code> is telling us in the above snippet is that both <code>list1</code> and <code>list2</code> are unevaluated at this point. To establish some terminology, an underscore in the context of <code>:sprint</code> output represents a <strong>thunk</strong>. Formally defined, a thunk is an expression that hasn’t yet been evaluated. You may think of it as a value wrapped in a function of zero arguments. When the function is called, the value springs into existence.</p>
<p>We are now going to ask increasingly “intrusive” questions about <code>list2</code> and then each step along the way examine what has been evaluated and what hasn’t.</p>
<p>The simplest and least intrusive question we can ask about a list is whether or not it’s empty.</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: null list2
<span class="dt">False</span>
λ: <span class="fu">:</span>sprint list1
list1 <span class="fu">=</span> <span class="dv">20</span> <span class="fu">:</span> _
λ: <span class="fu">:</span>sprint list2
list2 <span class="fu">=</span> _ <span class="fu">:</span> _</code></pre>
<p>In order to answer that question, GHCi needs to know whether or not the first element exists, and as a result, <code>list2</code> is no longer unevaluated, it is now partially evaluated. GHCi now knows something about the structure of <code>list2</code> - it knows that it consists of something “consed onto” (prepended to) something else. In the next round, that “something” will turn out to be the value <code>21</code>, but for right now this fact is irrelevant to the process of answering the question “is <code>list2</code> empty”. However, we notice the value <code>20</code> is fully evaluated as the head of <code>list1</code> - this particular evaluation was necessary in order to construct the thunk <code>(+1) 20</code>.</p>
<p>Next, we ask for the first element of <code>list2</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: head list2
<span class="dv">21</span>
λ: <span class="fu">:</span>sprint list1
list1 <span class="fu">=</span> <span class="dv">20</span> <span class="fu">:</span> _
λ: <span class="fu">:</span>sprint list2
list2 <span class="fu">=</span> <span class="dv">21</span> <span class="fu">:</span> _</code></pre>
<p>We notice that the expression <code>(+1) 20</code> mentioned above is now fully evaluated and therefore no longer a thunk.</p>
<p>Next, let’s ask for the first 5 elements of <code>list2</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: take <span class="dv">5</span> list2
[<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>]
λ: <span class="fu">:</span>sprint list1
list1 <span class="fu">=</span> <span class="dv">20</span> <span class="fu">:</span> <span class="dv">21</span> <span class="fu">:</span> <span class="dv">22</span> <span class="fu">:</span> <span class="dv">23</span> <span class="fu">:</span> <span class="dv">24</span> <span class="fu">:</span> _
λ: <span class="fu">:</span>sprint list2
list2 <span class="fu">=</span> <span class="dv">21</span> <span class="fu">:</span> <span class="dv">22</span> <span class="fu">:</span> <span class="dv">23</span> <span class="fu">:</span> <span class="dv">24</span> <span class="fu">:</span> <span class="dv">25</span> <span class="fu">:</span> _</code></pre>
<p>Next, let’s ask for the 18th element of <code>list2</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: list2 <span class="fu">!!</span> <span class="dv">17</span>
<span class="dv">38</span>
λ: <span class="fu">:</span>sprint list1
list1 <span class="fu">=</span> <span class="dv">20</span> <span class="fu">:</span> <span class="dv">21</span> <span class="fu">:</span> <span class="dv">22</span> <span class="fu">:</span> <span class="dv">23</span> <span class="fu">:</span> <span class="dv">24</span> <span class="fu">:</span> <span class="dv">25</span> <span class="fu">:</span> <span class="dv">26</span> <span class="fu">:</span> <span class="dv">27</span> <span class="fu">:</span> <span class="dv">28</span> <span class="fu">:</span> <span class="dv">29</span> <span class="fu">:</span>
        <span class="dv">30</span> <span class="fu">:</span> <span class="dv">31</span> <span class="fu">:</span> <span class="dv">32</span> <span class="fu">:</span> <span class="dv">33</span> <span class="fu">:</span> <span class="dv">34</span> <span class="fu">:</span> <span class="dv">35</span> <span class="fu">:</span> <span class="dv">36</span> <span class="fu">:</span> <span class="dv">37</span> <span class="fu">:</span> _
λ: <span class="fu">:</span>sprint list2
list2 <span class="fu">=</span> <span class="dv">21</span> <span class="fu">:</span> <span class="dv">22</span> <span class="fu">:</span> <span class="dv">23</span> <span class="fu">:</span> <span class="dv">24</span> <span class="fu">:</span> <span class="dv">25</span> <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span>
        _ <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span> _ <span class="fu">:</span> <span class="dv">38</span> <span class="fu">:</span> _</code></pre>
<p>Now this is interesting.</p>
<p>Elements from the 6th to the 17th are fully evaluated in <code>list1</code> but unevaluated in <code>list2</code>. Because of how <code>list1</code> is defined, it is going to be evaluated in small, close-proximity increments from left to right. But all values in <code>list2</code> are evaluated by applying a transformation on elements in the corresponding positions in <code>list1</code>. That is why we are starting to see gaps in <code>list2</code>.</p>
<p>This example really drives home the essence of lazy evaluation. By default, Haskell will evaluate as little as possible, as late as possible. This is in contrast to traditional, imperative programming languages which evaluate as much as possible, as soon as possible.</p>
<p>Next, let’s ask for the length of <code>list2</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: length list2
<span class="dv">51</span>
λ: <span class="fu">:</span>sprint list1
list1 <span class="fu">=</span> [<span class="dv">20</span>,<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>,<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,
         <span class="dv">30</span>,<span class="dv">31</span>,<span class="dv">32</span>,<span class="dv">33</span>,<span class="dv">34</span>,<span class="dv">35</span>,<span class="dv">36</span>,<span class="dv">37</span>,<span class="dv">38</span>,<span class="dv">39</span>,
         <span class="dv">40</span>,<span class="dv">41</span>,<span class="dv">42</span>,<span class="dv">43</span>,<span class="dv">44</span>,<span class="dv">45</span>,<span class="dv">46</span>,<span class="dv">47</span>,<span class="dv">48</span>,<span class="dv">49</span>,
         <span class="dv">50</span>,<span class="dv">51</span>,<span class="dv">52</span>,<span class="dv">53</span>,<span class="dv">54</span>,<span class="dv">55</span>,<span class="dv">56</span>,<span class="dv">57</span>,<span class="dv">58</span>,<span class="dv">59</span>,
         <span class="dv">60</span>,<span class="dv">61</span>,<span class="dv">62</span>,<span class="dv">63</span>,<span class="dv">64</span>,<span class="dv">65</span>,<span class="dv">66</span>,<span class="dv">67</span>,<span class="dv">68</span>,<span class="dv">69</span>,<span class="dv">70</span>]
λ: <span class="fu">:</span>sprint list2
list2 <span class="fu">=</span> [<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,_,_,_,_,_,
         _,_,_,_,_,_,_,<span class="dv">38</span>,_,_,
         _,_,_,_,_,_,_,_,_,_,
         _,_,_,_,_,_,_,_,_,_,
         _,_,_,_,_,_,_,_,_,_,_]</code></pre>
<p>At this point, <code>list1</code> is fully evaluated because there are no two ways around it - in order to compute the length of <code>list2</code>, GHCi needs to keep track of each and every one of its thunks, therefore it needs to generate the entire “spine” of the list. The process of generating the thunks <code>(+1) 25</code> through <code>(+1) 70</code> will require all elements of <code>list1</code> to be fully evaluated.</p>
<p>Finally, there is only one thing left for us to do such that <code>list2</code> is fully evaluated too - compute the sum of its elements:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: sum list2
<span class="dv">2346</span>
λ: <span class="fu">:</span>sprint list2
list2 <span class="fu">=</span> [<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>,<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">30</span>,
         <span class="dv">31</span>,<span class="dv">32</span>,<span class="dv">33</span>,<span class="dv">34</span>,<span class="dv">35</span>,<span class="dv">36</span>,<span class="dv">37</span>,<span class="dv">38</span>,<span class="dv">39</span>,<span class="dv">40</span>,
         <span class="dv">41</span>,<span class="dv">42</span>,<span class="dv">43</span>,<span class="dv">44</span>,<span class="dv">45</span>,<span class="dv">46</span>,<span class="dv">47</span>,<span class="dv">48</span>,<span class="dv">49</span>,<span class="dv">50</span>,
         <span class="dv">51</span>,<span class="dv">52</span>,<span class="dv">53</span>,<span class="dv">54</span>,<span class="dv">55</span>,<span class="dv">56</span>,<span class="dv">57</span>,<span class="dv">58</span>,<span class="dv">59</span>,<span class="dv">60</span>,
         <span class="dv">61</span>,<span class="dv">62</span>,<span class="dv">63</span>,<span class="dv">64</span>,<span class="dv">65</span>,<span class="dv">66</span>,<span class="dv">67</span>,<span class="dv">68</span>,<span class="dv">69</span>,<span class="dv">70</span>,<span class="dv">71</span>]</code></pre>
<section id="conclusion" class="level3">
<h3>Conclusion</h3>
<p>Laziness can be a tremendously helpful device for designing Haskell programs that run in constant space and feature a clean separation of pure code vs. side-effecting code. However, care must be taken to avoid what is known as “space leaks”, which we are going to cover in the next instalment of this series.</p>
</section>
<section id="editorial-note" class="level3">
<h3>Editorial note</h3>
<p>This blog post was inspired by chapter 2 of Simon Marlow’s excellent book <a href="http://chimera.labs.oreilly.com/books/1230000000929">“Parallel and Concurrent Programming in Haskell”</a> which is available both in e-book format as well as free of charge online.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Sun, 02 Mar 2014 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/haskell-part2.html</guid>
</item>
<item>
    <title>Unix standards and implementations. Unix portability</title>
    <link>http://techblog.rosedu.org/unix-standards.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/unix-standards.html" title="Unix standards and implementations. Unix portability">Unix standards and implementations. Unix portability</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on February  2, 2014</span>
      by
      <span class="author">Alexandru Goia</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/Unix.html">Unix</a>, <a href="/tags/C.html">C</a>, <a href="/tags/portable%20code.html">portable code</a>, <a href="/tags/POSIX.html">POSIX</a>, <a href="/tags/SUS.html">SUS</a>, <a href="/tags/%60libc%60.html">`libc`</a></span>
      </span>

      <p>The purpose of this article is to present in a general way the Unix standards and how can we write portable code on Unix systems, not only on Linux ones.</p>
<!--more-->

<p>In the Unix world at present, there are three important standards:</p>
<ul>
<li>the C language (ISO C standard) and the standard C library (<code>libc</code>), which are included in the POSIX standard</li>
<li>the POSIX standard (<em>P</em>ortable <em>O</em>perating <em>S</em>ystem <em>I</em>nterface for Uni<em>x</em>), which has the last version from 2008</li>
<li>the SUS standard (<em>S</em>ingle <em>U</em>nix <em>S</em>pecification), which includes as a subset the POSIX standard, with the last version from 2010 (SUSv4).</li>
</ul>
<p>The POSIX standard consists of:</p>
<ul>
<li>POSIX.1: core services</li>
<li>POSIX.1b: real-time extensions</li>
<li>POSIX.1c: threads extensions</li>
<li>POSIX.2: shell and utilities</li>
</ul>
<p>We will be interested in this article only by POSIX.1 (last version: POSIX.1-2008, or IEEE Std 1003.1-2008) from the whole POSIX standard.</p>
<p>As implementations of the standard, we can name the GNU/Linux-based operating systems, the systems which descend from the BSD Unix version: FreeBSD, NetBSD, OpenBSD, DragonflyBSD, the certified and commercial UNIX-es, based on UNIX System V release 4 and, from case to case, with BSD elements: Oracle Solaris (known previously as Sun Solaris), HP-UX and Tru64 UNIX (HP), AIX (IBM), IRIX (SGI), Unixware and OpenServer (SCO), and also Mac OS X, which is also officially certified as a UNIX system, based on FreeBSD elements and not on UNIX System V.</p>
<p>The most “popular” Unix systems are at present Linux, FreeBSD, Solaris and Mac OS X. With regards to the C language, all these operating systems (Linux 3.x, FreeBSD &gt;= 8.0, Mac OS X &gt;= 10.6.8, Solaris &gt;= 10) support the following LIB C headers:</p>
<ul>
<li><code>assert.h</code>: verify program assertion</li>
<li><code>complex.h</code>: complex arithmetic support</li>
<li><code>ctype.h</code>: character classification and mapping support</li>
<li><code>errno.h</code>: error codes</li>
<li><code>fenv.h</code>: floating-point environment</li>
<li><code>float.h</code>: floating-point constants and characteristics</li>
<li><code>inttypes.h</code>: integer type format conversion</li>
<li><code>iso646.h</code>: macros for assignment, relational, and unary operators</li>
<li><code>limits.h</code>: implementation constants</li>
<li><code>locale.h</code>: locale categories and related definitions</li>
<li><code>math.h</code>: mathematical functions and type declarations and constants</li>
<li><code>setjmp.h</code>: nonlocal <code>goto</code></li>
<li><code>signal.h</code>: signals</li>
<li><code>stdarg.h</code>: variable argument lists</li>
<li><code>stdbool.h</code>: boolean type and values</li>
<li><code>stddef.h</code>: standard definitions</li>
<li><code>stdint.h</code>: integer types</li>
<li><code>stdio.h</code>: standard I/O library</li>
<li><code>stdlib.h</code>: utility functions</li>
<li><code>string.h</code>: string operations</li>
<li><code>tgmath.h</code>: type-generic math macros</li>
<li><code>time.h</code>: time and date</li>
<li><code>wchar.h</code>: extended multibyte and wide character support</li>
<li><code>wctype.h</code>: wide character classification and mapping support</li>
</ul>
<p>They also support the following POSIX headers (in the C language):</p>
<ul>
<li><code>aio.h</code>: asynchronous I/O</li>
<li><code>cpio.h</code>: cpio archive values</li>
<li><code>dirent.h</code>: directory entries</li>
<li><code>dlfcn.h</code>: dynamic linking</li>
<li><code>fcntl.h</code>: file control</li>
<li><code>fnmatch.h</code>: filename-matching types</li>
<li><code>glob.h</code>: pathname pattern-matching and generations</li>
<li><code>grp.h</code>: group file</li>
<li><code>iconv.h</code>: codeset conversion utility</li>
<li><code>langinfo.h</code>: language information constants</li>
<li><code>monetary.h</code>: monetary types and functions</li>
<li><code>netdb.h</code>: network database operations</li>
<li><code>nl_types.h</code>: message catalogs</li>
<li><code>poll.h</code>: <code>poll()</code> function</li>
<li><code>pthread.h</code>: threads</li>
<li><code>pwd.h</code>: password file</li>
<li><code>regex.h</code>: regular expressions</li>
<li><code>sched.h</code>: execution scheduling</li>
<li><code>semaphore.h</code>: semaphores</li>
<li><code>strings.h</code>: string operations</li>
<li><code>tar.h</code>: tar archive values</li>
<li><code>termios.h</code>: terminal I/O</li>
<li><code>unistd.h</code>: symbolic constants</li>
<li><code>wordexp.h</code>: word-expansion definitions</li>
<li><code>arpa/inet.h</code>: Internet definitions</li>
<li><code>net/if.h</code>: socket local interfaces</li>
<li><code>netinet/in.h</code>: Internet address family</li>
<li><code>netinet/tcp.h</code>: TCP definitions</li>
<li><code>sys/mman.h</code>: memory management declarations</li>
<li><code>sys/select.h</code>: <code>select()</code> function</li>
<li><code>sys/socket.h</code>: sockets interface</li>
<li><code>sys/stat.h</code>: file status</li>
<li><code>sys/statvfs.h</code>: file system information</li>
<li><code>sys/times.h</code>: process times</li>
<li><code>sys/types.h</code>: primitive system data types</li>
<li><code>sys/un.h</code>: UNIX domain socket definitions</li>
<li><code>sys/utsname.h</code>: system name</li>
<li><code>sys/wait.h</code>: process control</li>
<li><code>fmtmsg.h</code>: message display structures</li>
<li><code>ftw.h</code>: file tree walking</li>
<li><code>libgen.h</code>: pathname management functions</li>
<li><code>ndbm.h</code>: database operations (<em>exception: Linux</em>)</li>
<li><code>search.h</code>: search tables</li>
<li><code>syslog.h</code>: system error logging</li>
<li><code>utmpx.h</code>: user accounting database (<em>exception: FreeBSD</em>)</li>
<li><code>sys/ipc.h</code>: inter-processes communication</li>
<li><code>sys/msg.h</code>: XSI message queues</li>
<li><code>sys/resource.h</code>: resource operations</li>
<li><code>sys/sem.h</code>: XSI semaphores</li>
<li><code>sys/shm.h</code>: XSI shared memory</li>
<li><code>sys/time.h</code>: time types</li>
<li><code>sys/uio.h</code>: vector I/O operations</li>
<li><code>mqueue.h</code>: message queues (exception: Mac OS X)</li>
<li><code>spawn.h</code>: real-time spawn interface.</li>
</ul>
<p>The SUS standard (the whole set of UNIX functions and constants) can be found online for <a href="http://www.unix.org/version2/" title="SUSv2">SUSv2</a> (year 1997, naming UNIX 98), <a href="http://www.unix.org/version3/" title="SUSv3">SUSv3</a> (year 2001-2002, naming UNIX 03) and <a href="http://www.unix.org/version4/" title="SUSv4">SUSv4</a> (year 2010):</p>
<p>To write portable code which can be executed on any Unix systems we must know the C headers (defined by LIBC and by POSIX) which are recognized by the Unix systems. We can activate the operating system in order to use only POSIX.1 elements, or also SUSv1, SUSv2, SUSv3, or SUSv4 using the so-called “feature test macros”:</p>
<ul>
<li><code>_POSIX_SOURCE</code> and <code>_POSIX_C_SOURCE</code>, to activate POSIX functionality</li>
<li><code>_XOPEN_SOURCE</code>, which activates SUSv1/2/3/4 functionality.</li>
</ul>
<p>For older POSIX functionality we have to declare the following in our source file:</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#define _POSIX_SOURCE</span>
<span class="ot">#define _POSIX_C_SOURCE 1 </span><span class="co">/* for POSIX 1990 */</span>
<span class="co">/* use 2 for POSIX C bindings 1003.2-1992 */</span></code></pre>
<p>For POSIX 2008 functionality, we define:</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#define _POSIX_SOURCE</span>
<span class="ot">#define _POSIX_C_SOURCE 200809L</span></code></pre>
<p>Or, we can compile with:</p>
<pre><code>cc -D_POSIX_SOURCE -D_POSIX_C_SOURCE=200809L filename.c</code></pre>
<p>If our code is written, or it will run on UNIX certified systems (hence on systems who follow SUSv1, SUSv2, SUSv3, or SUSv4), we must define also <code>_XOPEN_SOURCE</code>:</p>
<p>Thus, we would have to use</p>
<ul>
<li>for SUSv1:</li>
</ul>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#define _POSIX_SOURCE</span>
<span class="ot">#define _POSIX_C_SOURCE 2</span>
<span class="ot">#define _XOPEN_SOURCE</span>
<span class="ot">#define _XOPEN_SOURCE_EXTENDED 1</span></code></pre>
<ul>
<li>for SUSv2:</li>
</ul>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#define _POSIX_SOURCE</span>
<span class="ot">#define _POSIX_C_SOURCE 199506L</span>
<span class="ot">#define _XOPEN_SOURCE 500</span></code></pre>
<ul>
<li>for SUSv3:</li>
</ul>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#define _POSIX_SOURCE</span>
<span class="ot">#define _POSIX_C_SOURCE 200112L</span>
<span class="ot">#define _XOPEN_SOURCE 600</span></code></pre>
<ul>
<li>for SUSv4:</li>
</ul>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#define _POSIX_SOURCE</span>
<span class="ot">#define _POSIX_C_SOURCE 200809L</span>
<span class="ot">#define _XOPEN_SOURCE 700</span></code></pre>
<p>If we write code only for Linux platforms, we will use the feature test macro <code>_GNU_SOURCE</code>, which will activate GNU LIBC functionality, which sometimes isn’t POSIX compatible. There is also the feature test macro <code>_SVID_SOURCE</code> (to activate System V functionality) and <code>_BSD_SOURCE</code> (to activate BSD functionality). One important note is that a UNIX system (which follows SUSvX) can be activated to offer any SUSvX functionality.</p>
<p>This is the way we can write Unix portable code. Other methods to find out more about the operating system on which we compile are:</p>
<ul>
<li>LIBC functions: <code>sysconf(3)</code>, <code>pathconf(3)</code>, <code>fpathconf(3)</code> – functions which determine system constants</li>
<li><code>autoconf</code>, <code>automake</code> and <code>libtool</code>: utilities which determine at compile time, with scripts, what system and libc functions the operating system offers. (These will be part of the content of a following article.)</li>
</ul>
<p>Happy Unix programming!</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Sun, 02 Feb 2014 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/unix-standards.html</guid>
</item>
<item>
    <title>Lambda Functions in C++</title>
    <link>http://techblog.rosedu.org/lambda-cpp.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/lambda-cpp.html" title="Lambda Functions in C++">Lambda Functions in C++</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on January 28, 2014</span>
      by
      <span class="author">Mădălina-Andreea Grosu, Matei Oprea</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/lambda.html">lambda</a>, <a href="/tags/higher-order%20functions.html">higher-order functions</a>, <a href="/tags/c%2B%2B.html">c++</a></span>
      </span>

      <p>The C++ 2011 standard introduced the lambda expression syntax element causing some people ask <a href="http://stackoverflow.com/questions/7627098/what-is-a-lambda-expression-in-c11" title="What is a lambda expression in C++?">why it was needed</a>. In reality, it was not a new use case, people have been using this under different names since C was created. You had functors (C++ terminology) and pointer to functions for example. A basic use case was in applying the same transform over all elements of a collection (the functor’s widely shared example) or sorting elements of a vector (via <code>qsort</code> in C). But, in reality, all of these cases can be reduced to using <em>higher-order functions</em>.</p>
<!--more-->

<section id="higher-order-functions" class="level3">
<h3>1. Higher-order functions</h3>
<p>A high-order function is a function that takes one or more functions as an input and outputs a function. For example, we can use this higher-order functions to map, filter, fold and sort lists.</p>
<p>Let’s start with a simple example of a high-order function, in Haskell:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">zipWith1 ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b] <span class="ot">-&gt;</span> [c]
zipWith1 _ [] _ <span class="fu">=</span> []
zipWith1 _ _ [] <span class="fu">=</span> []
zipWith1 f (x<span class="fu">:</span>xs) (y<span class="fu">:</span>ys) <span class="fu">=</span> f x y <span class="fu">:</span> zipWith1 f xs ys</code></pre>
<p>This function will take a function and two lists as parameters and then joins them by applying the function between corresponding elements. Let’s see a little demonstration for the function written above:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">ghci<span class="fu">&gt;</span> zipWith1 (<span class="fu">+</span>) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>] [<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>]
[<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>,<span class="dv">12</span>]</code></pre>
<p>So we found out what a <a href="http://learnyouahaskell.com/higher-order-functions" title="Learn You A Haskell">higher-order function is</a>. Now, what is a lambda function? The term comes from the Lambda Calculus and refers to anonymous functions in programming. With a lambda function you can write quick functions without naming them.</p>
<p>Let’s see the above function written using lambdas:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">zipWith (\x y <span class="ot">-&gt;</span> x <span class="fu">+</span> y ) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>] [<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>]</code></pre>
<p>If we run this function in GHCi the result will be the same as above:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="dt">Prelude</span><span class="fu">&gt;</span> zipWith (\x y <span class="ot">-&gt;</span> x <span class="fu">+</span> y ) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>] [<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>]
[<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>,<span class="dv">12</span>]</code></pre>
<p>Now, to see the equivalence, the following functions are one and the same:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">f x y <span class="fu">=</span> x <span class="fu">+</span> y
f x <span class="fu">=</span> \y <span class="ot">-&gt;</span> x <span class="fu">+</span> y
f <span class="fu">=</span> \x y <span class="ot">-&gt;</span> x <span class="fu">+</span> y</code></pre>
<p>Now, we know what is a lambda function and a higher-order function. Let’s see how can we use lambda functions in C++.</p>
</section>
<section id="lambdas-in-c" class="level3">
<h3>2. Lambdas in C++</h3>
<p>A lambda function, in C++, starts with <code>[</code> and it has a specific syntax:</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp">[capture] (params) -&gt; return_type { function_body }</code></pre>
<p>Let’s see a short example of a lambda function in C++:</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp">[](<span class="dt">int</span> x, <span class="dt">int</span> y) -&gt; <span class="dt">int</span> { <span class="kw">return</span> x * y; }</code></pre>
<p>This function simply multiplies two integers.</p>
<p>Consider now the following Haskell example of applying a function to a list, using <code>map</code>:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">map (\x <span class="ot">-&gt;</span> x <span class="fu">+</span> <span class="dv">1</span>) [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>]</code></pre>
<p>In C++, we have the <a href="http://www.cplusplus.com/reference/algorithm/transform/" title="Function transform">function transform</a> which does the same thing as the <code>map</code> function from Haskell:</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#include &lt;iostream&gt;</span>
<span class="ot">#include &lt;algorithm&gt;</span>
<span class="ot">#include &lt;vector&gt;</span>

<span class="kw">using</span> <span class="kw">namespace</span> std;

<span class="dt">int</span> main (){
    <span class="co">/* declare 2 vectors */</span>
    vector &lt;<span class="dt">int</span>&gt; vector1;
    vector &lt;<span class="dt">int</span>&gt; vector2;

    <span class="co">/* pseudo-pseudo-random values */</span>
    <span class="kw">for</span> (<span class="dt">int</span> i=<span class="dv">1</span>;i&lt;<span class="dv">4</span>;i++)
        vector1.push_back (i);

    <span class="co">/* alocate memory in vector2 */</span>
    vector2.resize(vector1.size());

    <span class="co">/* applies our lambda function for each element</span>
<span class="co">     * in vector1 and stores it in vector2</span>
<span class="co">     */</span>
    transform (vector1.begin(), vector1.end(), vector2.begin(),
        [] (<span class="dt">int</span> i) { <span class="kw">return</span> ++i; });

    <span class="co">/* output the result */</span>
    cout &lt;&lt; “Vector2 contains: “;
    <span class="kw">for</span> (std::vector&lt;<span class="dt">int</span>&gt;::iterator it=vector2.begin();
        it!=vector2.end(); ++it)
        std::cout &lt;&lt; &#39; &#39; &lt;&lt; *it;

    <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre>
<p>And the output is:</p>
<pre><code>Vector2 contains: 2 3 4</code></pre>
<p>You can see that our result is the same as in Haskell. We used a lambda function to increment the value for the each element from the first vector and then we printed it to standard output.</p>
</section>
<section id="conclusions" class="level3">
<h3>3. Conclusions</h3>
<p>So, why you should use lambda functions ?</p>
<ul>
<li>You can write fast functions and use them in your production code</li>
<li>You can replace macros (because macros are evil – citation needed)</li>
<li>Because <span class="math">\(\lambda\)</span> rocks</li>
<li>Because you can use it when you want a short-term functionality that you do not want to have to name</li>
</ul>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 28 Jan 2014 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/lambda-cpp.html</guid>
</item>
<item>
    <title>Inspecting library calls for fun and profit</title>
    <link>http://techblog.rosedu.org/ltrace.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/ltrace.html" title="Inspecting library calls for fun and profit">Inspecting library calls for fun and profit</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on January 18, 2014</span>
      by
      <span class="author">Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/trace.html">trace</a>, <a href="/tags/ltrace.html">ltrace</a>, <a href="/tags/strace.html">strace</a>, <a href="/tags/ptrace.html">ptrace</a>, <a href="/tags/debugging.html">debugging</a></span>
      </span>

      <p>Two years ago this blog had a series of articles on debugging tools. We have presented tools like <a href="http://techblog.rosedu.org/valgrind-introduction.html" title="Valgrind introduction">Valgrind</a> and <a href="http://techblog.rosedu.org/gdb-a-basic-workflow.html" title="GDB - basic workflow">GDB</a> and we stopped with an introduction to <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html" title="Tracing Processes for Fun and Profit">strace</a>. At the end of that article we mentioned that there are other tools useful for debugging beyond these three already mentioned. After two years of silence, the debugging series is on with an article on <code>ltrace</code>.</p>
<!--more-->

<p>Ask around developers and you’ll see that the proportion of those knowing about <code>ltrace</code> compared to those knowing how to use <code>strace</code> is at most the same as the proportion of <code>strace</code> users among users knowing how to use <code>gdb</code> and <code>valgrind</code>.</p>
<p>But how is <code>ltrace</code> different? Why is this an useful tool? This article will try to shine some light on this while also providing comparisons with the <code>strace</code> tool.</p>
<section id="basic-example" class="level3">
<h3>Basic Example</h3>
<p>The simples way to use both <code>ltrace</code> and <code>strace</code> is to append this tool in front of the command you’re tracing. We will illustrate here the <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html#simple-example" title="Tracing Processes for Fun and Profit">same example used for <code>strace</code></a></p>
<pre><code>$ ltrace ls
__libc_start_main(0x402c60, 1, 0x7fffa36d7038, 0x412bb0 &lt;unfinished ...&gt;
strrchr(&quot;ls&quot;, &#39;/&#39;)                               = nil
setlocale(LC_ALL, &quot;&quot;)                            = &quot;en_US.UTF-8&quot;
bindtextdomain(&quot;coreutils&quot;, &quot;/usr/share/locale&quot;) = &quot;/usr/share/locale&quot;
textdomain(&quot;coreutils&quot;)                          = &quot;coreutils&quot;
__cxa_atexit(0x40ace0, 0, 0, 0x736c6974756572)   = 0
isatty(1)                                        = 1
getenv(&quot;QUOTING_STYLE&quot;)                          = nil
getenv(&quot;COLUMNS&quot;)                                = nil
ioctl(1, 21523, 0x7fffa36d6bd0)                  = 0
getenv(&quot;TABSIZE&quot;)                                = nil
getopt_long(1, 0x7fffa36d7038, &quot;abcdfghiklmnopqrstuvw:xABCDFGHI:&quot;..., 0x61a5e0, -1)         = -1
getenv(&quot;LS_BLOCK_SIZE&quot;)                          = nil
...
opendir(&quot;.&quot;)                                     = 0x2789c30
readdir(0x2789c30)                               = 0x2789c60
readdir(0x2789c30)                               = 0x2789c78
readdir(0x2789c30)                               = 0x2789c90
strlen(&quot;a.out&quot;)                                  = 5
malloc(6)                                        = 0x2791c70
memcpy(0x2791c70, &quot;a.out\0&quot;, 6)                  = 0x2791c70
readdir(0x2789c30)                               = 0x2789cb0
strlen(&quot;out.9373&quot;)                               = 8
malloc(9)                                        = 0x2791c90
memcpy(0x2791c90, &quot;out.9373\0&quot;, 9)               = 0x2791c90
...
closedir(0x2789c30)                              = 0
free(0)                                          = &lt;void&gt;
malloc(432)                                      = 0x2789c30
_setjmp(0x61b640, 0x400000, 0x2785e50, 0x2789cc0)= 0
__errno_location()                               = 0x7f95ad5916c0
strcoll(&quot;out.9307&quot;, &quot;1.c&quot;)                       = 23
...
fwrite_unlocked(&quot;1.c&quot;, 1, 3, 0x3573db9400)       = 3
...
fwrite_unlocked(&quot;out&quot;, 1, 3, 0x3573db9400)       = 3
...
exit(0 &lt;unfinished ...&gt;
__fpending(0x3573db9400, 0, 64, 0x3573db9eb0)    = 0
fileno(0x3573db9400)                             = 1
__freading(0x3573db9400, 0, 64, 0x3573db9eb0)    = 0
__freading(0x3573db9400, 0, 2052, 0x3573db9eb0)  = 0
fflush(0x3573db9400)                             = 0
fclose(0x3573db9400)                             = 0
__fpending(0x3573db91c0, 0, 0x3573dbaa00, 0xfbad000c)= 0
fileno(0x3573db91c0)                             = 2
__freading(0x3573db91c0, 0, 0x3573dbaa00, 0xfbad000c)= 0
__freading(0x3573db91c0, 0, 4, 0xfbad000c)       = 0
fflush(0x3573db91c0)                             = 0
fclose(0x3573db91c0)                             = 0
+++ exited (status 0) +++</code></pre>
<p>Looking at the trace we see that the <code>ls</code> process starts by acknowledging the current <a href="http://en.wikipedia.org/wiki/Locale" title="Locale (computing)">locale</a> after which several environment variables which control the output are read (only a few of them shown, the others ellided by <code>...</code>). Then <a href="http://linuxmanpages.com/man3/opendir.3.php" title="opendir - open a directory"><code>opendir</code></a> is called on <code>.</code> (since <code>ls</code> had no other arguments) and each entry is read via <a href="http://linuxmanpages.com/man2/readdir.2.php" title="readdir - read directory entry"><code>readdir</code></a> and then copied into a vector of entries (after using <code>strdup</code> seen here as a triple of <code>strlen</code>, <code>malloc</code> and <code>memcpy</code>). Next step is to sort all of these entries according to the current locale (<a href="http://linuxmanpages.com/man3/strcoll.3.php" title="strcoll - compare two strings using the current locale"><code>strcoll</code></a>, the variable <code>LC_COLLATE</code>). This allows sorting the filenames in alphabetical order. Then, each filename is written on the <code>1</code> file descriptor (<code>stdout</code>) using the non-blocking <a href="http://linuxmanpages.com/man3/fwrite_unlocked.3.php" title="fwrite_unlocked - non-locking stdio function"><code>fwrite_unlocked</code></a>. Last step is to call <code>exit</code> and flush all open streams.</p>
<p>Right now you are more enlightened on what <code>ls</code> does than before reading this part. Knowing the above information you can do things like changing the way files are quoted (I retrieved the options by providing an invalid value and looking on the <code>QUOTING_STYLE='-' ltrace ls</code> output to see what arguments are tested for):</p>
<pre><code>$ ls a*
a file  a.out

$ QUOTING_STYLE=&quot;shell&quot; ls a*
&#39;a file&#39;  a.out

$ QUOTING_STYLE=&quot;c&quot; ls a*
&quot;a file&quot;  &quot;a.out&quot;</code></pre>
<p>The next question we are interested in is “<em>Can <code>ltrace</code> trace syscalls as well?</em>”. Luckily, the answer is <em>yes</em>, by using the <code>-S</code> flag:</p>
<pre><code>$ ltrace -S ls
SYS_brk(0)                               = 0x1d4b000
SYS_mmap(0, 4096, 3, 34)                 = 0x7f4d8b352000
SYS_access(&quot;/etc/ld.so.preload&quot;, 04)     = -2
SYS_open(&quot;/etc/ld.so.cache&quot;, 524288, 01) = 3
SYS_fstat(3, 0x7fff9f3a4110)             = 0
SYS_mmap(0, 0x246b0, 1, 2)               = 0x7f4d8b32d000
...</code></pre>
<p>Contrast with the results of <code>strace</code>:</p>
<pre><code>$ strace ls
execve(&quot;/usr/bin/ls&quot;, [&quot;ls&quot;], [/* 48 vars */]) = 0
brk(0)                                  = 0x1190000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcf80794000
access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=149168, ...}) = 0
mmap(NULL, 149168, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcf8076f000
...</code></pre>
<p>Differences are easily seen. The main one is that <code>ltrace</code> prefixes each syscall with <code>SYS_</code> and doesn’t represent macros as macros but expands them (so instead of <code>PROT_READ|PROT_WRITE</code> you have <code>3</code>). In fact, even the number of arguments is different. For understandability reason, it is better to use <code>strace</code> for tracing the system calls and <code>ltrace</code> for tracing the library ones.</p>
</section>
<section id="why-is-ltrace-useful" class="level3">
<h3>Why Is <code>ltrace</code> Useful?</h3>
<p>From the above section you have seen that we can use <code>ltrace</code> to understand undocumented behavior of an application. For example the <code>QUOTING_STYLE</code> was found neither in the <a href="http://linuxmanpages.com/man1/ls.1.php" title="ls - list directory contents"><code>ls</code></a> manual nor in the <a href="http://linuxmanpages.com/man1/bash.1.php" title="bash - GNU Bourne-Again SHell"><code>bash</code></a> one.</p>
<p>Another way <code>ltrace</code> is useful is when one of the libraries your application depends on is faulty. Instead of trying to debug a full-scale application you might want to isolate the culprit into a minimal application which exhibits only the bad behaviour. For that, you can use <code>ltrace</code> in the same way we used <code>strace</code> in <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html#how-is-this-useful" title="Tracing Processes for Fun and Profit">its own article</a> in the past.</p>
</section>
<section id="i-have-too-much-output" class="level3">
<h3>I Have Too Much Output</h3>
<p>Like in the case of <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html#too-much-output" title="Tracing Processes for Fun and Profit"><code>strace</code></a>, <code>ltrace</code> produces a long list of output lines and it is quite hard to find what you’re looking for or to understand what’s happening while they are scrolling on the screen.</p>
<p>Just like <code>strace</code> we can save the output to a file, using <code>-o</code>:</p>
<pre><code>$ ltrace -o ltraceout ls
$ wc -l ltraceout
523 ltraceout
$ head ltraceout
__libc_start_main(0x402c60, 1, 0x7fffbc2e3348, 0x412bb0 &lt;unfinished ...&gt;
strrchr(&quot;ls&quot;, &#39;/&#39;)                              = nil
setlocale(LC_ALL, &quot;&quot;)                           = &quot;en_US.UTF-8&quot;
bindtextdomain(&quot;coreutils&quot;, &quot;/usr/share/locale&quot;)= &quot;/usr/share/locale&quot;
textdomain(&quot;coreutils&quot;)                         = &quot;coreutils&quot;
__cxa_atexit(0x40ace0, 0, 0, 0x736c6974756572)  = 0
isatty(1)                                       = 1
getenv(&quot;QUOTING_STYLE&quot;)                         = nil
getenv(&quot;COLUMNS&quot;)                               = nil
ioctl(1, 21523, 0x7fffbc2e2ee0)                 = 0</code></pre>
<p>Like <code>strace</code>, we can also use <code>-e</code> to filter on specific calls.</p>
<p>In the following examples we would use the following C source file which computes <code>41^41</code> and <code>42^42</code> both using the float <code>libmath</code> version and the <code>libgmp</code> multi-precision integers one. We will use threads to compute <code>42^42</code> and compute <code>41^41</code> in the <code>main</code> function with both arguments.</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#include &lt;math.h&gt;</span>
<span class="ot">#include &lt;pthread.h&gt;</span>
<span class="ot">#include &lt;stdio.h&gt;</span>
<span class="ot">#include &lt;stdlib.h&gt;</span>

<span class="ot">#include &lt;gmp.h&gt;</span>

<span class="dt">void</span> *do_double_thread(<span class="dt">void</span> *data)
{
  <span class="dt">double</span> x = <span class="dv">42</span>;
  x = pow(x, x);
}

<span class="dt">void</span> *do_mpz_thread(<span class="dt">void</span> *data)
{
  mpz_t x;

  mpz_init_set_ui(x, <span class="dv">42</span>);
  mpz_pow_ui(x, x, <span class="dv">42</span>);

  mpz_clear(x);
}

<span class="dt">int</span> main()
{
  pthread_t double_thread, mpz_thread;
  pthread_attr_t attr;

  <span class="dt">double</span> y = <span class="dv">41</span>;
  mpz_t x;

  mpz_init_set_ui(x, <span class="dv">41</span>);
  mpz_pow_ui(x, x, <span class="dv">41</span>);

  mpz_clear(x);

  y = pow(y, y);

  <span class="co">/* initialize the attribute */</span>
  <span class="kw">if</span> (pthread_attr_init(&amp;attr) != <span class="dv">0</span>) {
    perror(<span class="st">&quot;pthread_attr_init&quot;</span>);
    pthread_exit(NULL);
  }

  <span class="co">/* set detached state */</span>
  <span class="kw">if</span> (pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE) != <span class="dv">0</span>) {
    perror(<span class="st">&quot;pthread_attr_setdetachstate&quot;</span>);
    pthread_exit(NULL);
  }

  <span class="kw">if</span> (pthread_create(&amp;double_thread, &amp;attr, do_double_thread, NULL)) {
    perror(<span class="st">&quot;pthread_create&quot;</span>);
    exit(EXIT_FAILURE);
  }

  <span class="kw">if</span> (pthread_create(&amp;mpz_thread, &amp;attr, do_mpz_thread, NULL)) {
    perror(<span class="st">&quot;pthread_create&quot;</span>);
    exit(EXIT_FAILURE);
  }

  pthread_attr_destroy(&amp;attr);

  <span class="kw">if</span> (pthread_join(double_thread, NULL))
    perror(<span class="st">&quot;pthread_join&quot;</span>);

  <span class="kw">if</span> (pthread_join(mpz_thread, NULL))
    perror(<span class="st">&quot;pthread_join&quot;</span>);

  <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre>
<p>To compile, we have to link against <code>libmath</code>, <code>libpthread</code> and <code>libgmp</code>:</p>
<pre><code>$ gcc -lm -lpthread -lgmp test.c -o test</code></pre>
<p>Running <code>ltrace</code> on the full output we have the following:</p>
<pre><code>$ ltrace ./test
__libc_start_main(0x400aeb, 1, 0x7fff6afa8b78, 0x400c60 &lt;unfinished ...&gt;
__gmpz_init_set_ui(0x7fff6afa8a30, 41, 0x7fff6afa8b88, 0x400c60)     = 1
__gmpz_pow_ui(0x7fff6afa8a30, 0x7fff6afa8a30, 41, 0x7fff6afa8a30)    = 0
__gmpz_clear(0x7fff6afa8a30, 0x6bb020, 0, 0x129c08be7ca69)           = 0
pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)                 = 0x4da9465e5d9d1629
pthread_attr_init(0x7fff6afa8a40, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff6afa8a40, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff6afa8a80, 0x7fff6afa8a40, 0x400a60, 0)          = 0
pthread_create(0x7fff6afa8a78, 0x7fff6afa8a40, 0x400aa8, 0)          = 0
pthread_attr_destroy(0x7fff6afa8a40, 0x7f60ece77fb0, 0x7f60ece789d0, -1)= 0
pthread_join(0x7f60ed679700, 0, 0x7f60ece789d0, -1)                  = 0
pthread_join(0x7f60ece78700, 0, 0x7f60ed679700, 0x3574418290)        = 0
+++ exited (status 0) +++</code></pre>
<p>If we want to capture only the bignum operations we can use <code>-e</code> flag:</p>
<pre><code>$ ltrace -e &#39;*gmpz*&#39; ./test
test-&gt;__gmpz_init_set_ui(0x7ffffb01f830, 41, 0x7ffffb01f988, 0x400c60)= 1
test-&gt;__gmpz_pow_ui(0x7ffffb01f830, 0x7ffffb01f830, 41, 0x7ffffb01f830 &lt;unfinished ...&gt;
libgmp.so.10-&gt;__gmpz_n_pow_ui(0x7ffffb01f830, 0xbf0010, 1, 41 &lt;unfinished ...&gt;
libgmp.so.10-&gt;__gmpz_realloc(0x7ffffb01f830, 7, 42, 7)         = 0xbf0010
&lt;... __gmpz_n_pow_ui resumed&gt; )                                  = 0
&lt;... __gmpz_pow_ui resumed&gt; )                                    = 0
test-&gt;__gmpz_clear(0x7ffffb01f830, 0xbf0020, 0, 0x129c08be7ca69) = 0
+++ exited (status 0) +++</code></pre>
<p>From this output we see that <code>__gmpz_pow_ui</code> from our code calls <code>__gmpz_n_pow_ui</code> from <code>libgmp.so.10</code> which in turn calls <code>__gmpz_realloc</code> to expand the space allocated to the number.</p>
<p>However, in some cases one library might call functions from another or you might want to filter and keep only the calls done by your application. Fortunately, we can still do that:</p>
<pre><code>$ ltrace -e &#39;*gmpz*-@libgmp.so*&#39; ./test
test-&gt;__gmpz_init_set_ui(0x7fff45c5cd70, 41, 0x7fff45c5cec8, 0x400c60) = 1
test-&gt;__gmpz_pow_ui(0x7fff45c5cd70, 0x7fff45c5cd70, 41, 0x7fff45c5cd70)= 0
test-&gt;__gmpz_clear(0x7fff45c5cd70, 0xc02020, 0, 0x129c08be7ca69)       = 0
+++ exited (status 0) +++</code></pre>
<p>If you want to trace all calls <em>inside</em> a library then it is better to use <code>-x</code>.</p>
<pre><code>$ ltrace -x &#39;@libgmp.so.*&#39; ./test
__libc_start_main(0x400aeb, 1, 0x7fff656660b8, 0x400c60 &lt;unfinished ...&gt;
__gmpz_init_set_ui(0x7fff65665f70, 41, 0x7fff656660c8, 0x400c60 &lt;unfinished ...&gt;
__gmpz_init_set_ui@libgmp.so.10(0x7fff65665f70, 41, 0x7fff656660c8, 0x400c60 &lt;unfinished ...&gt;
__gmp_default_allocate@libgmp.so.10(8, 41, 0x7fff656660c8, 0x400c60)= 0x222a010
&lt;... __gmpz_init_set_ui resumed&gt; )= 1
&lt;... __gmpz_init_set_ui resumed&gt; )= 1
__gmpz_pow_ui(0x7fff65665f70, 0x7fff65665f70, 41, 0x7fff65665f70 &lt;unfinished ...&gt;
__gmpz_pow_ui@libgmp.so.10(0x7fff65665f70, 0x7fff65665f70, 41, 0x7fff65665f70 &lt;unfinished ...&gt;
__gmpz_n_pow_ui@libgmp.so.10(0x7fff65665f70, 0x222a010, 1, 41 &lt;unfinished ...&gt;
__gmpz_realloc@libgmp.so.10(0x7fff65665f70, 7, 42, 7 &lt;unfinished ...&gt;
__gmp_default_reallocate@libgmp.so.10(0x222a010, 8, 56, 7)= 0x222a010
&lt;... __gmpz_realloc resumed&gt; )= 0x222a010
__gmpn_sqr@libgmp.so.10(0x222a010, 0x7fff65665e80, 2, 48 &lt;unfinished ...&gt;
__gmpn_sqr_basecase@libgmp.so.10(0x222a010, 0x7fff65665e80, 2, 48)= 0x3562f3ea0787ecff
&lt;... __gmpn_sqr resumed&gt; )= 0
__gmpn_mul_1@libgmp.so.10(0x222a010, 0x222a010, 3, 0x129c08be7ca69)= 0xca32f2e
&lt;... __gmpz_n_pow_ui resumed&gt; )= 0
&lt;... __gmpz_pow_ui resumed&gt; )= 0
&lt;... __gmpz_pow_ui resumed&gt; )= 0
__gmpz_clear(0x7fff65665f70, 0x222a020, 0, 0x129c08be7ca69 &lt;unfinished ...&gt;
__gmpz_clear@libgmp.so.10(0x7fff65665f70, 0x222a020, 0, 0x129c08be7ca69 &lt;unfinished ...&gt;
__gmp_default_free@libgmp.so.10(0x222a010, 56, 0, 0x129c08be7ca69)= 0
&lt;... __gmpz_clear resumed&gt; )= 0
&lt;... __gmpz_clear resumed&gt; )= 0
pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
pthread_attr_init(0x7fff65665f80, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff65665f80, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff65665fc0, 0x7fff65665f80, 0x400a60, 0)= 0
pthread_create(0x7fff65665fb8, 0x7fff65665f80, 0x400aa8, 0)= 0
pthread_attr_destroy(0x7fff65665f80, 0x7f3164bc1fb0, 0x7f3164bc29d0, -1)= 0
pthread_join(0x7f31653c3700, 0, 0x7f3164bc29d0, -1)= 0
pthread_join(0x7f3164bc2700, 0, 0x7f31653c3700, 0x3574418290)= 0
_fini@libgmp.so.10(0x358cc761f0, 0, 0xffffffff, 0)= 0x358ca5edc4
+++ exited (status 0) +++</code></pre>
<p>To catch only the calls to the specific library use <code>-L</code> which will make <code>ltrace</code> not trace anything from the <code>MAIN</code> library:</p>
<pre><code>$ ltrace -L -x &#39;@libgmp.so.*&#39; ./test
__gmpz_init_set_ui@libgmp.so.10(0x7fffbf630930, 41, 0x7fffbf630a88, 0x400c60 &lt;unfinished ...&gt;
__gmp_default_allocate@libgmp.so.10(8, 41, 0x7fffbf630a88, 0x400c60)= 0x17b5010
&lt;... __gmpz_init_set_ui resumed&gt; )= 1
__gmpz_pow_ui@libgmp.so.10(0x7fffbf630930, 0x7fffbf630930, 41, 0x7fffbf630930 &lt;unfinished ...&gt;
__gmpz_n_pow_ui@libgmp.so.10(0x7fffbf630930, 0x17b5010, 1, 41 &lt;unfinished ...&gt;
__gmpz_realloc@libgmp.so.10(0x7fffbf630930, 7, 42, 7 &lt;unfinished ...&gt;
__gmp_default_reallocate@libgmp.so.10(0x17b5010, 8, 56, 7)= 0x17b5010
&lt;... __gmpz_realloc resumed&gt; )= 0x17b5010
__gmpn_sqr@libgmp.so.10(0x17b5010, 0x7fffbf630840, 2, 48 &lt;unfinished ...&gt;
__gmpn_sqr_basecase@libgmp.so.10(0x17b5010, 0x7fffbf630840, 2, 48)= 0x3562f3ea0787ecff
&lt;... __gmpn_sqr resumed&gt; )= 0
__gmpn_mul_1@libgmp.so.10(0x17b5010, 0x17b5010, 3, 0x129c08be7ca69)= 0xca32f2e
&lt;... __gmpz_n_pow_ui resumed&gt; )= 0
&lt;... __gmpz_pow_ui resumed&gt; )= 0
__gmpz_clear@libgmp.so.10(0x7fffbf630930, 0x17b5020, 0, 0x129c08be7ca69 &lt;unfinished ...&gt;
__gmp_default_free@libgmp.so.10(0x17b5010, 56, 0, 0x129c08be7ca69)= 0
&lt;... __gmpz_clear resumed&gt; )= 0
_fini@libgmp.so.10(0x358cc761f0, 0, 0xffffffff, 0)= 0x358ca5edc4
+++ exited (status 0) +++</code></pre>
</section>
<section id="attaching-to-other-processes" class="level3">
<h3>Attaching To Other Processes</h3>
<p>Like in <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html#but-i-started-the-process.." title="Tracing Processes for Fun and Profit"><code>strace</code></a> case, we can use <code>-p</code> to attach to running processes:</p>
<pre><code>$ ./test &amp;
[1] 26026

$ ltrace -p 26026
__gmpz_clear(0x7fff1fa3bb50, 1, 0, 0x1b9b000)= 0
pow(0x7f2c3dca8000, 0x49ff000, 0x4044800000000000, -1)= 0x4da9465e5d9d1629
pthread_attr_init(0x7fff1fa3bb60, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff1fa3bb60, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff1fa3bba8, 0x7fff1fa3bb60, 0x400a60, 0)= 0
pthread_create(0x7fff1fa3bba0, 0x7fff1fa3bb60, 0x400aa8, 0)= 0
pthread_attr_destroy(0x7fff1fa3bb60, 0x7f2c42073fb0, 0x7f2c420749d0, -1)= 0
pthread_join(0x7f2c42875700, 0, 0x7f2c420749d0, -1)= 0
pthread_join(0x7f2c42074700, 0, 0x7f2c42875700, 0x3574418290)= 0
+++ exited (status 0) +++
[1]+  Done                    ./test</code></pre>
<p>In fact, just as <code>strace</code>, we can use multiple <code>-p</code> arguments to attach to multiple processes simultaneously:</p>
<pre><code>$ ./test &amp; ./test &amp;
[1] 26149
[2] 26150

$ ltrace -p 26149 -p 26150
__gmpz_clear(0x7fff52a4fed0, 1, 0, 0xa2c000)= 0
pow(0x7f85fb6f0000, 0x49ff000, 0x4044800000000000, -1)= 0x4da9465e5d9d1629
pthread_attr_init(0x7fff52a4fee0, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff52a4fee0, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff52a4ff28, 0x7fff52a4fee0, 0x400a60, 0)= 0
pthread_create(0x7fff52a4ff20, 0x7fff52a4fee0, 0x400aa8, 0)= 0
pthread_attr_destroy(0x7fff52a4fee0, 0x7f85ffabbfb0, 0x7f85ffabc9d0, -1)= 0
pthread_join(0x7f86002bd700, 0, 0x7f85ffabc9d0, -1)= 0
pthread_join(0x7f85ffabc700, 0, 0x7f86002bd700, 0x3574418290)= 0
+++ exited (status 0) +++
__gmpz_clear(0x7fff4cbac6e0, 1, 0, 0x1207000)= 0
pow(0x7fbf03640000, 0x49ff000, 0x4044800000000000, -1)= 0x4da9465e5d9d1629
pthread_attr_init(0x7fff4cbac6f0, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff4cbac6f0, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff4cbac738, 0x7fff4cbac6f0, 0x400a60, 0)= 0
pthread_create(0x7fff4cbac730, 0x7fff4cbac6f0, 0x400aa8, 0)= 0
pthread_attr_destroy(0x7fff4cbac6f0, 0x7fbf07a0bfb0, 0x7fbf07a0c9d0, -1)= 0
pthread_join(0x7fbf0820d700, 0, 0x7fbf07a0c9d0, -1)= 0
pthread_join(0x7fbf07a0c700, 0, 0x7fbf0820d700, 0x3574418290)= 0
+++ exited (status 0) +++
[1]-  Done                    ./test
[2]+  Done                    ./test</code></pre>
<p>Though, this case is useful only when debugging multiple programs which need to communicate between themselves, it is nice to know that this is possible.</p>
</section>
<section id="tracing-the-threads-and-children-of-a-process" class="level3">
<h3>Tracing the Threads and Children of a Process</h3>
<p>The <code>strace</code> tools allows attaching to subprocesses of a process using <code>-f</code>. Also, you can use <code>-ff</code> with a <code>-o</code> to get the output of each thread in a separate file.</p>
<p>However, <code>ltrace</code> knows only the <code>-f</code> option. Lines from different processes are prefixed with the <code>PID</code> of that process.</p>
<pre><code>$ ltrace -f ./test
[pid 26192] __libc_start_main(0x400aeb, 1, 0x7fffc406b9c8, 0x400c60 &lt;unfinished ...&gt;
[pid 26192] __gmpz_init_set_ui(0x7fffc406b880, 41, 0x7fffc406b9d8, 0x400c60)= 1
[pid 26192] __gmpz_pow_ui(0x7fffc406b880, 0x7fffc406b880, 41, 0x7fffc406b880)= 0
[pid 26192] __gmpz_clear(0x7fffc406b880, 0x1b21020, 0, 0x129c08be7ca69)= 0
[pid 26192] pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
[pid 26192] pthread_attr_init(0x7fffc406b890, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
[pid 26192] pthread_attr_setdetachstate(0x7fffc406b890, 0, 0x7fefffffffffffff, 0)           = 0
[pid 26192] pthread_create(0x7fffc406b8d0, 0x7fffc406b890, 0x400a60, 0)= 0
[pid 26193] pow(0, 0, 0x4045000000000000, -1 &lt;unfinished ...&gt;
[pid 26192] pthread_create(0x7fffc406b8c8, 0x7fffc406b890, 0x400aa8, 0 &lt;unfinished ...&gt;
[pid 26193] &lt;... pow resumed&gt; )= 0x4e1646505f35a847
[pid 26193] +++ exited (status 0) +++
[pid 26192] &lt;... pthread_create resumed&gt; )= 0
[pid 26192] pthread_attr_destroy(0x7fffc406b890, 0x7fc1a1041fb0, 0x7fc1a10429d0, -1)= 0
[pid 26192] pthread_join(0x7fc1a1843700, 0, 0x7fc1a10429d0, -1)= 0
[pid 26192] pthread_join(0x7fc1a1042700, 0, 0x7fc1a1843700, 0x3574418290 &lt;unfinished ...&gt;
[pid 26194] __gmpz_init_set_ui(0x7fc1a1041f00, 42, 0x59a85877c49edc2b, -1)= 1
[pid 26194] __gmpz_pow_ui(0x7fc1a1041f00, 0x7fc1a1041f00, 42, 0x7fc1a1041f00)= 0
[pid 26194] __gmpz_clear(0x7fc1a1041f00, 0x7fc19c0008c0, 0, 42)= 0
[pid 26192] &lt;... pthread_join resumed&gt; )= 0
[pid 26194] +++ exited (status 0) +++
[pid 26192] +++ exited (status 0) +++</code></pre>
<p>Thus, if you want to filter only a single child you have to resort to text filter utilities like <code>grep</code>.</p>
</section>
<section id="profiling" class="level3">
<h3>Profiling</h3>
<p>One nice thing about <code>strace</code> is that you can use the <code>-c</code> flag to get a table with all syscalls used in a program, the time needed to execute them and the count of error results. However, <code>ltrace</code> lacks this option but it can be simulated by using the other timing options and text filters.</p>
<p>Both <code>strace</code> and <code>ltrace</code> allow you to get timestamps around any call by using <code>-r</code>, <code>-t</code>, <code>-tt</code> or <code>-ttt</code>:</p>
<p><code>-r</code> shows a relative timestamp since program startup</p>
<pre><code>$ ltrace -r ./test
  0.000000 __libc_start_main(0x400aeb, 1, 0x7fff2a51a328, 0x400c60 &lt;unfinished ...&gt;
  0.000418 __gmpz_init_set_ui(0x7fff2a51a1e0, 41, 0x7fff2a51a338, 0x400c60)= 1
  0.000296 __gmpz_pow_ui(0x7fff2a51a1e0, 0x7fff2a51a1e0, 41, 0x7fff2a51a1e0)= 0
  0.000166 __gmpz_clear(0x7fff2a51a1e0, 0x1f66020, 0, 0x129c08be7ca69)= 0
  0.000137 pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
  0.000168 pthread_attr_init(0x7fff2a51a1f0, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
  0.000147 pthread_attr_setdetachstate(0x7fff2a51a1f0, 0, 0x7fefffffffffffff, 0)= 0
  0.000216 pthread_create(0x7fff2a51a230, 0x7fff2a51a1f0, 0x400a60, 0)= 0
  0.000409 pthread_create(0x7fff2a51a228, 0x7fff2a51a1f0, 0x400aa8, 0)= 0
  0.000474 pthread_attr_destroy(0x7fff2a51a1f0, 0x7f25016c5fb0, 0x7f25016c69d0, -1)= 0
  0.000250 pthread_join(0x7f2501ec7700, 0, 0x7f25016c69d0, -1)= 0
  0.000257 pthread_join(0x7f25016c6700, 0, 0x7f2501ec7700, 0x3574418290)= 0
  0.000735 +++ exited (status 0) +++</code></pre>
<p><code>-t</code> shows the time of day when the call was made</p>
<pre><code>$ ltrace -t ./test
14:50:42 __libc_start_main(0x400aeb, 1, 0x7fff84229b38, 0x400c60 &lt;unfinished ...&gt;
14:50:42 __gmpz_init_set_ui(0x7fff842299f0, 41, 0x7fff84229b48, 0x400c60)= 1
14:50:42 __gmpz_pow_ui(0x7fff842299f0, 0x7fff842299f0, 41, 0x7fff842299f0)= 0
14:50:42 __gmpz_clear(0x7fff842299f0, 0x1d02020, 0, 0x129c08be7ca69)= 0
14:50:42 pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
14:50:42 pthread_attr_init(0x7fff84229a00, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
14:50:42 pthread_attr_setdetachstate(0x7fff84229a00, 0, 0x7fefffffffffffff, 0)= 0
14:50:42 pthread_create(0x7fff84229a40, 0x7fff84229a00, 0x400a60, 0)= 0
14:50:42 pthread_create(0x7fff84229a38, 0x7fff84229a00, 0x400aa8, 0)= 0
14:50:42 pthread_attr_destroy(0x7fff84229a00, 0x7f48e7ec0fb0, 0x7f48e7ec19d0, -1)= 0
14:50:42 pthread_join(0x7f48e86c2700, 0, 0x7f48e7ec19d0, -1)= 0
14:50:42 pthread_join(0x7f48e7ec1700, 0, 0x7f48e86c2700, 0x3574418290)= 0
14:50:42 +++ exited (status 0) +++</code></pre>
<p><code>-tt</code> also displays the microseconds</p>
<pre><code>$ ltrace -tt ./test
14:50:45.465708 __libc_start_main(0x400aeb, 1, 0x7fff83373968, 0x400c60 &lt;unfinished ...&gt;
14:50:45.465942 __gmpz_init_set_ui(0x7fff83373820, 41, 0x7fff83373978, 0x400c60)= 1
14:50:45.466216 __gmpz_pow_ui(0x7fff83373820, 0x7fff83373820, 41, 0x7fff83373820)= 0
14:50:45.466400 __gmpz_clear(0x7fff83373820, 0x192e020, 0, 0x129c08be7ca69)= 0
14:50:45.466584 pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
14:50:45.466764 pthread_attr_init(0x7fff83373830, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
14:50:45.466932 pthread_attr_setdetachstate(0x7fff83373830, 0, 0x7fefffffffffffff, 0)= 0
14:50:45.467101 pthread_create(0x7fff83373870, 0x7fff83373830, 0x400a60, 0)= 0
14:50:45.467417 pthread_create(0x7fff83373868, 0x7fff83373830, 0x400aa8, 0)= 0
14:50:45.468024 pthread_attr_destroy(0x7fff83373830, 0x7fc1e7ebdfb0, 0x7fc1e7ebe9d0, -1)= 0
14:50:45.468253 pthread_join(0x7fc1e86bf700, 0, 0x7fc1e7ebe9d0, -1)= 0
14:50:45.468480 pthread_join(0x7fc1e7ebe700, 0, 0x7fc1e86bf700, 0x3574418290)= 0
14:50:45.469108 +++ exited (status 0) +++</code></pre>
<p><code>-ttt</code> displays microseconds as above but use the seconds till epoch instead of the actual time.</p>
<pre><code>$ ltrace -ttt ./test
1390074648.833755 __libc_start_main(0x400aeb, 1, 0x7fff5b1c8e28, 0x400c60 &lt;unfinished ...&gt;
1390074648.833981 __gmpz_init_set_ui(0x7fff5b1c8ce0, 41, 0x7fff5b1c8e38, 0x400c60)= 1
1390074648.834289 __gmpz_pow_ui(0x7fff5b1c8ce0, 0x7fff5b1c8ce0, 41, 0x7fff5b1c8ce0)= 0
1390074648.834481 __gmpz_clear(0x7fff5b1c8ce0, 0x1e7c020, 0, 0x129c08be7ca69)= 0
1390074648.834678 pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
1390074648.834858 pthread_attr_init(0x7fff5b1c8cf0, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
1390074648.835033 pthread_attr_setdetachstate(0x7fff5b1c8cf0, 0, 0x7fefffffffffffff, 0)= 0
1390074648.835242 pthread_create(0x7fff5b1c8d30, 0x7fff5b1c8cf0, 0x400a60, 0)= 0
1390074648.835935 pthread_create(0x7fff5b1c8d28, 0x7fff5b1c8cf0, 0x400aa8, 0)= 0
1390074648.836327 pthread_attr_destroy(0x7fff5b1c8cf0, 0x7fc3da214fb0, 0x7fc3da2159d0, -1)= 0
1390074648.837980 pthread_join(0x7fc3daa16700, 0, 0x7fc3da2159d0, -1)= 0
1390074648.838436 pthread_join(0x7fc3da215700, 0, 0x7fc3daa16700, 0x3574418290)= 0
1390074648.839230 +++ exited (status 0) +++</code></pre>
<p>Also, both tools allow you to time each individual call by using <code>-T</code>:</p>
<pre><code>$ ltrace -T ./test
__libc_start_main(0x400aeb, 1, 0x7fffc4512768, 0x400c60 &lt;unfinished ...&gt;
__gmpz_init_set_ui(0x7fffc4512620, 41, 0x7fffc4512778, 0x400c60)    = 1 &lt;0.000290&gt;
__gmpz_pow_ui(0x7fffc4512620, 0x7fffc4512620, 41, 0x7fffc4512620)   = 0 &lt;0.000167&gt;
__gmpz_clear(0x7fffc4512620, 0x21cc020, 0, 0x129c08be7ca69)         = 0 &lt;0.000142&gt;
pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)                = 0x4da9465e5d9d1629 &lt;0.000209&gt;
pthread_attr_init(0x7fffc4512630, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0 &lt;0.000130&gt;
pthread_attr_setdetachstate(0x7fffc4512630, 0, 0x7fefffffffffffff, 0)= 0 &lt;0.000139&gt;
pthread_create(0x7fffc4512670, 0x7fffc4512630, 0x400a60, 0)         = 0 &lt;0.000304&gt;
pthread_create(0x7fffc4512668, 0x7fffc4512630, 0x400aa8, 0)         = 0 &lt;0.000421&gt;
pthread_attr_destroy(0x7fffc4512630, 0x7f09988a1fb0, 0x7f09988a29d0, -1)= 0 &lt;0.000266&gt;
pthread_join(0x7f09990a3700, 0, 0x7f09988a29d0, -1)                 = 0 &lt;0.000181&gt;
pthread_join(0x7f09988a2700, 0, 0x7f09990a3700, 0x3574418290)       = 0 &lt;0.000467&gt;
+++ exited (status 0) +++</code></pre>
<p>Though you can profile applications using <code>ltrace</code> and <code>strace</code>, a much better tool to use is <code>perf</code> which will be presented on a future article.</p>
</section>
<section id="blaming-it-on-the-culprit-line" class="level3">
<h3>Blaming it on the Culprit Line</h3>
<p>It is possible to use <code>ltrace</code> and <code>strace</code> to show you the line numbers of the caller by using the <code>-i</code> flag to get the value of the <code>EIP</code> register and then using <a href="http://linuxmanpages.com/man1/addr2line.1.php" title="addr2line - convert addresses into file names and line numbers"><code>addr2line</code></a> to get the exact line (compile with <code>-g</code>):</p>
<pre><code>$ ltrace -i ./test
...
[0x400bfb] pthread_create(0x7fff0804c998, 0x7fff0804c960, 0x400aa8, 0)= 0
[0x400c1f] pthread_attr_destroy(0x7fff0804c960, 0x7f708d112fb0, 0x7f708d1139d0, -1)= 0
...
[0xffffffffffffffff] +++ exited (status 0) +++

$ addr2line -iCse ./test 0x400c1f
test.c:63</code></pre>
<p>This is useful when your code makes repeated calls to the same subset of functions but only a few of them cause problems.</p>
</section>
<section id="nicer-output" class="level3">
<h3>Nicer Output</h3>
<p>One interesting feature of <code>ltrace</code> is that you can get a nice call tree when functions from one library call other traced functions. For that, you would use the <code>-n</code> option.</p>
<pre><code>$ ltrace -n 3 -L -x &#39;@libgmp.so.*&#39; ./test
__gmpz_init_set_ui@libgmp.so.10(0x7fff7bb2e810, 41, 0x7fff7bb2e968, 0x400c60 &lt;unfinished ...&gt;
   __gmp_default_allocate@libgmp.so.10(8, 41, 0x7fff7bb2e968, 0x400c60)= 0x12b2010
&lt;... __gmpz_init_set_ui resumed&gt; )= 1
__gmpz_pow_ui@libgmp.so.10(0x7fff7bb2e810, 0x7fff7bb2e810, 41, 0x7fff7bb2e810 &lt;unfinished ...&gt;
   __gmpz_n_pow_ui@libgmp.so.10(0x7fff7bb2e810, 0x12b2010, 1, 41 &lt;unfinished ...&gt;
      __gmpz_realloc@libgmp.so.10(0x7fff7bb2e810, 7, 42, 7 &lt;unfinished ...&gt;
         __gmp_default_reallocate@libgmp.so.10(0x12b2010, 8, 56, 7)= 0x12b2010
      &lt;... __gmpz_realloc resumed&gt; )= 0x12b2010
      __gmpn_sqr@libgmp.so.10(0x12b2010, 0x7fff7bb2e720, 2, 48 &lt;unfinished ...&gt;
         __gmpn_sqr_basecase@libgmp.so.10(0x12b2010, 0x7fff7bb2e720, 2, 48)= 0x3562f3ea0787ecff
      &lt;... __gmpn_sqr resumed&gt; )= 0
      __gmpn_mul_1@libgmp.so.10(0x12b2010, 0x12b2010, 3, 0x129c08be7ca69)= 0xca32f2e
   &lt;... __gmpz_n_pow_ui resumed&gt; )= 0
&lt;... __gmpz_pow_ui resumed&gt; )= 0
__gmpz_clear@libgmp.so.10(0x7fff7bb2e810, 0x12b2020, 0, 0x129c08be7ca69 &lt;unfinished ...&gt;
   __gmp_default_free@libgmp.so.10(0x12b2010, 56, 0, 0x129c08be7ca69)= 0
&lt;... __gmpz_clear resumed&gt; )= 0
_fini@libgmp.so.10(0x358cc761f0, 0, 0xffffffff, 0)= 0x358ca5edc4
+++ exited (status 0) +++</code></pre>
<p>If <code>ltrace</code> was compiled with <code>libunwind</code> support then you can also use the <code>-w</code> option to get a backtrace for a specific number of frames around each traced call. If not (like in our case) one can still use the <code>-i</code> way or the <code>-n</code>, depending on what he is interested in.</p>
</section>
<section id="conclusions" class="level3">
<h3>Conclusions</h3>
<p>Though very rarely used, <code>ltrace</code> is a nice program to have in your toolbox. It will greatly help you in those hard to debug cases caused by undocumented behaviors of third-party libraries.</p>
<p>Notice that <code>ltrace</code> has most of the bugs of <code>strace</code>:</p>
<ol type="1">
<li>a program with <code>setuid</code> doesn’t have <code>euid</code> privileges while being traced</li>
<li>a program is slow while being traced</li>
<li>the <code>-i</code> support is weak</li>
</ol>
<p>Next article on this series will present tools for profiling applications and solving timing bugs.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Sat, 18 Jan 2014 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/ltrace.html</guid>
</item>
<item>
    <title>A superficial exploration of Haskell - part 1</title>
    <link>http://techblog.rosedu.org/haskell-part1.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/haskell-part1.html" title="A superficial exploration of Haskell - part 1">A superficial exploration of Haskell - part 1</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on January  7, 2014</span>
      by
      <span class="author">Dan Șerban</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/haskell.html">haskell</a></span>
      </span>

      <p>This series of blog posts is aimed at experienced programmers who have heard that Haskell is an interesting programming language, but have not had the chance to invest any time in researching it.</p>
<p>In this series I am going to highlight a few remarkable things at a high level, while glossing over some implementation details that would take too long to explain properly. Therefore, expect a lot of “here’s a practical application of Haskell and here’s some sample code, but don’t ask to see the gory details” hand-waving.</p>
<p>For the purposes of this series, I will simply assume that it’s easy for the experienced reader to jump into a new imperative programming language after a few hours or days of becoming familiar with its syntax. And I’ll start with an example that illustrates how you have to adopt a completely different mindset when you start learning Haskell.</p>
<p>Part 1 of this series covers:</p>
<ul>
<li>Mutability</li>
<li>Upside Down Maps</li>
<li>Tokenizing Kernel Code</li>
</ul>
<!--more-->

<p><strong>Before you ask:</strong> All the Haskell snippets I’m showing here consist of GHCi interactive console sessions. I have configured a custom prompt for myself, by placing the line <code>:set prompt &quot;λ: &quot;</code> in GHCi’s configuration file <code>~/.ghc/ghci.conf</code>. The prompt is going to <a href="http://www.haskell.org/ghc/docs/7.6.2/html/users_guide/interactive-evaluation.html">look different</a> if you’re just starting out with a freshly installed copy of Haskell.</p>
<section id="mutability" class="level3">
<h3>Mutability</h3>
<p>To start with, here’s a Python code sample, cut and pasted from a Python 2.7 REPL (interactive console session):</p>
<pre class="sourceCode python"><code class="sourceCode python">&gt;&gt;&gt; x = <span class="dv">1</span>
&gt;&gt;&gt; x = x + <span class="dv">1</span>
&gt;&gt;&gt; x
<span class="dv">2</span>
&gt;&gt;&gt;</code></pre>
<p>Nothing could be simpler!</p>
<p>OK then. Time to port this snippet of code over to Haskell. I’m just going to go with the flow and naively assume – just as many newcomers to Haskell would – that porting Python code is a direct 1-to-1 syntactic translation, in other words, an easy, straightforward thing to do.</p>
<p>The following is what happens in the Haskell REPL (called GHCi). By the way, here we have to prepend the keyword <code>let</code> - it’s the law of the land in GHCi:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> x <span class="fu">=</span> <span class="dv">1</span>
λ: <span class="kw">let</span> x <span class="fu">=</span> x <span class="fu">+</span> <span class="dv">1</span>
λ: x
<span class="fu">^</span><span class="dt">CInterrupted</span><span class="fu">.</span>
λ:</code></pre>
<p>Huh? What just happened? I was expecting Haskell to compute the value 2. It took forever for the GHCi interactive console to evaluate <code>x</code>, so I got bored and pressed <code>Ctrl-C</code>. What’s happening? Explain this to me.</p>
<p>Well, as one Reddit commenter once observed, this is just one of the many things Haskell does to haze you during your initiation.</p>
<p>What you’re actually doing is giving Haskell a puzzle (<code>x = x + 1</code>) and saying “Go find me a solution”. Mathematically speaking, there are only 2 possible solutions to that puzzle: <span class="math">\(\infty\)</span> and <span class="math">\(- \infty\)</span>. So when you saw it hang, Haskell wasn’t merely taking its time – for no good reason – before giving you back the value 2. Instead, Haskell’s runtime was trying its hardest to give you a correct result by taking every integer value it could think of, one by one, and checking whether it was equal to its successor.</p>
<p>Just to be clear, there is a way to emulate the behavior of the Python snippet we saw above, and the Haskell code for doing that looks like this:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> x <span class="fu">=</span> <span class="dv">1</span>
λ: x <span class="ot">&lt;-</span> return <span class="fu">$</span> x <span class="fu">+</span> <span class="dv">1</span>
λ: x
<span class="dv">2</span>
λ:</code></pre>
<p>As you can see, the syntax is much more verbose (and uglier) than in Python, and for good reason – in Haskell, you are strongly discouraged from using variables and mutation as the primary means of expressing algorithms.</p>
<p>Haskell is divided in two major parts: a crystal palace of unspeakable beauty and <em>mathematical purity</em>, and an imperative ghetto for doing <em>I/O</em> and dealing with <em>mutation</em>. The equal sign in <code>x = x + 1</code> lives in the beautiful palace and symbolizes mathematical unification, while the construct <code>&lt;- return $</code> lives in the ghetto and means “evaluate the right hand side and shove the result into the identifier on the left hand side, thus overwriting what was there beforehand, in true imperative style”.</p>
</section>
<section id="reverse-map-upside-down-map-you-decide" class="level3">
<h3>Reverse Map? Upside Down Map? You decide</h3>
<p>OK, for the next segment I’m going to assume that your beloved programming language of choice has a construct called <code>map</code>, and that you know how to use it.</p>
<p>We start again with some Python code. While Python does indeed offer a higher-order function called <code>map</code>, it’s much more common for experienced Python developers to prefer using a list comprehension, like this:</p>
<pre class="sourceCode Python"><code class="sourceCode python">&gt;&gt;&gt; <span class="dt">list</span> = <span class="dt">range</span>(<span class="dv">20</span>,<span class="dv">31</span>)
&gt;&gt;&gt; <span class="dt">list</span>
[<span class="dv">20</span>, <span class="dv">21</span>, <span class="dv">22</span>, <span class="dv">23</span>, <span class="dv">24</span>, <span class="dv">25</span>, <span class="dv">26</span>, <span class="dv">27</span>, <span class="dv">28</span>, <span class="dv">29</span>, <span class="dv">30</span>]
&gt;&gt;&gt; [ x + <span class="dv">1</span> <span class="kw">for</span> x in <span class="dt">list</span> ]
[<span class="dv">21</span>, <span class="dv">22</span>, <span class="dv">23</span>, <span class="dv">24</span>, <span class="dv">25</span>, <span class="dv">26</span>, <span class="dv">27</span>, <span class="dv">28</span>, <span class="dv">29</span>, <span class="dv">30</span>, <span class="dv">31</span>]
&gt;&gt;&gt;</code></pre>
<p>Nothing new or earth-shattering - I would hope - so here’s the Haskell equivalent before we jump into the interesting stuff:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> list <span class="fu">=</span> [<span class="dv">20</span><span class="fu">..</span><span class="dv">30</span>]
λ: list
[<span class="dv">20</span>,<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>,<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">30</span>]
λ: map (<span class="fu">+</span><span class="dv">1</span>) list
[<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>,<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">30</span>,<span class="dv">31</span>]
λ:</code></pre>
<p>So the basic idea I’m getting at here is that in the beginning we have:</p>
<ul>
<li>one single operation (compute an integer’s successor)</li>
<li>a list of integer values</li>
</ul>
<p><strong>Now for the interesting part.</strong></p>
<p>Let’s take those bullet points above and turn them upside down, such that in the beginning we have:</p>
<ul>
<li>one single integer value</li>
<li>a list of unary integer-to-integer operations</li>
</ul>
<p>Python can still deal with this situation fairly well, since Python’s functions are first-class values (you can place several of them inside of a list). But the Python code wouldn’t be as concise or expressive as the Haskell equivalent, shown here:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> function_list_1 <span class="fu">=</span> [(<span class="fu">+</span><span class="dv">2</span>),(<span class="fu">*</span><span class="dv">3</span>),(<span class="fu">^</span><span class="dv">2</span>)]
λ: <span class="kw">let</span> function_list_2 <span class="fu">=</span> [(<span class="fu">*</span><span class="dv">5</span>),(<span class="fu">+</span><span class="dv">7</span>),(<span class="fu">*</span><span class="dv">4</span>),(subtract <span class="dv">10</span>)]
λ: <span class="kw">let</span> i <span class="fu">=</span> <span class="dv">12</span>
λ: <span class="kw">import </span><span class="dt">Control.Applicative</span>
λ: function_list_1 <span class="fu">&lt;*&gt;</span> [i]
[<span class="dv">14</span>,<span class="dv">36</span>,<span class="dv">144</span>]
λ: function_list_2 <span class="fu">&lt;*&gt;</span> [i]
[<span class="dv">60</span>,<span class="dv">19</span>,<span class="dv">48</span>,<span class="dv">2</span>]
λ:</code></pre>
<p><strong>Side note:</strong> Due to brevity concerns, it is not practical to go into a detailed explanation of the <code>&lt;*&gt;</code> operator in <code>Control.Applicative</code> (a module in Haskell’s standard library). That is a topic for another blog post. The point here was to show how concisely you can express non-trivial computations with Haskell.</p>
<p><strong>Fun fact:</strong> implementing the “upside-down map” described above was recently a requirement for admittance into <a href="http://webdev.rosedu.org/">WebDev</a> (an extracurricular course organized by ROSEdu). Candidates sent us solutions they had written in various programming languages, with varying degrees of conciseness. We found that the most verbose implementations were predominantly Java-based.</p>
</section>
<section id="lets-tokenize-some-kernel-code" class="level3">
<h3>Let’s tokenize some kernel code</h3>
<p>For the next segment I’ll just grab a <a href="https://github.com/torvalds/linux/blob/master/kernel/sched/fair.c#L507">snippet of code from the Linux kernel</a> and demonstrate how concisely you can express a tokenizer for it in Haskell.</p>
<p>The code for Linux’s completely fair scheduler is stored in a file called <code>fair.c</code>; I’ll just grab a small function from it (function <code>__enqueue_entity</code>, which starts at line 507) and store it locally in a file called <code>enqueue_entity.c</code>.</p>
<p>Here’s what I do subsequently, step by step:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: sample_cfs_code <span class="ot">&lt;-</span> readFile <span class="st">&quot;enqueue_entity.c&quot;</span>
λ:</code></pre>
<p>I just slurped the contents of the file into <code>sample_cfs_code</code>. This is our raw material, let’s look at it:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: sample_cfs_code
<span class="st">&quot;static void __enqueue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se)\n{\n        struct rb_node **link = &amp;cfs_rq-&gt;tasks_timeline.rb_node;\n        struct rb_node *parent = NULL;\n        struct sched_entity *entry;\n        int leftmost = 1;\n        while (*link) {\n                parent = *link;\n                entry = rb_entry(parent, struct sched_entity, run_node);\n                if (entity_before(se, entry)) {\n                        link = &amp;parent-&gt;rb_left;\n                } else {\n                        link = &amp;parent-&gt;rb_right;\n                        leftmost = 0;\n                }\n        }\n        if (leftmost)\n                cfs_rq-&gt;rb_leftmost = &amp;se-&gt;run_node;\n\n        rb_link_node(&amp;se-&gt;run_node, parent, link);\n        rb_insert_color(&amp;se-&gt;run_node, &amp;cfs_rq-&gt;tasks_timeline);\n}\n\n&quot;</span>
λ:</code></pre>
<p>We now define our tokenizing function in Haskell (I trust you will appreciate how concise it is):</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">import </span><span class="dt">Data.List</span>
λ: <span class="kw">let</span> tokenize_this <span class="fu">=</span> unfoldr (\x <span class="ot">-&gt;</span> <span class="kw">case</span> lex x <span class="kw">of</span> [(<span class="st">&quot;&quot;</span>,<span class="st">&quot;&quot;</span>)] <span class="ot">-&gt;</span> <span class="dt">Nothing</span>; x<span class="fu">:</span>_ <span class="ot">-&gt;</span> <span class="dt">Just</span> x)
λ:</code></pre>
<p>The most interesting keyword here is <code>lex</code>, which is a function that is defined in Haskell’s standard library as part of the <code>GHC.Read</code> module. The <code>unfoldr</code> function also deserves some explanation, but just as before, it wouldn’t be practical to go into much detail here.</p>
<p>So far, so good. Let’s apply our tokenizing function to the C code:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> tokenized_cfs_code <span class="fu">=</span> tokenize_this sample_cfs_code
λ:</code></pre>
<p>Finally, let’s view the resulting stream of tokens:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: mapM_ print tokenized_cfs_code
<span class="st">&quot;static&quot;</span>
<span class="st">&quot;void&quot;</span>
<span class="st">&quot;__enqueue_entity&quot;</span>
<span class="st">&quot;(&quot;</span>
<span class="st">&quot;struct&quot;</span>
<span class="st">&quot;cfs_rq&quot;</span>
<span class="st">&quot;*&quot;</span>
<span class="st">&quot;cfs_rq&quot;</span>
<span class="st">&quot;,&quot;</span>
<span class="st">&quot;struct&quot;</span>
<span class="st">&quot;sched_entity&quot;</span>
<span class="st">&quot;*&quot;</span>
<span class="st">&quot;se&quot;</span>
<span class="st">&quot;)&quot;</span>
<span class="st">&quot;{&quot;</span>
<span class="st">&quot;struct&quot;</span>
<span class="st">&quot;rb_node&quot;</span>
<span class="st">&quot;**&quot;</span>
<span class="st">&quot;link&quot;</span>
<span class="st">&quot;=&quot;</span>
<span class="st">&quot;&amp;&quot;</span>
<span class="st">&quot;cfs_rq&quot;</span>
<span class="st">&quot;-&gt;&quot;</span>
[ <span class="fu">...</span> many more tokens <span class="dt">I&#39;m</span> not showing here <span class="fu">...</span> ]
<span class="st">&quot;rb_insert_color&quot;</span>
<span class="st">&quot;(&quot;</span>
<span class="st">&quot;&amp;&quot;</span>
<span class="st">&quot;se&quot;</span>
<span class="st">&quot;-&gt;&quot;</span>
<span class="st">&quot;run_node&quot;</span>
<span class="st">&quot;,&quot;</span>
<span class="st">&quot;&amp;&quot;</span>
<span class="st">&quot;cfs_rq&quot;</span>
<span class="st">&quot;-&gt;&quot;</span>
<span class="st">&quot;tasks_timeline&quot;</span>
<span class="st">&quot;)&quot;</span>
<span class="st">&quot;;&quot;</span>
<span class="st">&quot;}&quot;</span>
λ:</code></pre>
<p>You can use this approach to help your language design efforts, if you plan on inventing your own DSL, or even your own general-purpose programming language. Once your source code is tokenized, you can now parse the stream of tokens into the target Haskell data structures using a technique called combinator parsing, which is where the Haskell programming language really shines.</p>
</section>
<section id="end-of-part-1" class="level3">
<h3>End of part 1</h3>
<p>That’s it for part 1 – there will be more to come.</p>
<p>If you’re interested in picking up Haskell, there are a number of very good free online resources (<a href="https://www.fpcomplete.com/school">1</a>, <a href="http://learnyouahaskell.com/">2</a>, <a href="http://book.realworldhaskell.org/">3</a>), as well as classes and workshops held in various locations.</p>
<p>Speaking of Haskell classes and workshops, allow me to draw your attention to a project called <a href="http://lambda.rosedu.org/#english">lambda.rosedu.org</a>, which is an instructor-led, in-depth, hands-on workshop on functional programming centered around Haskell, Scala and Clojure. The workshop is free of charge, but the standards for admittance are fairly high (you will need to solve a few programming as well as logic problems). The workshop will be hosted by ROSEdu at the department for Computer Science of the POLITEHNICA University of Bucharest some time during the summer of 2014. The topics I glossed over – due to brevity concerns – in this blog post will be covered in depth during the workshop.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 07 Jan 2014 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/haskell-part1.html</guid>
</item>
<item>
    <title>Facebook Hackathon Live Blogging</title>
    <link>http://techblog.rosedu.org/facebook-hackathon-live-blogging.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/facebook-hackathon-live-blogging.html" title="Facebook Hackathon Live Blogging">Facebook Hackathon Live Blogging</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on October 19, 2013</span>
      by
      <span class="author">Alex Palcuie and Marius Ungureanu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/facebook.html">facebook</a>, <a href="/tags/hackathon.html">hackathon</a>, <a href="/tags/live.html">live</a>, <a href="/tags/blogging.html">blogging</a>, <a href="/tags/coders.html">coders</a></span>
      </span>

      <div class="right">
<img style="float:right" width="300" height="300" src="http://distilleryimage10.ak.instagram.com/b88daa3e38a911e3893622000a1fcd0b_7.jpg">
</div>
<section id="pm" class="level4">
<h4>3:30PM</h4>
<p>Ladies and gentlemen, fast hackers and coder perfectionists, web developers and mobile app creators, we present you the first edition of the Facebook hackathon in Romania. Organized by your favorite open-source community ROSEdu, the volunteers have been busy all morning preparing the workspace for the 15 participating teams. We have pizza, beer and a mountain of bean bags for people who <em>move fast and break things</em>.</p>
<!--more-->

<div style="clear:both;"></div>

</section>
<section id="pm-1" class="level4">
<h4>3:30PM</h4>
<p>People have started their IDEs (or text editors for more hardcore people) and started installing their gems (Ruby guy here sorry). After a quick intro from the organizers about the rules, the Facebook engineers presented their skills and their expectations: it’s fun to code, but it’s awesome <strong>to ship</strong>. So happy shipping hackers!</p>
<div class="center">
<img width="600" height="400" src="https://fbcdn-sphotos-g-a.akamaihd.net/hphotos-ak-ash3/1381306_602864479775589_1298026562_n.jpg">
</div>
</section>
<section id="pm-2" class="level4">
<h4>5:30PM</h4>
<p>A brief pause and all the keyboard presses have stopped. The Facebook representatives have given out a random prize! One Facebook T-shirt. Congratulations to Andrei Duma! People are now back to coding and making their ideas come to life: <strong>done is better than perfect</strong>.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/premii_facebook.jpg">
</div>
</section>
<section id="first-team" class="level4">
<h4>First team</h4>
<p>Only 4 hours in the event! We have interviewed some of the participants and they’re coding, designing and implementing their application basis! The first team we interviewed is <a href="https://github.com/rosedu/3_awesome_guyes_and_a_llama">3_awesome_guys_and_a_llama</a>. These students from the University “Politehnica” of Bucharest are writing an Event Planner. From what they told us, it’s an application which tries to help people organize events for them and their friends for their night out. It’s more focused on location, than being focused on time, so they can make it a planned drink-up or dance-off. They integrate it with the Facebook Places API and would like to have bars, clubs and restaurants use their app so people can make reservations. As technology stack, they have Python on top of Google App Engine. One of the devs said that he learned about it on a <a href="https://www.udacity.com/course/cs253">Udacity course</a> which I recommend it to you. They also plan to use Twitter’s Bootstrap library because they do not have enough frontend experience.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/two_guys_llama.JPG">
</div>
</section>
<section id="be-green-recycle" class="level4">
<h4>Be green, recycle</h4>
<p>You are a human, walking down and you see a big pile of garbage. It’s a scenario common here in Romania. But what if you have an app for cleaning it? That’s what <a href="https://github.com/rosedu/sudoRecycle">sudoRecycle</a> is trying to do with their Android idea. You see the junk, take a photo, tag it with the GPS location and send it to their servers. Using their backend written in PHP, they will send teams of robots that will clean the area. Because we human beings are really lazy, they plan to use the Facebook API for gamification, so you could level up in cleaning the world.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/sudo_recycle.JPG">
</div>
</section>
<section id="explore-the-underground" class="level4">
<h4>Explore the underground</h4>
<p>We’ve all endured the lack of knowledge of moving around Bucharest, if we haven’t lived here. But <a href="https://github.com/rosedu/Dark_side_of_the_moon">dark_side_of_the_moon</a> is going to remedy this with their offline mobile subway connection app. You want to get from X to Y using the shortest route. It also wants to tell you what ground-level public transportation is there and what you can visit. Furthermore they want it to tell your friends where you’ve been after you used its functionality to check-in at your destination. Under the hood, it’s using Android 4.0+ API and they want to integrate with the Facebook API to see the places your friends have visited. The coolest feature they want to code will tell you when the next tube will arrive.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/pink_floyd.jpg">
</div>
</section>
<section id="grails" class="level4">
<h4>GRails</h4>
<p>Did you know that in the year 2013, if you apply to MIT, you must send the papers by fax or postal mail? And after you send them, a person will manually go through them and tell you that the papers have arrived? Or if you get into a university you must write 6 papers with about 60% redundant information? That’s what <a href="https://github.com/rosedu/GRails">GRails</a>, the only team made entirely of girls, is trying to solve, fighting bureaucracy with Rails 4. Now with 100% less paper involved!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/grails.jpg">
</div>
</section>
<section id="hiking" class="level4">
<h4>Hiking</h4>
<p>Everybody knows that Romania has some of the best hiking routes, beautiful views and mysterious mountains. And who doesn’t want to know what trips you can make in the wild nature? Well, you can now check out a map and see what is available for adventurers! The map also shows you elevation, so you know if it’s a long road and also an abrupt road. A Django platform by <a href="https://github.com/rosedu/saltaretii">saltaretii</a> should be enough to support this paradise for nature’s explorers!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/saltaretii.jpg">
</div>
</section>
<section id="i-want-to-ride-my-bicycle-i-want-to-ride-my-bike" class="level4">
<h4>I want to ride my bicycle, I want to ride my bike</h4>
<p>2 wheels, foot power and long distance travelling made easy! These two guys are achieving the awesome tool that brings bikers a dream app come true! Using complex algorithms, they want to give bikers many possible routes from one place to another. You can choose your own type of road, either abrupt and short or longer and less steep. The point? You can choose which kind of road you want and which is fit for you! If that is not enough, these 2 guys are doing this client side with ClojureScript… yeah, it’s the new functional kid in town which tries to solve the event driven callback hell. <a href="https://github.com/rosedu/flatride">FlatRide</a> on, people!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/flatride.jpg">
</div>
<div class="right">
<img src="/images/facebook-hackathon/jackson.jpg">
</div>
</section>
<section id="jackson-gabbard" class="level4">
<h4><a href="https://www.facebook.com/jg">Jackson Gabbard</a></h4>
<p>From an English major in Tennessee, to the 300th Facebook employee, to the 4th one to move in the new London office. He works on developer tools for the engineers and oversees some of the most important components like <em>Tasks</em> which devs open daily to get their job done. He is a self-taught hacker and he had an enlightment moment about the power of programming the first time he used the array structure.</p>
<p>He was really communicative and willing to tell us of his opinions, about the event, mentioning that he’s amazed about the main focus of students. ‘Transportation’, ‘Finding things’ and ‘Group organization’ are recurrent themes. He said some of his coworkers are Romanian and he thinks Romania is a land where lots of engineers are being created. Proud to be a full-time hackers around here!</p>
<p>We also asked him about the Bootcamp in London, which is about learning to code. And guess what? Even executives go through these preparations to get into Facebook. The engineering team has lots of fun hacking in that period of education. It teaches you how to love the company, you get to learn the ropes while communicating and interact with other mind-like people.</p>
<p>Finally he has participated in lockdowns each year. These are periods of time when teams gather in a room and stay there for several days (usually 30) and ship a big feature. Pretty hardcore, but that’s life at Facebook.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Sat, 19 Oct 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/facebook-hackathon-live-blogging.html</guid>
</item>
<item>
    <title>Shell tips and tricks for log files</title>
    <link>http://techblog.rosedu.org/shell-tips-and-tricks-for-file-editing.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/shell-tips-and-tricks-for-file-editing.html" title="Shell tips and tricks for log files">Shell tips and tricks for log files</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on June 20, 2013</span>
      by
      <span class="author">Alexandru Juncu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/CLI.html">CLI</a>, <a href="/tags/bash.html">bash</a>, <a href="/tags/shell.html">shell</a>, <a href="/tags/files.html">files</a>, <a href="/tags/text.html">text</a>, <a href="/tags/truncate.html">truncate</a>, <a href="/tags/tee.html">tee</a>, <a href="/tags/tail.html">tail</a>, <a href="/tags/follow.html">follow</a></span>
      </span>

      <p>Here are are some small things you might find useful when you need to deal with text files. In the Linux/Unix world, a lot of things are text files, so you need to know how to efficiently handle them. If you are a sysadmin, you need to look at <strong>log files</strong> for most of your work time and the following might come in handy.</p>
<!--more-->

<section id="following-a-log-file" class="level3">
<h3>Following a log file</h3>
<p>Take your <code>$GENERIC_SERVICE</code> on your server that generates a lot of logs. You could open a <strong>text editor</strong> like <code>vi</code> or <code>emacs</code> to view the logs or use <code>tail</code> to see the latest lines (or a combination of tail and <code>head</code>). But you sometimes you need to view contents of the log in real time (while the service writes the lines, you read them). This is where the best use for the tail command comes in: the <code>--follow</code> flag.</p>
<pre><code>tail -f /var/log/mylog</code></pre>
<p>Tail usually creates a process that prints a few lines (the lines that exist when you run it), but with the <code>-f</code> flag, the tail process keeps running and prints new lines as the file is being appended. The process will close when the uses issues the <code>Cltr-D</code> (end of file) command.</p>
</section>
<section id="truncating-a-file" class="level3">
<h3>Truncating a file</h3>
<p>Maybe you need to clear the contents of a log file that has gotten too big. You could do a <code>rm</code> on the file and let the service write the new logs in a new file. Some services are picky and need the file to already exist, so you could use the <code>touch</code> command (that “updates” an existing file) which has the interesting side effect when applied on a non existing file: to create an empty file (a new inode with no data blocks).</p>
<p>But you just want to empty a file (same inode, just the contents cleared). You could use the <code>truncate</code> command with the size flag of 0 bytes (<code>-s 0</code>). Or make use of the redirect operator <code>&gt;</code>.</p>
<pre><code>:&gt;file</code></pre>
<p>or just</p>
<pre><code>&gt;file</code></pre>
<p>These will open the file, and redirect nothing into it. Since it is not appending anything, the contents will be erased. <code>:</code> is the no-op command so nothing will actually be done, but the shell with open and write (well … nothing) into the file because of the redirection operator <code>&gt;</code>.</p>
</section>
<section id="one-input-two-outputs" class="level3">
<h3>One input, two outputs</h3>
<p>Some programs do not have a logging system programmed into them and just print messages to standard output. Maybe you want to save that output into a file for future use. This is simple to do with a file redirection:</p>
<pre><code>./myprogram &gt; my_log_file</code></pre>
<p>But if you do this, you will lose the output to the (virtual) terminal. A very interesting command is <code>tee</code>, that takes an input and writes to standard output, but also writes into a specified file. You need to pipe the output of a process into tee like this:</p>
<pre><code>./myprogram | tee my_log_file</code></pre>
<p>Now you have both real time printing of the messages and you have them saved for future use.</p>
<p>Hope this helps!</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Thu, 20 Jun 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/shell-tips-and-tricks-for-file-editing.html</guid>
</item>
<item>
    <title>Git Is The Answer 3/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-3.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-3.html" title="Git Is The Answer 3/3">Git Is The Answer 3/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 26, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>Finally, the third article on advanced <a href="http://git-scm.com/" title="Git">git</a> topics will focus on things that many will use only in some very special cases.</p>
<!--more-->

<section id="handling-multiple-remotes" class="level2">
<h2>Handling Multiple Remotes</h2>
<p>There are situations when you decide to use multiple remotes for a repository. For example, I’m using multiple remotes for my snippets repository:</p>
<pre><code>razvan@einherjar:~/code$ git remote show
gh
gl
glcs
origin

razvan@einherjar:~/code$ cat .git/config
[remote &quot;origin&quot;]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = razvan@swarm.cs.pub.ro:git-repos/code.git
[remote &quot;gh&quot;]
    url = git@github.com:razvand/snippets.git
    fetch = +refs/heads/*:refs/remotes/gh/*
[remote &quot;gl&quot;]
    url = git@gitlab.com:razvand/mine.git
    fetch = +refs/heads/*:refs/remotes/gl/*
[remote &quot;glcs&quot;]
    url = git@gitlab.cs.pub.ro:razvan.deaconescu/code.git
    fetch = +refs/heads/*:refs/remotes/glcs/*</code></pre>
<p>One particular situation when multiple remotes are required is when using a fork of a GitHub repository and doing <a href="https://help.github.com/articles/using-pull-requests" title="Using Pull Requests">pull requests</a>. This is also mentioned in the <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">“Syncing a fork” article on GitHub</a>.</p>
<p>After you create a repository fork on GitHub, you clone that fork. For example, I’ve forked the <a href="https://github.com/rosedu/site">ROSEdu site repository</a> in <a href="https://github.com/razvand/site">my forked repository</a>. I’ve cloned <a href="https://github.com/razvand/site">the forked repository</a>, worked on the local clone and then pushed changes. I would then create a pull request with those changes, that that they would be integrated in <a href="https://github.com/rosedu/site">the main repository</a>.</p>
<p>A problem arises when the fork is not synced with the main repository. Ideally, there would be a GitHub option to sync the fork. Since that doesn’t exist, the fork needs to be updated manually, though the local copy, as mentioned in the <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">“Syncing a fork” article on GitHub</a>.</p>
<p>First of all, you need to add the main repository as another remote to the local repository. This is a read-only remote. As suggested by GitHub, I’ve named this new remote <code>upstream</code>:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git remote show
origin
upstream
razvan@einherjar:~/projects/rosedu/site/site.git$ git remote show upstream
* remote upstream
  Fetch URL: git@github.com:rosedu/site.git
[...]</code></pre>
<p>In order to sync the local repository with the <code>upstream</code> remote (<a href="https://github.com/rosedu/site">the main repository</a>) just fetch and rebase changes:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git fetch upstream
remote: Counting objects: 16, done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 11 (delta 6), reused 9 (delta 4)
Unpacking objects: 100% (11/11), done.
From github.com:rosedu/site
   d21f23f..7411020  master     -&gt; upstream/master
razvan@einherjar:~/projects/rosedu/site/site.git$ git rebase upstream/master
First, rewinding head to replay your work on top of it...
Fast-forwarded master to upstream/master.</code></pre>
<p>This changes are then pushed to the <code>origin</code> remote (<a href="https://github.com/razvand/site">the forked repository</a>):</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git push origin master
Counting objects: 16, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (11/11), 1.99 KiB, done.
Total 11 (delta 6), reused 0 (delta 0)
To git@github.com:razvand/site.git
   6f3dd4d..7411020  master -&gt; master</code></pre>
<p>New local changes are then going to be pushed to the <code>origin</code> remote. These changes are then going to be aggregated into pull requests for the <code>upstream</code> remote (the main repository), now in sync with the forked repository.</p>
<p>The above is a specific use case for syncing a fork in GitHub, making use of two remotes: one for the original reposotiry and one for the fork. The <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">excellent GitHub article</a> thoroughly describes the steps you need to undertake to sync your fork.</p>
</section>
<section id="bisecting-the-history" class="level2">
<h2>Bisecting the History</h2>
<p>A powerful feature of Git is its ability to quickly find out a commit which introduced a bad change. Suppose you have a bug in your application:</p>
<pre><code>$ ./test_math.py 
2 + 3 = 6</code></pre>
<p>Usually, it is possible that the bug was introduced several commits backwards in time and it is harder to solve by debugging. Git comes to help with <code>git bisect</code>. First, start, the process with <code>git bisect start</code> and mark a good and a bad commit (the boundaries of the bisect range).</p>
<pre><code>$ git bisect start
$ git bisect good 368297b26ac1f0dc4
$ git bisect bad
Bisecting: 7 revisions left to test after this (roughly 3 steps)
[9e7e7252bc95453817187ef4f1a8d69fd4ed74d7] Modify test_math.py</code></pre>
<p>Git has found a commit in the middle of the range. You test your code again and see if the problem is solved or not. Then pass <code>good</code> or <code>bad</code> to <code>git bisect</code></p>
<pre><code>$ ./test_math.py
2 + 3 = 5
$ git bisect good
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[1c6fddb664ce6cb7bb483b8413b8e1216666c89f] Modify test_math.py (4).</code></pre>
<p>Continue this process until there are no more commits left in range.</p>
<pre><code>$ git bisect good 
1c6fddb664ce6cb7bb483b8413b8e1216666c89f is the first bad commit
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).</code></pre>
<p>Git even shows you the commit and it’s message. Now, do a simple <code>git show</code> to see the changeset of the bad commit:</p>
<pre><code>$ git show 1c6fddb664ce6cb7bb
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).

diff --git a/test_math.py b/test_math.py
index a6624f7..6e7f061 100755
--- a/test_math.py
+++ b/test_math.py
@@ -4,7 +4,7 @@ def custom_sum(*args):
     &quot;&quot;&quot;Calculate the sum of two given numbers.
        Make the sum work for multiple arguments
     &quot;&quot;&quot;
-    crt = 0
+    crt = 1
     for var in args:
         crt += var
     return crt</code></pre>
<p>In the end, you do a <code>git bisect reset</code> to return to the starting point. Do the fix, commit and continue contributing to the project.</p>
<p>Finally, you can use <code>git bisect</code> with automated tests. Start the bisection with <code>git bisect start</code> but pass the two end-points as well</p>
<pre><code>$ git bisect start HEAD 368297b26ac1f0dc4
Bisecting: 7 revisions left to test after this (roughly 3 steps)
[9e7e7252bc95453817187ef4f1a8d69fd4ed74d7] Modify test_math.py</code></pre>
<p>Then use <code>git bisect run</code> with a script which returns 0 if the code is ok or anything else if the bug is still present. Git will do the bisection for you.</p>
<pre><code>[mihai@esgaroth repo3]$ git bisect run ./test.sh
running ./test.sh
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[1c6fddb664ce6cb7bb483b8413b8e1216666c89f] Modify test_math.py (4).
running ./test.sh
Bisecting: 1 revision left to test after this (roughly 1 step)
[d8a251d8348ac236d344a00b50a987e2af726663] Modify test_math.py (2).
running ./test.sh
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[2a084b613f6b69cc8eb44648b8b5665402f5d9c0] Modify test_math.py (3).
running ./test.sh
1c6fddb664ce6cb7bb483b8413b8e1216666c89f is the first bad commit
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).

bisect run success</code></pre>
<p>This is indeed a good tool to have in Git’s toolbox.</p>
</section>
<section id="stashing-the-goodies" class="level2">
<h2>Stashing the Goodies</h2>
<p>It often happens that you’ve done some changes that you don’t want to commit yet but you need to sync with the remote repository (i.e. do a pull). Or you want to merge a branch without commiting your changes. In this case, the solution is using the stash.</p>
<p>The stash is a special place for Git where you temporarily stash your changes in order to keep your repository clean:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   irc.markdown
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
razvan@einherjar:~/projects/rosedu/site/site.git$ git stash
Saved working directory and index state WIP on master: 7411020 Remove a stupid Maruku error.
HEAD is now at 7411020 Remove a stupid Maruku error.
razvan@einherjar:~/projects/rosedu/site/site.git$ git status
# On branch master
nothing to commit (working directory clean)
razvan@einherjar:~/projects/rosedu/site/site.git$ git stash pop
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   irc.markdown
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
Dropped refs/stash@{0} (940f594b5f93e616dc16285e0677fbc78aa33620)</code></pre>
<p>The moment you stash changes, they “disappear” from the working directory. You will be able to get them by using <code>git stash pop</code>.</p>
<p>When multiple users are working on a given repository it will often happen that you need to pull their updates to see what has been done. Your local copy may have changes you’ve made yourself, but still far from a commit. In that case you would stash your changes, pull remote updates to sync your repository and then pop the stash to continue your work.</p>
</section>
<section id="a-reference-for-everything" class="level2">
<h2>A Reference For Everything</h2>
<p>We are near the end of the series. You have learned several things and you might try others as well. Yet, from time to time you may find out that you have lost a commit while playing around. Or, you rebased somewhere in the past but you need a commit which you had skipped. Or, you used <code>git reset --hard</code> and threw out a needed commit.</p>
<p>Luckily for you, Git doesn’t lose anything. Everything can be recovered by using a nice feature called <em>reflog</em> (from <em>reference log</em>). Let’s see it in action first.</p>
<pre><code>$ git reflog
096bec6 HEAD@{0}: commit: Add suggestion from Stefan Bucur.
8647ca7 HEAD@{1}: rebase finished: returning to refs/heads/master
8647ca7 HEAD@{2}: checkout: moving from master to 8647ca7c213ef26fe3426e079356a8b9c0ef1a8f^0
f020807 HEAD@{3}: commit: Ready to publish «Git is the answer - part 2» article.
274c7bc HEAD@{4}: rebase finished: returning to refs/heads/master
274c7bc HEAD@{5}: checkout: moving from master to 274c7bcc89487e3b3e5f935694046caf17bf005f^0
97b6f11 HEAD@{6}: commit: Add TODO for conclusions.</code></pre>
<p>The first column lists the commit hash at the point where the reference points to. The second is the state of <code>HEAD</code> (<code>HEAD{1}</code> is where <code>HEAD</code> previously was and so on). Then, you have a short description of what the reference is about (a commit, a checkout, a merge, a reset, etc.). This helps you in remembering what each change was about.</p>
<p>To recover a commit you just cherry pick it from the reflog using its hash or even the <code>HEAD@{id}</code> reference.</p>
</section>
<section id="garbage-collecting-the-repository" class="level2">
<h2>Garbage Collecting the Repository</h2>
<p>In the end, let’s focus on trimming down the disk usage of the repository. We want to prune some references. First, we set an expire date:</p>
<pre><code>$ git reflog expire --expire=1.day refs/head/master</code></pre>
<p>The above marks all references older than 1 day as being obsolete.</p>
<p>The second step is to find all unreachable objects:</p>
<pre><code>$ git fsck --unreachable
Checking object directories: 100% (256/256), done.
Checking objects: 100% (80/80), done.
unreachable blob 0aa0869906576afbe970251418982a5ae1a21698
unreachable blob c1b86d806044ba5e344e037ec0128f7e944d0e0f
unreachable blob 1f4998496071654c1b16eb33932d9d8b4fee5971
unreachable tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
unreachable blob d9024465bff70288deaa116a646c01f1af7170b6
unreachable blob ec1a48a4de254e80e803b4a4daa4a1f87fe4acea
unreachable blob f0c2af9359d0c360fae9779f8c8b3143e7002810
unreachable blob 17135e0a43db16a2d127a4cb2a692b41257c8c26
unreachable tree 39d3a7c06c75d063cc13adde71b745f412a6f84f
unreachable tree fad372db5c9c9b842d3786733437c5e32dda426b
unreachable blob 07c469400c9ed887416d16a178a28cb911e6634e
unreachable tree 8c1deacee70bb3329ae6cd4fa2fbf546395ea712
unreachable blob ad85a1ec621c5b58fd6876c4d88982406bd48156
unreachable tree c865c8cb1344f77363c5314a91344623fe0dd661
unreachable blob cdd55939c346385b7938f392f958812b4fa5ddaf
unreachable blob d8255f99d74b09435a70ad3f2b23b0e69babc818
unreachable blob f7ddf120540a448c50baba1047230e9ad7d687ac
unreachable tree 30ce2c01c2792fdc4dfa6ab5c3e0c1cb876a405a
unreachable blob 09cf62d09bb027f7cfabcb0333c1837fda3c9c92
unreachable blob 435716d9434a852229aee58d16104c3335684113
unreachable blob 974f61a4933ee5608b1810e569593adf2ffedd0b
unreachable tree b3df14961958afa1b0434c1a31065751fef3b30d</code></pre>
<p>Finally, we prune everything and then garbage collect the repository.</p>
<pre><code>$ git prune
$ git gc
Counting objects: 652, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (637/637), done.
Writing objects: 100% (652/652), done.
Total 652 (delta 373), reused 64 (delta 10)</code></pre>
<p>We can check the reduction in size by issuing a <code>du .</code> before and after the process. For this repository, we’ve managed to squeeze 3MB of space, not quite an impressive feat. However, for rapidly changing projects the gains should be higher.</p>
<p>In the end, looking at reflog we see</p>
<pre><code>$ git reflog --all
16a82d6 refs/remotes/gh/master@{0}: update by push
d3f979f refs/remotes/gh/master@{1}: update by push
454935e refs/remotes/gh/master@{2}: pull --rebase: fast-forward
bae10c0 refs/remotes/gh/master@{3}: update by push
c0a692b refs/remotes/gh/master@{4}: pull --rebase: fast-forward
04c5a1b refs/remotes/gh/master@{5}: pull --rebase: fast-forward
745963b refs/remotes/gh/master@{6}: pull --rebase: fast-forward
fd23db9</code></pre>
<p>The last line shows the id of one commit but nothing more related to it. You can still reset/rebase to there but you cannot point to any reference past it.</p>
</section>
<section id="closing-up" class="level2">
<h2>Closing Up</h2>
<p>We are at the close of this three part article on advanced git usage. Some of the things presented here might make you ask <em>when I’ll be using that?</em>. Some of them will prove useful from time to time while others are a good thing to know.</p>
<p>In the end, remember that Git is a swiss army knife among VCSs and there are a lot of features which will make us masters of it should we learn and practice using them. Like Vim, above a certain threshold Git can only be learnt by using it on a day to day basis.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 26 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-3.html</guid>
</item>
<item>
    <title>Git Is The Answer 2/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-2.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-2.html" title="Git Is The Answer 2/3">Git Is The Answer 2/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 22, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>The second article on advanced <a href="http://git-scm.com/" title="Git">git</a> topics is focused on cases where multiple branches are involved.</p>
<!--more-->

<section id="my-changes-conflict-with-yours" class="level2">
<h2>My Changes Conflict With Yours</h2>
<p>Usually, it happens that two developers are working on the same file. Git tries its best to merge changesets from both developers without complaining. However, Git is not a human being so it cannot know what change is the good ones when two changes happen two close to one another in the file.</p>
<p>As opposed to SVN, in Git, it is the responsibility of the one who pulls to solve conflicts. Thus, you are forced to solve conflicts before being able to push your changes upstream. But how does it work?</p>
<p>When you try to pull a file which contains conflicting changes, git will stop with a strange message. We will use the <code>git pull --rebase</code> command instead of the <code>git pull</code>.</p>
<pre><code>Using index info to reconstruct a base tree...
M   numbers
Falling back to patching base and 3-way merge...
Auto-merging numbers
CONFLICT (content): Merge conflict in numbers
Failed to merge in the changes.
Patch failed at 0001 Add a don&#39;t like line.
The copy of the patch that failed is found in:
   /tmp/repos/repo3/.git/rebase-apply/patch

When you have resolved this problem, run &quot;git rebase --continue&quot;.
If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.
To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.</code></pre>
<p>Even the file you changed looks awkward:</p>
<pre><code>4
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
insert here 5
=======
I don&#39;t like this line 5
&gt;&gt;&gt;&gt;&gt;&gt;&gt; Add a don&#39;t like line.
6</code></pre>
<p>As you can see, there are 3 more lines inserted. The ones starting with <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> mark the boundary of the conflicting area as well as the origin of the two conflicting changes (in our case <code>HEAD</code> is our repository’s latest commit while <code>Add a don't like line.</code> is the commit message of the last commit on the remote).</p>
<p>Between the two marks, you have the two changes, separated by <code>=======</code>. You, as a developer, have to choose what makes sense: either keep only one of the changes, merge them together or even write something totally new.</p>
<p>You edit the file with the desired change and add it back for staging. After this you simply continue the rebase process.</p>
<pre><code>git add numbers
git rebase --continue</code></pre>
<p>If there are more conflicting changes you will have to reapply the same procedure. Otherwise, you can go forward to pushing your changes. As you can see, no conflict ever leaves your repository, you are forced to deal with it before continuing.</p>
<p><strong>Note</strong>: Remember to solve all conflicts in the same file before continuing the rebase process. Otherwise artifacts will be committed. (this is an edit suggested via comments by Stefan Bucur).</p>
</section>
<section id="tags-and-branches-for-the-win" class="level2">
<h2>Tags and Branches For The Win</h2>
<p>Tags are the best way to keep references to old commits. They are particularly helpful in school related activities, where you update lectures and lab tasks on an yearly basis.</p>
<p>The right way to handle this is to create a tag at the end of each year and update labs and tasks. If at any time you want to check out the old curriculum you can get back to that tag.</p>
<p>For example, for the <a href="http://elf.cs.pub.ro/saisp/" title="SAISP">SAISP</a> repository, we’ve created tag a tag at the end of each year of study:</p>
<pre><code>razvan@einherjar:~/school/current/saisp/repo$ git tag
2009-2010
2010-2011
2011-2012</code></pre>
<p>If we would like to go to an old version we would simply create a branch starting from that tag:</p>
<pre><code>razvan@einherjar:~/school/current/saisp/repo$ git checkout -b br-2010-2011 2010-2011
Switched to a new branch &#39;br-2010-2011&#39;
razvan@einherjar:~/school/current/saisp/repo$ git status
# On branch br-2010-2011
nothing to commit (working directory clean)</code></pre>
<p>This allows easy organization of your tree, with no need to create other folders (one for each year). If you want to access information for a given year, you would just create a new branch.</p>
<p>This isn’t the case for the current <a href="https://github.com/rosedu/cdl" title="CDL repository">CDL repository</a>. I’m not particularly happy with it and will probably update it soon. As we weren’t very Git aware at the time we’ve created the repository, we started using a folder for each year:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
2009  2010  2011  2012  2013  Makefile  curs1  git_tutorial  template  util</code></pre>
<p>This is unnecessary and results in duplicate information, copied from one year to the other.</p>
<p>The solution is pretty simple: identify the last commit for each CDL session/year, tag it and then, if required create branches out of it.</p>
<p>Identifying the last commit for each CDL session is easily done through <code>gitk</code>. Browse the commits, look at the dates, identify the last commit and create a tag:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2009 e9858a9e74
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2010 26cd285f47
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2011-spring eaa2d7e9a8
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2011-fall f69e679ebd
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2012 fd23db9181</code></pre>
<p>Afterwards, we can create branches for each of them to easily go to that point:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2012 2012
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2011-fall 2011-fall
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2011-spring 2011-spring
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2010 2010
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2009 2009
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch
  br-2009
  br-2010
  br-2011-fall
  br-2011-spring
  br-2012
* master
  old-master
  razvan</code></pre>
<p>Of course, it would only makes sense to really clear the repository and turn it into a “normal” one that only stores current information. Remove old year data and show only current one:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
2009  2010  2011  2012  2013  Makefile  curs1  git_tutorial  template  util
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2009
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2010
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2011
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2012
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git mv 2013/* .
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ rmdir 2013
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
Makefile  curs1  curs3  git.mm  git_tutorial  schelet_inscriere  template  util
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git commit -m &#39;Clear folder structure. Leave only current items&#39;</code></pre>
<p>All is now nice and clear. Any updates are going to be done on the current folder structure; any request to see old data can be handled by checking out one of the branches.</p>
</section>
<section id="branches-on-a-virtual-machine" class="level2">
<h2>Branches on a Virtual Machine</h2>
<p>In our experience we come to situations when required to work on the desktop/laptop and on a virtual machine. Of course, we are using Git for storing code. It would only make sense for one repository to be a remote for another one. The case is that, with Git, every repository can be a remote.</p>
<p>As such, I usually create a clone of the laptop repository on the virtual machine. I usually do that with the <a href="http://ocw.cs.pub.ro/courses/so2/" title="SO2">SO2</a> repository when updating lab tasks or assignment solutions and tests. The laptop stores the main repository and the virtual machine uses a clone of that:</p>
<pre><code>root@spook:~# git clone razvan@einherjar.local:school/current/so2/git-repos/lab lab.git
root@spook:~# cd lab.git/
root@spook:~/lab.git# git remote show origin
* remote origin
  Fetch URL: razvan@einherjar.local:school/current/so2/git-repos/lab
  Push  URL: razvan@einherjar.local:school/current/so2/git-repos/lab
[...]</code></pre>
<p>In order to work properly on the remote you would need to use a dedicated branch to push information. You’ll have problems if you push to the master branch of a repository that is using the master branch itself. I usually dub this ‘vm’ (for virtual machine):</p>
<pre><code>root@spook:~/lab.git# git checkout -b vm
Switched to a new branch &#39;vm&#39;</code></pre>
<p>Any further changes are going to be committed in the ‘vm’ branch. Subsequently you would push these commits to the main repository, on the laptop:</p>
<pre><code>root@spook:~/lab.git# git push origin vm
Total 0 (delta 0), reused 0 (delta 0)
To razvan@einherjar.local:school/current/so2/git-repos/lab
 * [new branch]      vm -&gt; vm</code></pre>
<p>On the main repository, you would just merge or rebase your changes from that branch:</p>
<pre><code>razvan@einherjar:~/school/current/so2/git-repos/teme$ git rebase vm
First, rewinding head to replay your work on top of it...
Fast-forwarded master to vm.</code></pre>
<p>At this moment, all changes in the repository clone on the virtual machine are present in the master branch on the repository on the laptop. You need to create a separate branch on the virtual machine clone and then push that branch to the main repository. If you would work on the master branch on the virtual machine clone and push that, it would be problematic to integrate those changes in the master branch on the main repository.</p>
</section>
<section id="going-after-cherries" class="level2">
<h2>Going After Cherries</h2>
<p>In some cases, when working with multiple branches, it might happen that you need a specific commit from one branch but you don’t want to merge that branch into your current one.</p>
<p>Fortunately, Git allows you to pick a single commit as easy as picking cherries from a cherry-tree. In fact, the command is <code>git cherry-pick</code>.</p>
<pre><code>$ git cherry-pick 1904c3d4c9720
[master 3a30153] File to be cherry-picked in master.
 Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file_to_get_in_master</code></pre>
<p>Now, you have a <strong>new</strong> commit with the same change as the picked-up commit but on your branch</p>
<pre><code>$ git log
commit 3a3015378c3c1b43c4895a00829034d53fb9a5b5
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Fri Mar 8 23:59:07 2013 +0200

    File to be cherry-picked in master.</code></pre>
<p>As you can see, the commit hash is different meaning that there is a new commit, not the old one.</p>
<p>Should a commit not apply cleanly, Git stops the cherry-picking process and asks for human intervention. After the problems are resolved, you can continue it with <code>git cherry-pick --continue</code>. Or, you can abort it via <code>--abort</code> if you change your mind after seeing the trouble.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Fri, 22 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-2.html</guid>
</item>
<item>
    <title>Git Is The Answer 1/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-1.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-1.html" title="Git Is The Answer 1/3">Git Is The Answer 1/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 18, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>We focus again on <a href="http://git-scm.com/" title="Git">git</a>. This time, we will present some real-world scenarios where knoweldge of advance git topics helps. In order to keep down the length of the article, our presentation is divided in 3 parts, this being the first one of these.</p>
<!--more-->

<section id="user-setup" class="level2">
<h2>User Setup</h2>
<p>After installing Git and before doing any commits into a repository, you must setup your user information and preferences. It is common to make a global configuration, using <code>git config</code>:</p>
<pre><code>git config --global user.name &quot;Razvan Deaconescu&quot;
git config --global user.email &quot;razvan.deaconescu@cs.pub.ro&quot;
git config --global color.ui auto</code></pre>
<p>You should make this setup for each account you are using. At the minimum, you are going to use it at least for your laptop or workstation.</p>
<p>Global configuration is stored in <code>~/.gitconfig</code>.</p>
<p>In case you want to use another username within a repository, use the <code>git config</code> command in that repository, but without the <code>--global</code> option:</p>
<pre><code>cd /path/to/repository.git
git config user.email &quot;razvan@rosedu.org&quot;</code></pre>
<p>In the above setup, I have only updated the email address for the repository. The other options used are picked from the global configuration.</p>
<p>Per repository configuration is stored in <code>/path/to/repository.git/.config</code>.</p>
</section>
<section id="handling-line-endings-like-a-pro" class="level2">
<h2>Handling Line Endings Like a Pro</h2>
<p>From time to time it is possible that you will have to work with people working on a different operating system. It is no problem if both of you are using systems with similar line-endings (<code>CRLF</code> for Windows, <code>LF</code> for Linux/OSX). In all other cases, it might be that the default Git options used for this don’t work for you.</p>
<p>You can configure Git globally to handle line-endings if you set the <code>core.autocrlf</code> option in your <code>~/.gitconfig</code>. However, the best settings are different on different platforms.</p>
<p>For Windows you would use</p>
<pre><code>git config --global core.autocrlf true</code></pre>
<p>While for Linux/OSX you would use</p>
<pre><code>git config --global core.autocrlf input</code></pre>
<p>You must remember that these changes are valid only for you, and for the operating systems which have these settings configured. To have the settings travel with the repository you have to go a different path: you have to create a <code>.gitattributes</code> file with a content similar to</p>
<pre><code>* text=auto
*.c text
*.h text
*.sln text eol=crlf
*.png binary
*.jpg binary</code></pre>
<p>The first line tells git to handle the line endings of all <strong>text</strong> files automatically. The second two lines declare that <code>.c</code> and <code>.h</code> files are to be treated as text (thus their line endings are to be converted to the proper format). The <code>.sln</code> line uses a new parameter (<code>eol=crlf</code>) which tells Git to normalize files on commit but to always checkout them with <code>CRLF</code> endings. Use this for files which need to have <code>CRLF</code> endings, even on Linux. A similar settings exists for <code>LF</code> endings.</p>
<p>Finally, there are cases when you need to commit binary files into the repository. In this cases, changing <code>LF</code> characters to <code>CRLF</code> or the reverse will break the binary. You have to tell Git not to handle them, thus you’ll specify <code>binary</code> in <code>.gitattributes</code> file.</p>
<p>If the repository already contained some files commited, after creating the <code>.gitattributes</code> file each of you will have files show up as modified, even if they haven’t changed. This is because of the line endings changes which was not followed by repository renormalization. To solve this, you have to do the following steps (on a <strong>clean</strong> repository, otherwise changes will be lost).</p>
<p>First, remove everything from the index and reset both the index and the working directory (the risky part):</p>
<pre><code>git rm --cached -r .
git reset --hard</code></pre>
<p>Finally, stage all files which were normalized and create a normalizing commit</p>
<pre><code>git add .
git commit -m &quot;Normalized line endings&quot;</code></pre>
<p>From now on, Git will properly do the job of handling line endings for you.</p>
</section>
<section id="how-to-create-and-setup-a-local-repo" class="level2">
<h2>How to Create and Setup a Local Repo</h2>
<p>One of the best features of Git is the ability to rapidly create and use local repositories. You don’t have to create a repository and then clone it locally as you do in Subversion. You just create or access a directory and then initialize it as a Git repository. Changes to files in the directory will be able to be handled as commits.</p>
<p>Assuming I am working on a personal project, the first thing I would do is create a directory and initialize it as a Git repository. I recommend you append the <code>.git</code> extension:</p>
<pre><code>mkdir ~/projects/troscot.git
git init ~/projects/troscot.git</code></pre>
<p>The first thing you add in a repository is a <code>.gitignore</code> file stating the files you wish to ignore. Such a sample file is <a href="https://github.com/razvand/snippets/blob/master/config/gitignore" title="gitignore file">here</a>.</p>
<p>You just create the <code>.gitignore</code> file in the repository root and then add it to the repository:</p>
<pre><code>vi .gitignore
git add .gitignore
git commit -m &#39;Initial commit. Add global .gitignore file&#39;</code></pre>
<p>After this, one would create, add and commit any files required.</p>
<p>Another use case is adding repository support for existing directories. This may happen when there is some pieces of code you already have in place and want to place in a repository or, my personal use case, adding repository support to configuration directories. For example, if one would want to use versioning for Apache2 configuration files, one would issue (as <code>root</code>):</p>
<pre><code>cd /etc/apache2/
git init .
vi .gitignore
git add .gitignore
git commit -m &#39;Initial commit. Add global .gitignore file&#39;
git add .
git status
git commit -m &#39;Initial commit. Add all config files to repository&#39;</code></pre>
<p>The above commands add a <code>.gitignore</code> file in the repository and then add all Apache2 configuration files. The <code>git status</code> command is always necessary after a <code>git add</code> command to make sure you are committing the right stuff; you may need to update your <code>.gitignore</code> file in case you’ve missed ignoring certain types of files.</p>
</section>
<section id="i-want-to-tweak-a-commit" class="level2">
<h2>I Want To Tweak A Commit</h2>
<p>From time to time you realize that you have made something wrong with a commit. Either you forgot to add a good, descriptive <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" title="A Note About Git Commit Messages">message</a> or you have really screwed up some parts of the committed code. Maybe you have some compile errors to fix or your commit does too many things at once.</p>
<p>Anyway, for all of these cases, Git allows you to rewrite the commit at will. You can add changes of tweak metadata (author name, commit message, etc.) just by issuing the needed commands and ending with</p>
<pre><code>git commit --amend</code></pre>
<p>However, this works only for the tip of the current branch. If you want to change a commit which is not HEAD, you’ll need to do a rebase process. This will temporarily move HEAD to the commit you want to change, allowing you to use the above procedure. It is best to start the rebase interactively, so that you can have great control over what it does:</p>
<pre><code>git rebase -i cf80a4ad6d64bff2</code></pre>
<p>The above will open your editor (configurable via <code>git config</code>) with a content similar to the following one (you can see it on the disk if you really want to, it is in the repository, in <code>.git/rebase/git-rebase-todo</code>)</p>
<pre><code>pick 899e7e6 Add Silviu&#39;s contributions.
pick 02f1ef9 Add contribs to Cristian Mocanu.
pick 98194cd Add contributions of Andru Gheorghiu.
pick 2931f1d Add 2 contributions of spopescu.

# Rebase cf80a4a..2931f1d onto cf80a4a
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out</code></pre>
<p>As you can see, you can select an action to be applied for each one of the commits. If you only want to edit the commit message, you will change <code>pick</code> with <code>reword</code> (or <code>r</code>). If you want to edit the content of the commit you will select <code>edit</code>. You can even reorder commits, squash them one a bigger one, etc.</p>
<p>For now, we will focus on editing the contents of one commit. We will change last line in <code>edit</code>.</p>
<pre><code>e 2931f1d Add 2 contributions of spopescu.</code></pre>
<p>The rebase process continues and tries to do what we’ve said it to do. In our case, it will stop at commit <code>2931f1d</code> to allow editing it:</p>
<pre><code>Stopped at 2931f1d... Add 2 contributions of spopescu.
You can amend the commit now, with

    git commit --amend

Once you are satisfied with your changes, run

    git rebase --continue</code></pre>
<p>Now, you can add or remove content, change the commit as you want, etc. Then, you continue the rebase process by running <code>git commit --amend</code> followed by <code>git rebase --continue</code>. Both of them are needed.</p>
<p>If you decide that the commit is ok and that the rebase was not neeeded, you can always abort it with <code>git rebase --abort</code>.</p>
<p>Finally, keep in mind that <strong>it is not recommended to change commits once they have been pushed to another repository.</strong></p>
</section>
<section id="but-my-commit-is-too-big" class="level2">
<h2>But My Commit Is Too Big</h2>
<p>From time to time, you will have some big changes to commit. However, the case when all of them are atomic and cannot be split into several shorter components is very rare. Let’s take for our example a LaTeX Beamer file. You can commit each section separately or even each slide, as you see fit. But how can you split the commit?</p>
<p>Actually, you can use two commands for this. One is <code>git add -i</code> to allow interactive adding of parts of commits. The second one is to use <code>git add -p</code> which is more simpler.</p>
<p>Running <code>git add -p</code> will present you with the first chunk of changes to be committed. It might be the case that this is chunk is atomic or not. Git offers this question after presenting the hunk:</p>
<pre><code>Stage this hunk [y,n,q,a,d,/,e,?]?</code></pre>
<p>Selecting <code>?</code> will print the help text and the chunk afterwards. The help text is</p>
<pre><code>y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk nor any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk nor any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help</code></pre>
<p>Now, you can use these options to split your commit or edit it. Editing is the most advanced feature of <code>git add -p</code>, the only one who needs more explaining. So let’s choose this.</p>
<pre><code>Stage this hunk [y,n,q,a,d,/,e,?]? e</code></pre>
<p>Again, we will be presented with an editor to edit the contents of <code>.git/addp-hunk-edit.diff</code>. The comment at the end of the file is self-explanatory:</p>
<pre><code># To remove &#39;-&#39; lines, make them &#39; &#39; lines (context).
# To remove &#39;+&#39; lines, delete them.
# Lines starting with # will be removed.
#
# If the patch applies cleanly, the edited hunk will immediately be
# marked for staging. If it does not apply cleanly, you will be given
# an opportunity to edit again. If all lines of the hunk are removed,
# then the edit is aborted and the hunk is left unchanged.</code></pre>
<p>The <code>-</code> lines are lines which will be removed by the commit and the <code>+</code> ones will be added. Thus, if you remove a <code>+</code> line, the commit will not contain the addition and if you mark one <code>-</code> line as context it won’t be removed by the commit.</p>
<p>Since <code>git add -p</code> is a powerful feature, it is advisable to have it added as an alias, via <code>git config</code>. For example, I have <code>git gap</code> do the same thing as <code>git alias -p</code>. Then, it is in my muscles’ memory to type <code>git gap</code> when adding changes for a new commit.</p>
</section>
<section id="i-dont-want-this-commit-anymore" class="level2">
<h2>I Don’t Want This Commit Anymore</h2>
<p>There is often the case that you want to rollback a change you’ve done. As long as everything is happening locally (i.e. you haven’t pushed to a remote repository), Git offers the proper tools to handle this.</p>
<p>Assume you’ve updated a file but you want to discard those changes. You’ve just done some tests and feel those are not required and want to get back to the initial version. Then you would issue</p>
<pre><code>git checkout file-name</code></pre>
<p>This above command restores the file to the repository version. It’s very useful in case you make a mess in a local file.</p>
<p>A quite often situation is preparing to make a commit. When you do that you use one or more <code>git add</code> commands to prepare the commit; sometimes you use a <code>git add .</code> command that gives you little control on what to add to the staging area. You find out that you’ve added too much content to the staging area. In order to remove that extra content from the staging area (and leave it in the working directory), one issues:</p>
<pre><code>git reset HEAD file-name</code></pre>
<p>If you want to start building your commit from the beginning and discard all information in the staging area, you would use:</p>
<pre><code>git reset HEAD</code></pre>
<p>When leaving out the file name, all content from the staging area is discarded.</p>
<p>Consider that you’ve done some bad commits and you’ve just found out. The last two commits are really bad and need to be dropped. As long as you haven’t pushed anything, you can rework those commits: you can reset the repository HEAD and leave the commit changes in the working directory. If we want to redo the last two commits we would just issue:</p>
<pre><code>git reset HEAD^^</code></pre>
<p>Remember, this doesn’t remove the commit changes. The repository HEAD is simply moved back and the commit changes are left in the working directory; you will then use them to create proper new commits.</p>
</section>
<section id="i-want-to-change-this-file-silently" class="level2">
<h2>I Want To Change This File Silently</h2>
<p>GitHub has an excellent article on <a href="https://help.github.com/articles/ignoring-files" title="GitHub: Ignoring files">ignoring files</a>. A particular situation is ignoring updates to files that are already in the repository (i.e. they’ve been previously commited and can’t be ignored using .gitignore).</p>
<p>This kind of situation is part of my repository with letters of recommendation. I’m using a Makefile for compiling out a letter and have isolated in it some variables:</p>
<pre><code>$ cat Makefile
PERSON = Alexandru_Juncu
FOLDER = alexandru-juncu

include base.mk</code></pre>
<p>When I would create a new recommendation I update the <code>Makefile</code> to compile it. However this change needn’t make it to the repository. If I would do that then each time I’m only compiling out an old letter of recommendation I would change the Makefile file and push the new changes; or, if I don’t want to push those changes, I would need to use <code>git checkout</code>.</p>
<p>The best solution would be for any updates to the Makefile to not be considered. The initial Makefile file would be stored in the repository (as a model) but subsequent changes should not be visible. This can be done by using:</p>
<pre><code>git update-index --assume-unchanged Makefile</code></pre>
<p>No changes on the <code>Makefile</code> file are going to be considered in the working directory.</p>
<p>If you want to revert this option, use:</p>
<pre><code>git update-index --no-assume-unchanged Makefile</code></pre>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Mon, 18 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-1.html</guid>
</item>

    </channel> 
</rss>
